#!/bin/bash

# This script attempts to copy needed 3rd party libraries and frameworks into 
# the application bundle. It will then attempt to set the 'install_name' for 
# each library so that it references either the PlugIns or Frameworks directory.
# The Script will change every library it can find. Each of these libraries 
# needs to have an absolute install path so we can copy it.

BASE_DIR="$2"
cd ${BASE_DIR}

APPLICATION_NAME="$1"
APPLICATION_APP_BUNDLE="${APPLICATION_NAME}.app"
  APPLICATION_BINDIR="${APPLICATION_APP_BUNDLE}/Contents/MacOS"
APPLICATION_APP_NAME="${APPLICATION_BINDIR}/${APPLICATION_NAME}"
   PLUGINS_PATH="${APPLICATION_APP_BUNDLE}/Contents/Libraries"
FRAMEWORKS_PATH="${APPLICATION_APP_BUNDLE}/Contents/Frameworks"
RPATH_PLUGIN_PATH="@executable_path/../Libraries"
RPATH_FRAMEWORK_PATH="@executable_path/../Frameworks"

DEBUG=0

echo "*-----------------------------------------------------------*"
echo "* Copying Support Libraries for ${APPLICATION_APP_BUNDLE}"
echo "* Located in ${BASE_DIR}"

# Create the PlugIns and Frameworks Directories
mkdir -p "${PLUGINS_PATH}"
mkdir -p "${FRAMEWORKS_PATH}"

get_libraries() {
  #echo "-----------getting libraries for $1"
  LIBRARIES=$(echo $(otool -X -L $1 | grep -v ${RPATH_PLUGIN_PATH} | grep -v \/System\/Library | grep -v \/usr\/lib | sed -e 's/(.*)//' | sort -u))
  if [ -n "$LIBRARIES" ]; then
    for library in $LIBRARIES
    do
      update_library $library $1
    done
  fi
  #echo "----finished getting libraries for $1"
}

update_library() {
   lib="$1"
   path=$(dirname ${lib})
   file=$(basename ${lib})
   if [ ! -f "${BASE_DIR}/${PLUGINS_PATH}/${file}" ] 
   then 
     echo "* Installing Library -->$1<-- into ${APPLICATION_APP_BUNDLE} " 
     cp "${lib}" "${BASE_DIR}/${PLUGINS_PATH}" || exit 1
     chmod 755 "${BASE_DIR}/${PLUGINS_PATH}/${file}"
     install_name_tool -id "${RPATH_PLUGIN_PATH}/${file}" "${BASE_DIR}/${PLUGINS_PATH}/${file}"
     install_name_tool -change "${lib}" "${RPATH_PLUGIN_PATH}/${file}" "$2"
     get_libraries "${BASE_DIR}/${PLUGINS_PATH}/${file}"
   else
     # Change internal id of the Library
     install_name_tool -id "${RPATH_PLUGIN_PATH}/${file}" "${BASE_DIR}/${PLUGINS_PATH}/${file}"
     # Change the hugin executable to have the proper rpath for the Library
     #echo "updating $2 to use ${RPATH_PLUGIN_PATH}/${file} for ${lib}"
     install_name_tool -change "${lib}" "${RPATH_PLUGIN_PATH}/${file}" "$2"
   fi
}

add_executable() {
  # -----------------------------------------------------------------------------
  # Copy the executable into the App package 
  # -----------------------------------------------------------------------------
  if [ "$1" -nt "${BASE_DIR}/${APPLICATION_BINDIR}/$(basename $1)" ]; then
    echo "* Installing Binary -->$1<-- into ${APPLICATION_APP_BUNDLE} " 
    cp "$1" "${BASE_DIR}/${APPLICATION_BINDIR}" || exit 1
    get_libraries "${BASE_DIR}/${APPLICATION_BINDIR}/$(basename $1)"
  fi
}

get_libraries "${BASE_DIR}/${APPLICATION_BINDIR}/${APPLICATION_NAME}"

BINS=()
if [ "${APPLICATION_APP_BUNDLE}" == "Hugin.app" ]; then

  # bins compiled by Hugin
  add_executable "${BASE_DIR}/../../tools/align_image_stack"
  add_executable "${BASE_DIR}/../../tools/autooptimiser"
  add_executable "${BASE_DIR}/../../tools/checkpto"
  add_executable "${BASE_DIR}/../../tools/cpclean"
  add_executable "${BASE_DIR}/../../tools/linefind"
  add_executable "${BASE_DIR}/../../tools/geocpset"
  add_executable "${BASE_DIR}/../../tools/pano_modify"
  add_executable "${BASE_DIR}/../../hugin1/icpfind/icpfind"
  add_executable "${BASE_DIR}/../../hugin_cpfind/cpfind/cpfind"
  add_executable "${BASE_DIR}/../../celeste/celeste_standalone"

  # bins for external use
  add_executable "${BASE_DIR}/../../tools/fulla" 
  add_executable "${BASE_DIR}/../../tools/tca_correct" 
  add_executable "${BASE_DIR}/../../tools/vig_optimize" 
  add_executable "${BASE_DIR}/../../tools/hugin_lensdb" 
  add_executable "${BASE_DIR}/../../hugin1/executor/hugin_executor" 
  add_executable "${BASE_DIR}/../../tools/pano_trafo" 
  add_executable "${BASE_DIR}/../../tools/pto_gen" 
  add_executable "${BASE_DIR}/../../tools/pto_lensstack" 
  add_executable "${BASE_DIR}/../../tools/pto_mask" 
  add_executable "${BASE_DIR}/../../tools/pto_merge" 
  add_executable "${BASE_DIR}/../../tools/pto_move" 
  add_executable "${BASE_DIR}/../../tools/pto_template" 
  add_executable "${BASE_DIR}/../../tools/pto_var"

elif [ "${APPLICATION_APP_BUNDLE}" == "PTBatcherGUI.app" ] || [ "${APPLICATION_APP_BUNDLE}" == "HuginStitchProject.app" ]; then
  
  # bins compiled by Hugin
  add_executable "${BASE_DIR}/../../tools/align_image_stack"
  add_executable "${BASE_DIR}/../../tools/nona"
  add_executable "${BASE_DIR}/../../tools/hugin_hdrmerge"
  add_executable "${BASE_DIR}/../../tools/verdandi"

  # bins from ExternalProgams
  BINS+=("enblend")
  BINS+=("enfuse")

  if [ ! -x "${APPLICATION_APP_BUNDLE}/Contents/Resources/ExifTool/exiftool" ]; then
    echo "* Installing ExifTool into ${APPLICATION_APP_BUNDLE} " 
    mkdir "${APPLICATION_APP_BUNDLE}/Contents/Resources/ExifTool"
    cp -v "@CMAKE_SOURCE_DIR@/mac/ExternalPrograms/repository/"Image-ExifTool-*/exiftool  "${APPLICATION_APP_BUNDLE}/Contents/Resources/ExifTool"
    cp -r "@CMAKE_SOURCE_DIR@/mac/ExternalPrograms/repository/"Image-ExifTool-*/lib       "${APPLICATION_APP_BUNDLE}/Contents/Resources/ExifTool"
  fi

fi

for _exe in "${BINS[@]}"; do

  if [ -x ${BASE_DIR}/${APPLICATION_BINDIR}/$(basename ${_exe}) ]; then
    continue;
  fi

  add_executable "@CMAKE_SOURCE_DIR@/mac/ExternalPrograms/repository/bin/${_exe}" 
done

