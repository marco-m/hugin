/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AlignInfo swig_types[0]
#define SWIGTYPE_p_AppBase__DocumentData swig_types[1]
#define SWIGTYPE_p_AppBase__ProgressDisplay swig_types[2]
#define SWIGTYPE_p_AppBase__ProgressReporter swig_types[3]
#define SWIGTYPE_p_DestAlpha swig_types[4]
#define SWIGTYPE_p_DestImage swig_types[5]
#define SWIGTYPE_p_HuginBase__AllPointSampler swig_types[6]
#define SWIGTYPE_p_HuginBase__AssistantMakefilelibExport swig_types[7]
#define SWIGTYPE_p_HuginBase__AssistantMakefilelibExport__AssistantPrograms swig_types[8]
#define SWIGTYPE_p_HuginBase__AutoOptimise swig_types[9]
#define SWIGTYPE_p_HuginBase__BaseSrcPanoImage swig_types[10]
#define SWIGTYPE_p_HuginBase__CalculateCPStatistics swig_types[11]
#define SWIGTYPE_p_HuginBase__CalculateCPStatisticsError swig_types[12]
#define SWIGTYPE_p_HuginBase__CalculateCPStatisticsRadial swig_types[13]
#define SWIGTYPE_p_HuginBase__CalculateFOV swig_types[14]
#define SWIGTYPE_p_HuginBase__CalculateFitPanorama swig_types[15]
#define SWIGTYPE_p_HuginBase__CalculateImageOverlap swig_types[16]
#define SWIGTYPE_p_HuginBase__CalculateMeanExposure swig_types[17]
#define SWIGTYPE_p_HuginBase__CalculateOptimalROI swig_types[18]
#define SWIGTYPE_p_HuginBase__CalculateOptimalScale swig_types[19]
#define SWIGTYPE_p_HuginBase__CenterHorizontally swig_types[20]
#define SWIGTYPE_p_HuginBase__ComputeImageROI swig_types[21]
#define SWIGTYPE_p_HuginBase__ControlPoint swig_types[22]
#define SWIGTYPE_p_HuginBase__DestPanoImage swig_types[23]
#define SWIGTYPE_p_HuginBase__FileOutputStitcherAlgorithm swig_types[24]
#define SWIGTYPE_p_HuginBase__FitPanorama swig_types[25]
#define SWIGTYPE_p_HuginBase__ImageStitcherAlgorithm swig_types[26]
#define SWIGTYPE_p_HuginBase__Lens swig_types[27]
#define SWIGTYPE_p_HuginBase__LensVariable swig_types[28]
#define SWIGTYPE_p_HuginBase__LinkedVariable swig_types[29]
#define SWIGTYPE_p_HuginBase__ManagedPanoramaData swig_types[30]
#define SWIGTYPE_p_HuginBase__MaskPolygon__MaskType swig_types[31]
#define SWIGTYPE_p_HuginBase__NonaFileOutputStitcher swig_types[32]
#define SWIGTYPE_p_HuginBase__PTOptimizer swig_types[33]
#define SWIGTYPE_p_HuginBase__PTools__AlignInfoWrap swig_types[34]
#define SWIGTYPE_p_HuginBase__PTools__Transform swig_types[35]
#define SWIGTYPE_p_HuginBase__Panorama swig_types[36]
#define SWIGTYPE_p_HuginBase__PanoramaAlgorithm swig_types[37]
#define SWIGTYPE_p_HuginBase__PanoramaData swig_types[38]
#define SWIGTYPE_p_HuginBase__PanoramaDataMemento swig_types[39]
#define SWIGTYPE_p_HuginBase__PanoramaMakefilelibExport swig_types[40]
#define SWIGTYPE_p_HuginBase__PanoramaMakefilelibExport__PTPrograms swig_types[41]
#define SWIGTYPE_p_HuginBase__PanoramaMemento swig_types[42]
#define SWIGTYPE_p_HuginBase__PanoramaObserver swig_types[43]
#define SWIGTYPE_p_HuginBase__PanoramaOptions swig_types[44]
#define SWIGTYPE_p_HuginBase__PhotometricOptimizer swig_types[45]
#define SWIGTYPE_p_HuginBase__PointSampler swig_types[46]
#define SWIGTYPE_p_HuginBase__RandomPointSampler swig_types[47]
#define SWIGTYPE_p_HuginBase__RotatePanorama swig_types[48]
#define SWIGTYPE_p_HuginBase__SetWidthOptimal swig_types[49]
#define SWIGTYPE_p_HuginBase__SmartOptimise swig_types[50]
#define SWIGTYPE_p_HuginBase__SmartOptimizerStub swig_types[51]
#define SWIGTYPE_p_HuginBase__SmartPhotometricOptimizer swig_types[52]
#define SWIGTYPE_p_HuginBase__SrcPanoImage swig_types[53]
#define SWIGTYPE_p_HuginBase__StitcherAlgorithm swig_types[54]
#define SWIGTYPE_p_HuginBase__StraightenPanorama swig_types[55]
#define SWIGTYPE_p_HuginBase__TimeConsumingPanoramaAlgorithm swig_types[56]
#define SWIGTYPE_p_HuginBase__TranslatePanorama swig_types[57]
#define SWIGTYPE_p_HuginBase__Variable swig_types[58]
#define SWIGTYPE_p_Image swig_types[59]
#define SWIGTYPE_p_ImageOptions swig_types[60]
#define SWIGTYPE_p_LensProjectionFormat swig_types[61]
#define SWIGTYPE_p_MaskPolygon swig_types[62]
#define SWIGTYPE_p_MaskPolygonVector swig_types[63]
#define SWIGTYPE_p_Matrix3 swig_types[64]
#define SWIGTYPE_p_PointPairs swig_types[65]
#define SWIGTYPE_p_String swig_types[66]
#define SWIGTYPE_p_TrformStr swig_types[67]
#define SWIGTYPE_p_aPrefs swig_types[68]
#define SWIGTYPE_p_allocator_type swig_types[69]
#define SWIGTYPE_p_char swig_types[70]
#define SWIGTYPE_p_difference_type swig_types[71]
#define SWIGTYPE_p_double swig_types[72]
#define SWIGTYPE_p_first_type swig_types[73]
#define SWIGTYPE_p_hugin_utils__FDiff2D swig_types[74]
#define SWIGTYPE_p_key_type swig_types[75]
#define SWIGTYPE_p_mapped_type swig_types[76]
#define SWIGTYPE_p_optVars swig_types[77]
#define SWIGTYPE_p_p_PyObject swig_types[78]
#define SWIGTYPE_p_p_char swig_types[79]
#define SWIGTYPE_p_pano_projection_features swig_types[80]
#define SWIGTYPE_p_second_type swig_types[81]
#define SWIGTYPE_p_size_type swig_types[82]
#define SWIGTYPE_p_std__invalid_argument swig_types[83]
#define SWIGTYPE_p_std__istream swig_types[84]
#define SWIGTYPE_p_std__lessT_std__string_t swig_types[85]
#define SWIGTYPE_p_std__lessT_unsigned_int_t swig_types[86]
#define SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t swig_types[87]
#define SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__allocator_type swig_types[88]
#define SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type swig_types[89]
#define SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t swig_types[90]
#define SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__allocator_type swig_types[91]
#define SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type swig_types[92]
#define SWIGTYPE_p_std__ostream swig_types[93]
#define SWIGTYPE_p_std__ostringstream swig_types[94]
#define SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t swig_types[95]
#define SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t swig_types[96]
#define SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t swig_types[97]
#define SWIGTYPE_p_std__string swig_types[98]
#define SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t swig_types[99]
#define SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__allocator_type swig_types[100]
#define SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type swig_types[101]
#define SWIGTYPE_p_std__vectorT_HuginBase__Lens_std__allocatorT_HuginBase__Lens_t_t swig_types[102]
#define SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t swig_types[103]
#define SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__allocator_type swig_types[104]
#define SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type swig_types[105]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[106]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[107]
#define SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t swig_types[108]
#define SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t__allocator_type swig_types[109]
#define SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t swig_types[110]
#define SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t__allocator_type swig_types[111]
#define SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t swig_types[112]
#define SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__allocator_type swig_types[113]
#define SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type swig_types[114]
#define SWIGTYPE_p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t swig_types[115]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[116]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[117]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type swig_types[118]
#define SWIGTYPE_p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t swig_types[119]
#define SWIGTYPE_p_std__vectorT_vigra__Rect2D_std__allocatorT_vigra__Rect2D_t_t swig_types[120]
#define SWIGTYPE_p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t swig_types[121]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[122]
#define SWIGTYPE_p_tm swig_types[123]
#define SWIGTYPE_p_unsigned_char swig_types[124]
#define SWIGTYPE_p_value_type swig_types[125]
#define SWIGTYPE_p_vigra__Diff2D swig_types[126]
#define SWIGTYPE_p_vigra__Point2D swig_types[127]
#define SWIGTYPE_p_vigra__Rect2D swig_types[128]
#define SWIGTYPE_p_vigra__Size2D swig_types[129]
#define SWIGTYPE_p_vigra_ext__Interpolator swig_types[130]
static swig_type_info *swig_types[132];
static swig_module_info swig_module = {swig_types, 131, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _hsi.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__hsi

#else
#  define SWIG_init    init_hsi

#endif
#define SWIG_name    "_hsi"

#define SWIGVERSION 0x020001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define _HUGIN_SCRIPTING_INTERFACE

#include <hugin_shared.h>
#include <iostream>
#include <stdio.h>

#include <panodata/PanoramaData.h>
#include <panodata/Panorama.h>

#include <panotools/PanoToolsUtils.h>
#include <panotools/PanoToolsInterface.h>
#include <panotools/PanoToolsOptimizerWrapper.h>

#include <algorithm/PanoramaAlgorithm.h>
#include <algorithm/ControlPointCreatorAlgorithm.h>
#include <algorithm/StitcherAlgorithm.h>

#include <algorithms/assistant_makefile/AssistantMakefilelibExport.h>
#include <algorithms/basic/CalculateCPStatistics.h>
#include <algorithms/basic/CalculateMeanExposure.h>
#include <algorithms/basic/CalculateOptimalROI.h>
#include <algorithms/basic/CalculateOptimalScale.h>
#include <algorithms/basic/CalculateOverlap.h>
#include <algorithms/basic/RotatePanorama.h>
#include <algorithms/basic/StraightenPanorama.h>
#include <algorithms/basic/TranslatePanorama.h>
#include <algorithms/control_points/CleanCP.h>
#include <algorithms/nona/CalculateFOV.h>
#include <algorithms/nona/CenterHorizontally.h>
#include <algorithms/nona/ComputeImageROI.h>
#include <algorithms/nona/FitPanorama.h>
#include <algorithms/nona/NonaFileStitcher.h>
// #include <algorithms/nona/NonaImageStitcher.h>
// #include <algorithms/optimizer/ImageGraph.h>
#include <algorithms/optimizer/PhotometricOptimizer.h>
#include <algorithms/optimizer/PTOptimizer.h>
#include <algorithms/panorama_makefile/PanoramaMakefilelibExport.h>
#include <algorithms/point_sampler/PointSampler.h>


using namespace std;
using namespace HuginBase;
using namespace AppBase;

extern Panorama * pano_open ( const char * infile ) ;
extern void pano_close ( Panorama * pano ) ;
extern istream * make_std_ifstream ( const char * charp ) ;
extern ostream * make_std_ofstream ( const char * charp ) ;
extern void hello_python ( HuginBase::Panorama * pano ) ;


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <set>


#include <string>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}

SWIGINTERN swig::SwigPyIterator *vector_Sl_unsigned_SS_int_Sg__iterator(vector< unsigned int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_unsigned_SS_int_Sg____nonzero__(vector< unsigned int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_unsigned_SS_int_Sg____bool__(vector< unsigned int > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< unsigned int >::size_type vector_Sl_unsigned_SS_int_Sg____len__(vector< unsigned int > const *self){
      return self->size();
    }
SWIGINTERN vector< unsigned int >::value_type vector_Sl_unsigned_SS_int_Sg__pop(vector< unsigned int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<unsigned int,std::allocator< unsigned int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *vector_Sl_unsigned_SS_int_Sg____getslice__(vector< unsigned int > *self,vector< unsigned int >::difference_type i,vector< unsigned int >::difference_type j){
      return swig::getslice(self, i, j);
    }

namespace swig {
  template <> struct traits<unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };  
  template <>  struct traits_asval<unsigned int > {   
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from<unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<unsigned int, std::allocator< unsigned int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned int" "," "std::allocator< unsigned int >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____setslice__(vector< unsigned int > *self,vector< unsigned int >::difference_type i,vector< unsigned int >::difference_type j,std::vector< unsigned int,std::allocator< unsigned int > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____delslice__(vector< unsigned int > *self,vector< unsigned int >::difference_type i,vector< unsigned int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_0(vector< unsigned int > *self,vector< unsigned int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_0(vector< unsigned int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_0(vector< unsigned int > *self,PySliceObject *slice,std::vector< unsigned int,std::allocator< unsigned int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_1(vector< unsigned int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN vector< unsigned int >::value_type const &vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_1(vector< unsigned int > const *self,vector< unsigned int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_1(vector< unsigned int > *self,vector< unsigned int >::difference_type i,vector< unsigned int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_unsigned_SS_int_Sg__append(vector< unsigned int > *self,vector< unsigned int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *set_Sl_unsigned_SS_int_Sg__iterator(set< unsigned int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool set_Sl_unsigned_SS_int_Sg____nonzero__(set< unsigned int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool set_Sl_unsigned_SS_int_Sg____bool__(set< unsigned int > const *self){
      return !(self->empty());
    }
SWIGINTERN set< unsigned int >::size_type set_Sl_unsigned_SS_int_Sg____len__(set< unsigned int > const *self){
      return self->size();
    }
SWIGINTERN void set_Sl_unsigned_SS_int_Sg__append(set< unsigned int > *self,set< unsigned int >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool set_Sl_unsigned_SS_int_Sg____contains__(set< unsigned int > *self,set< unsigned int >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN set< unsigned int >::value_type set_Sl_unsigned_SS_int_Sg____getitem__(set< unsigned int > const *self,set< unsigned int >::difference_type i){
       return *(swig::cgetpos(self, i));
     }

  namespace swig {
    template <class SwigPySeq, class T> 
    inline void 
    assign(const SwigPySeq& swigpyseq, std::set<T>* seq) {
      // seq->insert(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
      typedef typename SwigPySeq::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
    }

    template <class T>
    struct traits_asptr<std::set<T> >  {
      static int asptr(PyObject *obj, std::set<T> **s) {
	return traits_asptr_stdseq<std::set<T> >::asptr(obj, s);
      }
    };

    template <class T>
    struct traits_from<std::set<T> > {
      static PyObject *from(const std::set<T>& vec) {
	return traits_from_stdseq<std::set<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::set<unsigned int, std::less< unsigned int >, std::allocator< unsigned int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "unsigned int" "," "std::less< unsigned int >" "," "std::allocator< unsigned int >" " >";
	  }
	};
      }
    


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


  namespace swig {
    template <>  struct traits<SrcPanoImage > {
      typedef pointer_category category;
      static const char* type_name() { return"SrcPanoImage"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<SrcPanoImage, std::allocator< SrcPanoImage > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "SrcPanoImage" "," "std::allocator< SrcPanoImage >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_SrcPanoImage_Sg__iterator(std::vector< SrcPanoImage > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_SrcPanoImage_Sg____nonzero__(std::vector< SrcPanoImage > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_SrcPanoImage_Sg____bool__(std::vector< SrcPanoImage > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< SrcPanoImage >::size_type std_vector_Sl_SrcPanoImage_Sg____len__(std::vector< SrcPanoImage > const *self){
      return self->size();
    }
SWIGINTERN std::vector< SrcPanoImage >::value_type std_vector_Sl_SrcPanoImage_Sg__pop(std::vector< SrcPanoImage > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > *std_vector_Sl_SrcPanoImage_Sg____getslice__(std::vector< SrcPanoImage > *self,std::vector< SrcPanoImage >::difference_type i,std::vector< SrcPanoImage >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_SrcPanoImage_Sg____setslice__(std::vector< SrcPanoImage > *self,std::vector< SrcPanoImage >::difference_type i,std::vector< SrcPanoImage >::difference_type j,std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_SrcPanoImage_Sg____delslice__(std::vector< SrcPanoImage > *self,std::vector< SrcPanoImage >::difference_type i,std::vector< SrcPanoImage >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_SrcPanoImage_Sg____delitem____SWIG_0(std::vector< SrcPanoImage > *self,std::vector< SrcPanoImage >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > *std_vector_Sl_SrcPanoImage_Sg____getitem____SWIG_0(std::vector< SrcPanoImage > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_SrcPanoImage_Sg____setitem____SWIG_0(std::vector< SrcPanoImage > *self,PySliceObject *slice,std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_SrcPanoImage_Sg____delitem____SWIG_1(std::vector< SrcPanoImage > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< SrcPanoImage >::value_type const &std_vector_Sl_SrcPanoImage_Sg____getitem____SWIG_1(std::vector< SrcPanoImage > const *self,std::vector< SrcPanoImage >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_SrcPanoImage_Sg____setitem____SWIG_1(std::vector< SrcPanoImage > *self,std::vector< SrcPanoImage >::difference_type i,std::vector< SrcPanoImage >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_SrcPanoImage_Sg__append(std::vector< SrcPanoImage > *self,std::vector< SrcPanoImage >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


  namespace swig {
    template <>  struct traits<Variable > {
      typedef pointer_category category;
      static const char* type_name() { return"Variable"; }
    };
  }


  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair< std::string, Variable > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "Variable" " >";
	  }
	};
      }
    

  namespace swig {
    template <class SwigPySeq, class K, class T >
    inline void
    assign(const SwigPySeq& swigpyseq, std::map<K,T > *map) {
      typedef typename std::map<K,T>::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T>
    struct traits_asptr<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<std::map<K,T>, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<map_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T >
    struct traits_from<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;
            
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_NewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	  size_type size = map.size();
	  int pysize = (size <= (size_type) INT_MAX) ? (int) size : -1;
	  if (pysize < 0) {
	    PyErr_SetString(PyExc_OverflowError,
			    "map size not valid in python");
	    SWIG_PYTHON_THREAD_END_BLOCK;
	    return NULL;
	  }
	  PyObject *obj = PyDict_New();
	  for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	    swig::SwigVar_PyObject key = swig::from(i->first);
	    swig::SwigVar_PyObject val = swig::from(i->second);
	    PyDict_SetItem(obj, key, val);
	  }
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return obj;
	}
      }
    };

    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueITerator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueITerator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueITerator_T<OutIter>(current, begin, end, seq);
    }
  }


      namespace swig {
	template <>  struct traits<std::map<std::string, Variable, std::less< std::string >, std::allocator< std::pair< std::string const,Variable > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "Variable" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,Variable > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_Variable_Sg__iterator(std::map< std::string,Variable > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_Variable_Sg____nonzero__(std::map< std::string,Variable > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_Variable_Sg____bool__(std::map< std::string,Variable > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,Variable >::size_type std_map_Sl_std_string_Sc_Variable_Sg____len__(std::map< std::string,Variable > const *self){
      return self->size();
    }
SWIGINTERN std::map< std::string,Variable >::mapped_type std_map_Sl_std_string_Sc_Variable_Sg____getitem__(std::map< std::string,Variable > const *self,std::map< std::string,Variable >::key_type const &key){
      std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_Variable_Sg____delitem__(std::map< std::string,Variable > *self,std::map< std::string,Variable >::key_type const &key){
      std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_Variable_Sg__has_key(std::map< std::string,Variable > const *self,std::map< std::string,Variable >::key_type const &key){
      std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_Variable_Sg__keys(std::map< std::string,Variable > *self){
      std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_Variable_Sg__values(std::map< std::string,Variable > *self){
      std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_Variable_Sg__items(std::map< std::string,Variable > *self){
      std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_Variable_Sg____contains__(std::map< std::string,Variable > *self,std::map< std::string,Variable >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_Variable_Sg__key_iterator(std::map< std::string,Variable > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_Variable_Sg__value_iterator(std::map< std::string,Variable > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_Variable_Sg____setitem__(std::map< std::string,Variable > *self,std::map< std::string,Variable >::key_type const &key,std::map< std::string,Variable >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg__iterator(std::vector< std::map< std::string,Variable > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____nonzero__(std::vector< std::map< std::string,Variable > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____bool__(std::vector< std::map< std::string,Variable > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::map< std::string,Variable > >::size_type std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____len__(std::vector< std::map< std::string,Variable > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::map< std::string,Variable > >::value_type std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg__pop(std::vector< std::map< std::string,Variable > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > *std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____getslice__(std::vector< std::map< std::string,Variable > > *self,std::vector< std::map< std::string,Variable > >::difference_type i,std::vector< std::map< std::string,Variable > >::difference_type j){
      return swig::getslice(self, i, j);
    }

      namespace swig {
	template <>  struct traits<std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >, std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >" "," "std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > >" " >";
	  }
	};
      }
    
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____setslice__(std::vector< std::map< std::string,Variable > > *self,std::vector< std::map< std::string,Variable > >::difference_type i,std::vector< std::map< std::string,Variable > >::difference_type j,std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____delslice__(std::vector< std::map< std::string,Variable > > *self,std::vector< std::map< std::string,Variable > >::difference_type i,std::vector< std::map< std::string,Variable > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____delitem____SWIG_0(std::vector< std::map< std::string,Variable > > *self,std::vector< std::map< std::string,Variable > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > *std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____getitem____SWIG_0(std::vector< std::map< std::string,Variable > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____setitem____SWIG_0(std::vector< std::map< std::string,Variable > > *self,PySliceObject *slice,std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____delitem____SWIG_1(std::vector< std::map< std::string,Variable > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::map< std::string,Variable > >::value_type const &std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____getitem____SWIG_1(std::vector< std::map< std::string,Variable > > const *self,std::vector< std::map< std::string,Variable > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____setitem____SWIG_1(std::vector< std::map< std::string,Variable > > *self,std::vector< std::map< std::string,Variable > >::difference_type i,std::vector< std::map< std::string,Variable > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg__append(std::vector< std::map< std::string,Variable > > *self,std::vector< std::map< std::string,Variable > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<LensVariable > {
      typedef pointer_category category;
      static const char* type_name() { return"LensVariable"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair< std::string, LensVariable > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "LensVariable" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map<std::string, LensVariable, std::less< std::string >, std::allocator< std::pair< std::string const,LensVariable > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "LensVariable" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,LensVariable > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_LensVariable_Sg__iterator(std::map< std::string,LensVariable > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_LensVariable_Sg____nonzero__(std::map< std::string,LensVariable > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_LensVariable_Sg____bool__(std::map< std::string,LensVariable > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,LensVariable >::size_type std_map_Sl_std_string_Sc_LensVariable_Sg____len__(std::map< std::string,LensVariable > const *self){
      return self->size();
    }
SWIGINTERN std::map< std::string,LensVariable >::mapped_type std_map_Sl_std_string_Sc_LensVariable_Sg____getitem__(std::map< std::string,LensVariable > const *self,std::map< std::string,LensVariable >::key_type const &key){
      std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_LensVariable_Sg____delitem__(std::map< std::string,LensVariable > *self,std::map< std::string,LensVariable >::key_type const &key){
      std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_LensVariable_Sg__has_key(std::map< std::string,LensVariable > const *self,std::map< std::string,LensVariable >::key_type const &key){
      std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_LensVariable_Sg__keys(std::map< std::string,LensVariable > *self){
      std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_LensVariable_Sg__values(std::map< std::string,LensVariable > *self){
      std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_LensVariable_Sg__items(std::map< std::string,LensVariable > *self){
      std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_LensVariable_Sg____contains__(std::map< std::string,LensVariable > *self,std::map< std::string,LensVariable >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_LensVariable_Sg__key_iterator(std::map< std::string,LensVariable > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_LensVariable_Sg__value_iterator(std::map< std::string,LensVariable > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_LensVariable_Sg____setitem__(std::map< std::string,LensVariable > *self,std::map< std::string,LensVariable >::key_type const &key,std::map< std::string,LensVariable >::mapped_type const &x){
      (*self)[key] = x;
    }

  namespace swig {
    template <>  struct traits<std::set< std::string,std::less< std::string >,std::allocator< std::string > > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::set< std::string,std::less< std::string >,std::allocator< std::string > >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >, std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::set< std::string,std::less< std::string >,std::allocator< std::string > >" "," "std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_set_Sl_std_string_Sg__Sg__iterator(std::vector< std::set< std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_set_Sl_std_string_Sg__Sg____nonzero__(std::vector< std::set< std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_set_Sl_std_string_Sg__Sg____bool__(std::vector< std::set< std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::set< std::string > >::size_type std_vector_Sl_std_set_Sl_std_string_Sg__Sg____len__(std::vector< std::set< std::string > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::set< std::string > >::value_type std_vector_Sl_std_set_Sl_std_string_Sg__Sg__pop(std::vector< std::set< std::string > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *std_vector_Sl_std_set_Sl_std_string_Sg__Sg____getslice__(std::vector< std::set< std::string > > *self,std::vector< std::set< std::string > >::difference_type i,std::vector< std::set< std::string > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_set_Sl_std_string_Sg__Sg____setslice__(std::vector< std::set< std::string > > *self,std::vector< std::set< std::string > >::difference_type i,std::vector< std::set< std::string > >::difference_type j,std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_set_Sl_std_string_Sg__Sg____delslice__(std::vector< std::set< std::string > > *self,std::vector< std::set< std::string > >::difference_type i,std::vector< std::set< std::string > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_set_Sl_std_string_Sg__Sg____delitem____SWIG_0(std::vector< std::set< std::string > > *self,std::vector< std::set< std::string > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *std_vector_Sl_std_set_Sl_std_string_Sg__Sg____getitem____SWIG_0(std::vector< std::set< std::string > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_set_Sl_std_string_Sg__Sg____setitem____SWIG_0(std::vector< std::set< std::string > > *self,PySliceObject *slice,std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_set_Sl_std_string_Sg__Sg____delitem____SWIG_1(std::vector< std::set< std::string > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::set< std::string > >::value_type const &std_vector_Sl_std_set_Sl_std_string_Sg__Sg____getitem____SWIG_1(std::vector< std::set< std::string > > const *self,std::vector< std::set< std::string > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_set_Sl_std_string_Sg__Sg____setitem____SWIG_1(std::vector< std::set< std::string > > *self,std::vector< std::set< std::string > >::difference_type i,std::vector< std::set< std::string > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_set_Sl_std_string_Sg__Sg__append(std::vector< std::set< std::string > > *self,std::vector< std::set< std::string > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<ControlPoint > {
      typedef pointer_category category;
      static const char* type_name() { return"ControlPoint"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<ControlPoint, std::allocator< ControlPoint > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ControlPoint" "," "std::allocator< ControlPoint >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_ControlPoint_Sg__iterator(std::vector< ControlPoint > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_ControlPoint_Sg____nonzero__(std::vector< ControlPoint > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_ControlPoint_Sg____bool__(std::vector< ControlPoint > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< ControlPoint >::size_type std_vector_Sl_ControlPoint_Sg____len__(std::vector< ControlPoint > const *self){
      return self->size();
    }
SWIGINTERN std::vector< ControlPoint >::value_type std_vector_Sl_ControlPoint_Sg__pop(std::vector< ControlPoint > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<ControlPoint,std::allocator< ControlPoint > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > *std_vector_Sl_ControlPoint_Sg____getslice__(std::vector< ControlPoint > *self,std::vector< ControlPoint >::difference_type i,std::vector< ControlPoint >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ControlPoint_Sg____setslice__(std::vector< ControlPoint > *self,std::vector< ControlPoint >::difference_type i,std::vector< ControlPoint >::difference_type j,std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_ControlPoint_Sg____delslice__(std::vector< ControlPoint > *self,std::vector< ControlPoint >::difference_type i,std::vector< ControlPoint >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ControlPoint_Sg____delitem____SWIG_0(std::vector< ControlPoint > *self,std::vector< ControlPoint >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > *std_vector_Sl_ControlPoint_Sg____getitem____SWIG_0(std::vector< ControlPoint > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ControlPoint_Sg____setitem____SWIG_0(std::vector< ControlPoint > *self,PySliceObject *slice,std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_ControlPoint_Sg____delitem____SWIG_1(std::vector< ControlPoint > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< ControlPoint >::value_type const &std_vector_Sl_ControlPoint_Sg____getitem____SWIG_1(std::vector< ControlPoint > const *self,std::vector< ControlPoint >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_ControlPoint_Sg____setitem____SWIG_1(std::vector< ControlPoint > *self,std::vector< ControlPoint >::difference_type i,std::vector< ControlPoint >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_ControlPoint_Sg__append(std::vector< ControlPoint > *self,std::vector< ControlPoint >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::pair<unsigned int,ControlPoint > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "unsigned int" "," "ControlPoint" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg__iterator(std::vector< std::pair< unsigned int,ControlPoint > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____nonzero__(std::vector< std::pair< unsigned int,ControlPoint > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____bool__(std::vector< std::pair< unsigned int,ControlPoint > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::pair< unsigned int,ControlPoint > >::size_type std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____len__(std::vector< std::pair< unsigned int,ControlPoint > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::pair< unsigned int,ControlPoint > >::value_type std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg__pop(std::vector< std::pair< unsigned int,ControlPoint > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > *std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____getslice__(std::vector< std::pair< unsigned int,ControlPoint > > *self,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type i,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type j){
      return swig::getslice(self, i, j);
    }

      namespace swig {
	template <>  struct traits<std::vector<std::pair< unsigned int,ControlPoint >, std::allocator< std::pair< unsigned int,ControlPoint > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::pair< unsigned int,ControlPoint >" "," "std::allocator< std::pair< unsigned int,ControlPoint > >" " >";
	  }
	};
      }
    
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____setslice__(std::vector< std::pair< unsigned int,ControlPoint > > *self,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type i,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type j,std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____delslice__(std::vector< std::pair< unsigned int,ControlPoint > > *self,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type i,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____delitem____SWIG_0(std::vector< std::pair< unsigned int,ControlPoint > > *self,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > *std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____getitem____SWIG_0(std::vector< std::pair< unsigned int,ControlPoint > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____setitem____SWIG_0(std::vector< std::pair< unsigned int,ControlPoint > > *self,PySliceObject *slice,std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____delitem____SWIG_1(std::vector< std::pair< unsigned int,ControlPoint > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____getitem____SWIG_1(std::vector< std::pair< unsigned int,ControlPoint > > const *self,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____setitem____SWIG_1(std::vector< std::pair< unsigned int,ControlPoint > > *self,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type i,std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg__append(std::vector< std::pair< unsigned int,ControlPoint > > *self,std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &x){
      self->push_back(x);
    }



#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_DocumentData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AppBase::DocumentData *arg1 = (AppBase::DocumentData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DocumentData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AppBase__DocumentData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DocumentData" "', argument " "1"" of type '" "AppBase::DocumentData *""'"); 
  }
  arg1 = reinterpret_cast< AppBase::DocumentData * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DocumentData_readData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AppBase::DocumentData *arg1 = (AppBase::DocumentData *) 0 ;
  std::istream *arg2 = 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  AppBase::DocumentData::ReadWriteError result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DocumentData_readData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AppBase__DocumentData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DocumentData_readData" "', argument " "1"" of type '" "AppBase::DocumentData *""'"); 
  }
  arg1 = reinterpret_cast< AppBase::DocumentData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DocumentData_readData" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DocumentData_readData" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DocumentData_readData" "', argument " "3"" of type '" "std::string""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DocumentData_readData" "', argument " "3"" of type '" "std::string""'");
    } else {
      std::string * temp = reinterpret_cast< std::string * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (AppBase::DocumentData::ReadWriteError)(arg1)->readData(*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DocumentData_readData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AppBase::DocumentData *arg1 = (AppBase::DocumentData *) 0 ;
  std::istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  AppBase::DocumentData::ReadWriteError result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DocumentData_readData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AppBase__DocumentData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DocumentData_readData" "', argument " "1"" of type '" "AppBase::DocumentData *""'"); 
  }
  arg1 = reinterpret_cast< AppBase::DocumentData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DocumentData_readData" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DocumentData_readData" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  result = (AppBase::DocumentData::ReadWriteError)(arg1)->readData(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DocumentData_readData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AppBase__DocumentData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__istream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DocumentData_readData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AppBase__DocumentData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__istream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DocumentData_readData__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DocumentData_readData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    readData(AppBase::DocumentData *,std::istream &,std::string)\n"
    "    readData(AppBase::DocumentData *,std::istream &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DocumentData_writeData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AppBase::DocumentData *arg1 = (AppBase::DocumentData *) 0 ;
  std::ostream *arg2 = 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  AppBase::DocumentData::ReadWriteError result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DocumentData_writeData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AppBase__DocumentData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DocumentData_writeData" "', argument " "1"" of type '" "AppBase::DocumentData *""'"); 
  }
  arg1 = reinterpret_cast< AppBase::DocumentData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DocumentData_writeData" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DocumentData_writeData" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DocumentData_writeData" "', argument " "3"" of type '" "std::string""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DocumentData_writeData" "', argument " "3"" of type '" "std::string""'");
    } else {
      std::string * temp = reinterpret_cast< std::string * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (AppBase::DocumentData::ReadWriteError)(arg1)->writeData(*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DocumentData_writeData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AppBase::DocumentData *arg1 = (AppBase::DocumentData *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  AppBase::DocumentData::ReadWriteError result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DocumentData_writeData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AppBase__DocumentData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DocumentData_writeData" "', argument " "1"" of type '" "AppBase::DocumentData *""'"); 
  }
  arg1 = reinterpret_cast< AppBase::DocumentData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DocumentData_writeData" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DocumentData_writeData" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (AppBase::DocumentData::ReadWriteError)(arg1)->writeData(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DocumentData_writeData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AppBase__DocumentData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DocumentData_writeData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AppBase__DocumentData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__string, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DocumentData_writeData__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DocumentData_writeData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    writeData(AppBase::DocumentData *,std::ostream &,std::string)\n"
    "    writeData(AppBase::DocumentData *,std::ostream &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DocumentData_isDirty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AppBase::DocumentData *arg1 = (AppBase::DocumentData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DocumentData_isDirty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AppBase__DocumentData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DocumentData_isDirty" "', argument " "1"" of type '" "AppBase::DocumentData const *""'"); 
  }
  arg1 = reinterpret_cast< AppBase::DocumentData * >(argp1);
  result = (bool)((AppBase::DocumentData const *)arg1)->isDirty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DocumentData_clearDirty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AppBase::DocumentData *arg1 = (AppBase::DocumentData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DocumentData_clearDirty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AppBase__DocumentData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DocumentData_clearDirty" "', argument " "1"" of type '" "AppBase::DocumentData *""'"); 
  }
  arg1 = reinterpret_cast< AppBase::DocumentData * >(argp1);
  (arg1)->clearDirty();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DocumentData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AppBase__DocumentData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_PanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PanoramaData" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getNewSubset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::PanoramaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_getNewSubset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getNewSubset" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_getNewSubset" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_getNewSubset" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::UIntSet * >(argp2);
  result = (HuginBase::PanoramaData *)((HuginBase::PanoramaData const *)arg1)->getNewSubset((HuginBase::UIntSet const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getNewCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_getNewCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getNewCopy" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::PanoramaData *)((HuginBase::PanoramaData const *)arg1)->getNewCopy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getNrOfImages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_getNrOfImages",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getNrOfImages" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = ((HuginBase::PanoramaData const *)arg1)->getNrOfImages();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SrcPanoImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_getImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getImage" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_getImage" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  result = (SrcPanoImage *) &((HuginBase::PanoramaData const *)arg1)->getImage(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_setImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  std::size_t arg2 ;
  SrcPanoImage arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_setImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_setImage" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_setImage" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__SrcPanoImage,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_setImage" "', argument " "3"" of type '" "SrcPanoImage""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_setImage" "', argument " "3"" of type '" "SrcPanoImage""'");
    } else {
      SrcPanoImage * temp = reinterpret_cast< SrcPanoImage * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->setImage(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_addImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  SrcPanoImage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_addImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_addImage" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__SrcPanoImage,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_addImage" "', argument " "2"" of type '" "SrcPanoImage const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_addImage" "', argument " "2"" of type '" "SrcPanoImage const &""'"); 
  }
  arg2 = reinterpret_cast< SrcPanoImage * >(argp2);
  result = (unsigned int)(arg1)->addImage((SrcPanoImage const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_removeImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_removeImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_removeImage" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_removeImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->removeImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_swapImages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_swapImages",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_swapImages" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_swapImages" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PanoramaData_swapImages" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->swapImages(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getSrcImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SrcPanoImage result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_getSrcImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getSrcImage" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_getSrcImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((HuginBase::PanoramaData const *)arg1)->getSrcImage(arg2);
  resultobj = SWIG_NewPointerObj((new SrcPanoImage(static_cast< const SrcPanoImage& >(result))), SWIGTYPE_p_HuginBase__SrcPanoImage, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_setSrcImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  SrcPanoImage *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_setSrcImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_setSrcImage" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_setSrcImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__SrcPanoImage,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_setSrcImage" "', argument " "3"" of type '" "SrcPanoImage const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_setSrcImage" "', argument " "3"" of type '" "SrcPanoImage const &""'"); 
  }
  arg3 = reinterpret_cast< SrcPanoImage * >(argp3);
  (arg1)->setSrcImage(arg2,(SrcPanoImage const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_setImageFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_setImageFilename",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_setImageFilename" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_setImageFilename" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_setImageFilename" "', argument " "3"" of type '" "std::string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_setImageFilename" "', argument " "3"" of type '" "std::string const &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  (arg1)->setImageFilename(arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_setImageOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  ImageOptions *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_setImageOptions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_setImageOptions" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_setImageOptions" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ImageOptions,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_setImageOptions" "', argument " "3"" of type '" "ImageOptions const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_setImageOptions" "', argument " "3"" of type '" "ImageOptions const &""'"); 
  }
  arg3 = reinterpret_cast< ImageOptions * >(argp3);
  (arg1)->setImageOptions(arg2,(ImageOptions const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_activateImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_activateImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_activateImage" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_activateImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PanoramaData_activateImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->activateImage(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_activateImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_activateImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_activateImage" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_activateImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->activateImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_activateImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PanoramaData_activateImage__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PanoramaData_activateImage__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PanoramaData_activateImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    activateImage(HuginBase::PanoramaData *,unsigned int,bool)\n"
    "    activateImage(HuginBase::PanoramaData *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getActiveImages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_getActiveImages",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getActiveImages" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = ((HuginBase::PanoramaData const *)arg1)->getActiveImages();
  resultobj = SWIG_NewPointerObj((new HuginBase::UIntSet(static_cast< const HuginBase::UIntSet& >(result))), SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getNrOfCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_getNrOfCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getNrOfCtrlPoints" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = ((HuginBase::PanoramaData const *)arg1)->getNrOfCtrlPoints();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getCtrlPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ControlPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_getCtrlPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getCtrlPoint" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_getCtrlPoint" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  result = (ControlPoint *) &((HuginBase::PanoramaData const *)arg1)->getCtrlPoint(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CPVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_getCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getCtrlPoints" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (CPVector *) &((HuginBase::PanoramaData const *)arg1)->getCtrlPoints();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getCtrlPointsForImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_getCtrlPointsForImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getCtrlPointsForImage" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_getCtrlPointsForImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((HuginBase::PanoramaData const *)arg1)->getCtrlPointsForImage(arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_setCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  CPVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_setCtrlPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_setCtrlPoints" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_setCtrlPoints" "', argument " "2"" of type '" "CPVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_setCtrlPoints" "', argument " "2"" of type '" "CPVector const &""'"); 
  }
  arg2 = reinterpret_cast< CPVector * >(argp2);
  (arg1)->setCtrlPoints((CPVector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_addCtrlPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  ControlPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_addCtrlPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_addCtrlPoint" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__ControlPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_addCtrlPoint" "', argument " "2"" of type '" "ControlPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_addCtrlPoint" "', argument " "2"" of type '" "ControlPoint const &""'"); 
  }
  arg2 = reinterpret_cast< ControlPoint * >(argp2);
  result = (unsigned int)(arg1)->addCtrlPoint((ControlPoint const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_removeCtrlPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_removeCtrlPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_removeCtrlPoint" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_removeCtrlPoint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->removeCtrlPoint(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_removeDuplicateCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_removeDuplicateCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_removeDuplicateCtrlPoints" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  (arg1)->removeDuplicateCtrlPoints();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_changeControlPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  ControlPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_changeControlPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_changeControlPoint" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_changeControlPoint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__ControlPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_changeControlPoint" "', argument " "3"" of type '" "ControlPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_changeControlPoint" "', argument " "3"" of type '" "ControlPoint const &""'"); 
  }
  arg3 = reinterpret_cast< ControlPoint * >(argp3);
  (arg1)->changeControlPoint(arg2,(ControlPoint const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getNextCPTypeLineNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_getNextCPTypeLineNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getNextCPTypeLineNumber" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (int)((HuginBase::PanoramaData const *)arg1)->getNextCPTypeLineNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_updateLineCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_updateLineCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_updateLineCtrlPoints" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  (arg1)->updateLineCtrlPoints();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_updateCtrlPointErrors__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  CPVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_updateCtrlPointErrors",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_updateCtrlPointErrors" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_updateCtrlPointErrors" "', argument " "2"" of type '" "CPVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_updateCtrlPointErrors" "', argument " "2"" of type '" "CPVector const &""'"); 
  }
  arg2 = reinterpret_cast< CPVector * >(argp2);
  (arg1)->updateCtrlPointErrors((CPVector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_updateCtrlPointErrors__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  CPVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_updateCtrlPointErrors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_updateCtrlPointErrors" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_updateCtrlPointErrors" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_updateCtrlPointErrors" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::UIntSet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_updateCtrlPointErrors" "', argument " "3"" of type '" "CPVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_updateCtrlPointErrors" "', argument " "3"" of type '" "CPVector const &""'"); 
  }
  arg3 = reinterpret_cast< CPVector * >(argp3);
  (arg1)->updateCtrlPointErrors((HuginBase::UIntSet const &)*arg2,(CPVector const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_updateCtrlPointErrors(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PanoramaData_updateCtrlPointErrors__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PanoramaData_updateCtrlPointErrors__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PanoramaData_updateCtrlPointErrors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    updateCtrlPointErrors(HuginBase::PanoramaData *,CPVector const &)\n"
    "    updateCtrlPointErrors(HuginBase::PanoramaData *,HuginBase::UIntSet const &,CPVector const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_getVariables",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getVariables" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = ((HuginBase::PanoramaData const *)arg1)->getVariables();
  resultobj = SWIG_NewPointerObj((new VariableMapVector(static_cast< const VariableMapVector& >(result))), SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getImageVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_getImageVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getImageVariables" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_getImageVariables" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((HuginBase::PanoramaData const *)arg1)->getImageVariables(arg2);
  resultobj = SWIG_NewPointerObj((new VariableMap(static_cast< const VariableMap& >(result))), SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_updateVariables__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  VariableMapVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_updateVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_updateVariables" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_updateVariables" "', argument " "2"" of type '" "VariableMapVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_updateVariables" "', argument " "2"" of type '" "VariableMapVector const &""'"); 
  }
  arg2 = reinterpret_cast< VariableMapVector * >(argp2);
  (arg1)->updateVariables((VariableMapVector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_updateVariables__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  VariableMapVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_updateVariables",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_updateVariables" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_updateVariables" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_updateVariables" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::UIntSet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_updateVariables" "', argument " "3"" of type '" "VariableMapVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_updateVariables" "', argument " "3"" of type '" "VariableMapVector const &""'"); 
  }
  arg3 = reinterpret_cast< VariableMapVector * >(argp3);
  (arg1)->updateVariables((HuginBase::UIntSet const &)*arg2,(VariableMapVector const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_updateVariables__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  VariableMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_updateVariables",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_updateVariables" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_updateVariables" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_updateVariables" "', argument " "3"" of type '" "VariableMap const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_updateVariables" "', argument " "3"" of type '" "VariableMap const &""'"); 
  }
  arg3 = reinterpret_cast< VariableMap * >(argp3);
  (arg1)->updateVariables(arg2,(VariableMap const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_updateVariables(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PanoramaData_updateVariables__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PanoramaData_updateVariables__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PanoramaData_updateVariables__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PanoramaData_updateVariables'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    updateVariables(HuginBase::PanoramaData *,VariableMapVector const &)\n"
    "    updateVariables(HuginBase::PanoramaData *,HuginBase::UIntSet const &,VariableMapVector const &)\n"
    "    updateVariables(HuginBase::PanoramaData *,unsigned int,VariableMap const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_updateVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  Variable *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaData_updateVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_updateVariable" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_updateVariable" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__Variable,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_updateVariable" "', argument " "3"" of type '" "Variable const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_updateVariable" "', argument " "3"" of type '" "Variable const &""'"); 
  }
  arg3 = reinterpret_cast< Variable * >(argp3);
  (arg1)->updateVariable(arg2,(Variable const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getOptimizeVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OptimizeVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_getOptimizeVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getOptimizeVector" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (OptimizeVector *) &((HuginBase::PanoramaData const *)arg1)->getOptimizeVector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_setOptimizeVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  OptimizeVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_setOptimizeVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_setOptimizeVector" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_setOptimizeVector" "', argument " "2"" of type '" "OptimizeVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_setOptimizeVector" "', argument " "2"" of type '" "OptimizeVector const &""'"); 
  }
  arg2 = reinterpret_cast< OptimizeVector * >(argp2);
  (arg1)->setOptimizeVector((OptimizeVector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_getOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PanoramaOptions *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_getOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_getOptions" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (PanoramaOptions *) &((HuginBase::PanoramaData const *)arg1)->getOptions();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_setOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  PanoramaOptions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_setOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_setOptions" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_setOptions" "', argument " "2"" of type '" "PanoramaOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_setOptions" "', argument " "2"" of type '" "PanoramaOptions const &""'"); 
  }
  arg2 = reinterpret_cast< PanoramaOptions * >(argp2);
  (arg1)->setOptions((PanoramaOptions const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_parseOptimizerScript(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  std::istream *arg2 = 0 ;
  HuginBase::UIntSet *arg3 = 0 ;
  VariableMapVector *arg4 = 0 ;
  CPVector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PanoramaData_parseOptimizerScript",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_parseOptimizerScript" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_parseOptimizerScript" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_parseOptimizerScript" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_parseOptimizerScript" "', argument " "3"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_parseOptimizerScript" "', argument " "3"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::UIntSet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PanoramaData_parseOptimizerScript" "', argument " "4"" of type '" "VariableMapVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_parseOptimizerScript" "', argument " "4"" of type '" "VariableMapVector &""'"); 
  }
  arg4 = reinterpret_cast< VariableMapVector * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PanoramaData_parseOptimizerScript" "', argument " "5"" of type '" "CPVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_parseOptimizerScript" "', argument " "5"" of type '" "CPVector &""'"); 
  }
  arg5 = reinterpret_cast< CPVector * >(argp5);
  ((HuginBase::PanoramaData const *)arg1)->parseOptimizerScript(*arg2,(HuginBase::UIntSet const &)*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_printPanoramaScript__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  std::ostream *arg2 = 0 ;
  OptimizeVector *arg3 = 0 ;
  PanoramaOptions *arg4 = 0 ;
  HuginBase::UIntSet *arg5 = 0 ;
  bool arg6 ;
  std::string *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:PanoramaData_printPanoramaScript",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_printPanoramaScript" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_printPanoramaScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printPanoramaScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_printPanoramaScript" "', argument " "3"" of type '" "OptimizeVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printPanoramaScript" "', argument " "3"" of type '" "OptimizeVector const &""'"); 
  }
  arg3 = reinterpret_cast< OptimizeVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PanoramaData_printPanoramaScript" "', argument " "4"" of type '" "PanoramaOptions const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printPanoramaScript" "', argument " "4"" of type '" "PanoramaOptions const &""'"); 
  }
  arg4 = reinterpret_cast< PanoramaOptions * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PanoramaData_printPanoramaScript" "', argument " "5"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printPanoramaScript" "', argument " "5"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  arg5 = reinterpret_cast< HuginBase::UIntSet * >(argp5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PanoramaData_printPanoramaScript" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PanoramaData_printPanoramaScript" "', argument " "7"" of type '" "std::string const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printPanoramaScript" "', argument " "7"" of type '" "std::string const &""'"); 
  }
  arg7 = reinterpret_cast< std::string * >(argp7);
  ((HuginBase::PanoramaData const *)arg1)->printPanoramaScript(*arg2,(OptimizeVector const &)*arg3,(PanoramaOptions const &)*arg4,(HuginBase::UIntSet const &)*arg5,arg6,(std::string const &)*arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_printPanoramaScript__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  std::ostream *arg2 = 0 ;
  OptimizeVector *arg3 = 0 ;
  PanoramaOptions *arg4 = 0 ;
  HuginBase::UIntSet *arg5 = 0 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:PanoramaData_printPanoramaScript",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_printPanoramaScript" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_printPanoramaScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printPanoramaScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_printPanoramaScript" "', argument " "3"" of type '" "OptimizeVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printPanoramaScript" "', argument " "3"" of type '" "OptimizeVector const &""'"); 
  }
  arg3 = reinterpret_cast< OptimizeVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PanoramaData_printPanoramaScript" "', argument " "4"" of type '" "PanoramaOptions const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printPanoramaScript" "', argument " "4"" of type '" "PanoramaOptions const &""'"); 
  }
  arg4 = reinterpret_cast< PanoramaOptions * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PanoramaData_printPanoramaScript" "', argument " "5"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printPanoramaScript" "', argument " "5"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  arg5 = reinterpret_cast< HuginBase::UIntSet * >(argp5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PanoramaData_printPanoramaScript" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ((HuginBase::PanoramaData const *)arg1)->printPanoramaScript(*arg2,(OptimizeVector const &)*arg3,(PanoramaOptions const &)*arg4,(HuginBase::UIntSet const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_printPanoramaScript(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_PanoramaData_printPanoramaScript__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__string, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_PanoramaData_printPanoramaScript__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PanoramaData_printPanoramaScript'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    printPanoramaScript(HuginBase::PanoramaData const *,std::ostream &,OptimizeVector const &,PanoramaOptions const &,HuginBase::UIntSet const &,bool,std::string const &)\n"
    "    printPanoramaScript(HuginBase::PanoramaData const *,std::ostream &,OptimizeVector const &,PanoramaOptions const &,HuginBase::UIntSet const &,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_printStitcherScript(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  std::ostream *arg2 = 0 ;
  PanoramaOptions *arg3 = 0 ;
  HuginBase::UIntSet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PanoramaData_printStitcherScript",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_printStitcherScript" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaData_printStitcherScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printStitcherScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaData_printStitcherScript" "', argument " "3"" of type '" "PanoramaOptions const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printStitcherScript" "', argument " "3"" of type '" "PanoramaOptions const &""'"); 
  }
  arg3 = reinterpret_cast< PanoramaOptions * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PanoramaData_printStitcherScript" "', argument " "4"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaData_printStitcherScript" "', argument " "4"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::UIntSet * >(argp4);
  ((HuginBase::PanoramaData const *)arg1)->printStitcherScript(*arg2,(PanoramaOptions const &)*arg3,(HuginBase::UIntSet const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_changeFinished(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaData_changeFinished",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_changeFinished" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  (arg1)->changeFinished();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaData_imageChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaData_imageChanged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaData_imageChanged" "', argument " "1"" of type '" "HuginBase::PanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaData_imageChanged" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->imageChanged(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PanoramaData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PanoramaData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_PanoramaObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaObserver *arg1 = (HuginBase::PanoramaObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PanoramaObserver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaObserver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PanoramaObserver" "', argument " "1"" of type '" "HuginBase::PanoramaObserver *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaObserver * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaObserver_panoramaChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaObserver *arg1 = (HuginBase::PanoramaObserver *) 0 ;
  HuginBase::PanoramaData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaObserver_panoramaChanged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaObserver_panoramaChanged" "', argument " "1"" of type '" "HuginBase::PanoramaObserver *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaObserver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaObserver_panoramaChanged" "', argument " "2"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaObserver_panoramaChanged" "', argument " "2"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaData * >(argp2);
  (arg1)->panoramaChanged(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaObserver_panoramaImagesChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaObserver *arg1 = (HuginBase::PanoramaObserver *) 0 ;
  HuginBase::PanoramaData *arg2 = 0 ;
  HuginBase::UIntSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaObserver_panoramaImagesChanged",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaObserver_panoramaImagesChanged" "', argument " "1"" of type '" "HuginBase::PanoramaObserver *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaObserver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaObserver_panoramaImagesChanged" "', argument " "2"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaObserver_panoramaImagesChanged" "', argument " "2"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaObserver_panoramaImagesChanged" "', argument " "3"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaObserver_panoramaImagesChanged" "', argument " "3"" of type '" "HuginBase::UIntSet const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::UIntSet * >(argp3);
  (arg1)->panoramaImagesChanged(*arg2,(HuginBase::UIntSet const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PanoramaObserver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PanoramaObserver, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_PanoramaDataMemento(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaDataMemento *arg1 = (HuginBase::PanoramaDataMemento *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PanoramaDataMemento",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaDataMemento, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PanoramaDataMemento" "', argument " "1"" of type '" "HuginBase::PanoramaDataMemento *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaDataMemento * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PanoramaDataMemento_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PanoramaDataMemento, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ManagedPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ManagedPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ManagedPanoramaData" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_addObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  HuginBase::PanoramaObserver *arg2 = (HuginBase::PanoramaObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ManagedPanoramaData_addObserver",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_addObserver" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__PanoramaObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ManagedPanoramaData_addObserver" "', argument " "2"" of type '" "HuginBase::PanoramaObserver *""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaObserver * >(argp2);
  (arg1)->addObserver(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_removeObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  HuginBase::PanoramaObserver *arg2 = (HuginBase::PanoramaObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ManagedPanoramaData_removeObserver",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_removeObserver" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__PanoramaObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ManagedPanoramaData_removeObserver" "', argument " "2"" of type '" "HuginBase::PanoramaObserver *""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaObserver * >(argp2);
  result = (bool)(arg1)->removeObserver(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_clearObservers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ManagedPanoramaData_clearObservers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_clearObservers" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  (arg1)->clearObservers();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_changeFinished(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ManagedPanoramaData_changeFinished",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_changeFinished" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  (arg1)->changeFinished();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_imageChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ManagedPanoramaData_imageChanged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_imageChanged" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ManagedPanoramaData_imageChanged" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->imageChanged(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_getNewMemento(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaDataMemento *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ManagedPanoramaData_getNewMemento",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_getNewMemento" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  result = (HuginBase::PanoramaDataMemento *)((HuginBase::ManagedPanoramaData const *)arg1)->getNewMemento();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaDataMemento, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_setMementoToCopyOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  HuginBase::PanoramaDataMemento *arg2 = (HuginBase::PanoramaDataMemento *) (HuginBase::PanoramaDataMemento *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ManagedPanoramaData_setMementoToCopyOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_setMementoToCopyOf" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__PanoramaDataMemento, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ManagedPanoramaData_setMementoToCopyOf" "', argument " "2"" of type '" "HuginBase::PanoramaDataMemento const *const""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaDataMemento * >(argp2);
  result = (bool)(arg1)->setMementoToCopyOf((HuginBase::PanoramaDataMemento const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_needsOptimization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ManagedPanoramaData_needsOptimization",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_needsOptimization" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  result = (bool)(arg1)->needsOptimization();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_markAsOptimized__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ManagedPanoramaData_markAsOptimized",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_markAsOptimized" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ManagedPanoramaData_markAsOptimized" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->markAsOptimized(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_markAsOptimized__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ManagedPanoramaData *arg1 = (HuginBase::ManagedPanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ManagedPanoramaData_markAsOptimized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ManagedPanoramaData_markAsOptimized" "', argument " "1"" of type '" "HuginBase::ManagedPanoramaData *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ManagedPanoramaData * >(argp1);
  (arg1)->markAsOptimized();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ManagedPanoramaData_markAsOptimized(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ManagedPanoramaData_markAsOptimized__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__ManagedPanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ManagedPanoramaData_markAsOptimized__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ManagedPanoramaData_markAsOptimized'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    markAsOptimized(HuginBase::ManagedPanoramaData *,bool)\n"
    "    markAsOptimized(HuginBase::ManagedPanoramaData *)\n");
  return NULL;
}


SWIGINTERN PyObject *ManagedPanoramaData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__ManagedPanoramaData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::SwigPyIterator *,size_t)\n"
    "    incr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::SwigPyIterator *,size_t)\n"
    "    decr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_UIntVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_iterator" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_unsigned_SS_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___nonzero__" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (bool)vector_Sl_unsigned_SS_int_Sg____nonzero__((vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___bool__" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (bool)vector_Sl_unsigned_SS_int_Sg____bool__((vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___len__" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = vector_Sl_unsigned_SS_int_Sg____len__((vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_pop" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  try {
    result = (vector< unsigned int >::value_type)vector_Sl_unsigned_SS_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UIntVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___getslice__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector___getslice__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector___getslice__" "', argument " "3"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< vector< unsigned int >::difference_type >(val3);
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)vector_Sl_unsigned_SS_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  vector< unsigned int >::difference_type arg3 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:UIntVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___setslice__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector___setslice__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector___setslice__" "', argument " "3"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< vector< unsigned int >::difference_type >(val3);
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UIntVector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UIntVector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_unsigned_SS_int_Sg____setslice__(arg1,arg2,arg3,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UIntVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___delslice__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector___delslice__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector___delslice__" "', argument " "3"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< vector< unsigned int >::difference_type >(val3);
  try {
    vector_Sl_unsigned_SS_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___delitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector___delitem__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  try {
    vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___getitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UIntVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___setitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UIntVector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UIntVector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___delitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_UIntVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UIntVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UIntVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(vector< unsigned int > *,vector< unsigned int >::difference_type)\n"
    "    __delitem__(vector< unsigned int > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___getitem__" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector___getitem__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  try {
    result = (vector< unsigned int >::value_type *) &vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_1((vector< unsigned int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_UIntVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UIntVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UIntVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(vector< unsigned int > *,PySliceObject *)\n"
    "    __getitem__(vector< unsigned int > const *,vector< unsigned int >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::difference_type arg2 ;
  vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UIntVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector___setitem__" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector___setitem__" "', argument " "2"" of type '" "vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector___setitem__" "', argument " "3"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  try {
    vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_1(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UIntVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UIntVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UIntVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(vector< unsigned int > *,PySliceObject *,std::vector< unsigned int,std::allocator< unsigned int > > const &)\n"
    "    __setitem__(vector< unsigned int > *,vector< unsigned int >::difference_type,vector< unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_append" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_append" "', argument " "2"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  vector_Sl_unsigned_SS_int_Sg__append(arg1,(unsigned int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UIntVector")) SWIG_fail;
  result = (vector< unsigned int > *)new vector< unsigned int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  vector< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UIntVector",&obj0)) SWIG_fail;
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UIntVector" "', argument " "1"" of type '" "std::vector< unsigned int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UIntVector" "', argument " "1"" of type '" "std::vector< unsigned int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< unsigned int > *)new vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_empty" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (bool)((vector< unsigned int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_size" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_clear" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_swap" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UIntVector_swap" "', argument " "2"" of type '" "std::vector< unsigned int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UIntVector_swap" "', argument " "2"" of type '" "std::vector< unsigned int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< unsigned int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_get_allocator" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< unsigned int >::allocator_type(static_cast< const vector< unsigned int >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_begin" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_end" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_rbegin" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_rend" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UIntVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UIntVector" "', argument " "1"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< vector< unsigned int >::size_type >(val1);
  result = (vector< unsigned int > *)new vector< unsigned int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_pop_back" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_resize" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_resize" "', argument " "2"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_erase" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_erase" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_erase" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::iterator arg2 ;
  vector< unsigned int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UIntVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_erase" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_erase" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_erase" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_erase" "', argument " "3"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_erase" "', argument " "3"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_UIntVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_UIntVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UIntVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(vector< unsigned int > *,vector< unsigned int >::iterator)\n"
    "    erase(vector< unsigned int > *,vector< unsigned int >::iterator,vector< unsigned int >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int >::size_type arg1 ;
  vector< unsigned int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vector< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UIntVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UIntVector" "', argument " "1"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< vector< unsigned int >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UIntVector" "', argument " "2"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  result = (vector< unsigned int > *)new vector< unsigned int >(arg1,(vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UIntVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UIntVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UIntVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UIntVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UIntVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< unsigned int >()\n"
    "    vector< unsigned int >(std::vector< unsigned int > const &)\n"
    "    vector< unsigned int >(vector< unsigned int >::size_type)\n"
    "    vector< unsigned int >(vector< unsigned int >::size_type,vector< unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_push_back" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_push_back" "', argument " "2"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_front" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (vector< unsigned int >::value_type *) &((vector< unsigned int > const *)arg1)->front();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_back" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = (vector< unsigned int >::value_type *) &((vector< unsigned int > const *)arg1)->back();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::size_type arg2 ;
  vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UIntVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_assign" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_assign" "', argument " "2"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector_assign" "', argument " "3"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::size_type arg2 ;
  vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UIntVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_resize" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_resize" "', argument " "2"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector_resize" "', argument " "3"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UIntVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UIntVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UIntVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(vector< unsigned int > *,vector< unsigned int >::size_type)\n"
    "    resize(vector< unsigned int > *,vector< unsigned int >::size_type,vector< unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::iterator arg2 ;
  vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UIntVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_insert" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_insert" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_insert" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector_insert" "', argument " "3"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::iterator arg2 ;
  vector< unsigned int >::size_type arg3 ;
  vector< unsigned int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  vector< unsigned int >::value_type temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:UIntVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_insert" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_insert" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntVector_insert" "', argument " "2"" of type '" "vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector_insert" "', argument " "3"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg3 = static_cast< vector< unsigned int >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UIntVector_insert" "', argument " "4"" of type '" "vector< unsigned int >::value_type""'");
  } 
  temp4 = static_cast< vector< unsigned int >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(vector< unsigned int >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UIntVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_UIntVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UIntVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(vector< unsigned int > *,vector< unsigned int >::iterator,vector< unsigned int >::value_type const &)\n"
    "    insert(vector< unsigned int > *,vector< unsigned int >::iterator,vector< unsigned int >::size_type,vector< unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_reserve" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_reserve" "', argument " "2"" of type '" "vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< vector< unsigned int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_capacity" "', argument " "1"" of type '" "vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  result = ((vector< unsigned int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UIntVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector< unsigned int > *arg1 = (vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UIntVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UIntVector" "', argument " "1"" of type '" "vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< unsigned int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UIntVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UIntSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< unsigned int > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  set< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UIntSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UIntSet" "', argument " "1"" of type '" "std::less< unsigned int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UIntSet" "', argument " "1"" of type '" "std::less< unsigned int > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< unsigned int > * >(argp1);
  result = (set< unsigned int > *)new set< unsigned int >((std::less< unsigned int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_iterator" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = (swig::SwigPyIterator *)set_Sl_unsigned_SS_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet___nonzero__" "', argument " "1"" of type '" "set< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = (bool)set_Sl_unsigned_SS_int_Sg____nonzero__((set< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet___bool__" "', argument " "1"" of type '" "set< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = (bool)set_Sl_unsigned_SS_int_Sg____bool__((set< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  set< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet___len__" "', argument " "1"" of type '" "set< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = set_Sl_unsigned_SS_int_Sg____len__((set< unsigned int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_append" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet_append" "', argument " "2"" of type '" "set< unsigned int >::value_type""'");
  } 
  arg2 = static_cast< set< unsigned int >::value_type >(val2);
  set_Sl_unsigned_SS_int_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet___contains__" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet___contains__" "', argument " "2"" of type '" "set< unsigned int >::value_type""'");
  } 
  arg2 = static_cast< set< unsigned int >::value_type >(val2);
  result = (bool)set_Sl_unsigned_SS_int_Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  set< unsigned int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet___getitem__" "', argument " "1"" of type '" "set< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet___getitem__" "', argument " "2"" of type '" "set< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< set< unsigned int >::difference_type >(val2);
  try {
    result = (set< unsigned int >::value_type)set_Sl_unsigned_SS_int_Sg____getitem__((set< unsigned int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UIntSet")) SWIG_fail;
  result = (set< unsigned int > *)new set< unsigned int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntSet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< unsigned int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  set< unsigned int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UIntSet",&obj0)) SWIG_fail;
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UIntSet" "', argument " "1"" of type '" "std::set< unsigned int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UIntSet" "', argument " "1"" of type '" "std::set< unsigned int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (set< unsigned int > *)new set< unsigned int >((std::set< unsigned int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntSet(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UIntSet__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_unsigned_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UIntSet__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UIntSet__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UIntSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    set< unsigned int >(std::less< unsigned int > const &)\n"
    "    set< unsigned int >()\n"
    "    set< unsigned int >(std::set< unsigned int > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_empty" "', argument " "1"" of type '" "set< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = (bool)((set< unsigned int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  set< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_size" "', argument " "1"" of type '" "set< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = ((set< unsigned int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_clear" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  std::set< unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_swap" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UIntSet_swap" "', argument " "2"" of type '" "std::set< unsigned int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UIntSet_swap" "', argument " "2"" of type '" "std::set< unsigned int > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< unsigned int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  set< unsigned int >::key_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  set< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_erase" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet_erase" "', argument " "2"" of type '" "set< unsigned int >::key_type""'");
  } 
  temp2 = static_cast< set< unsigned int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->erase((set< unsigned int >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  set< unsigned int >::key_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  set< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_count" "', argument " "1"" of type '" "set< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet_count" "', argument " "2"" of type '" "set< unsigned int >::key_type""'");
  } 
  temp2 = static_cast< set< unsigned int >::key_type >(val2);
  arg2 = &temp2;
  result = ((set< unsigned int > const *)arg1)->count((set< unsigned int >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  set< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_begin" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const set< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  set< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_end" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const set< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  set< unsigned int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_rbegin" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const set< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  set< unsigned int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIntSet_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_rend" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const set< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_erase" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntSet_erase" "', argument " "2"" of type '" "set< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<set< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<set< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntSet_erase" "', argument " "2"" of type '" "set< unsigned int >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::iterator arg2 ;
  set< unsigned int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UIntSet_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_erase" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntSet_erase" "', argument " "2"" of type '" "set< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<set< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<set< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntSet_erase" "', argument " "2"" of type '" "set< unsigned int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntSet_erase" "', argument " "3"" of type '" "set< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<set< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<set< unsigned int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UIntSet_erase" "', argument " "3"" of type '" "set< unsigned int >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<set< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_UIntSet_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UIntSet_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<set< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<set< unsigned int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_UIntSet_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UIntSet_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(set< unsigned int > *,set< unsigned int >::key_type const &)\n"
    "    erase(set< unsigned int > *,set< unsigned int >::iterator)\n"
    "    erase(set< unsigned int > *,set< unsigned int >::iterator,set< unsigned int >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  set< unsigned int >::key_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  set< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_find" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet_find" "', argument " "2"" of type '" "set< unsigned int >::key_type""'");
  } 
  temp2 = static_cast< set< unsigned int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->find((set< unsigned int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const set< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  set< unsigned int >::key_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  set< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_lower_bound" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet_lower_bound" "', argument " "2"" of type '" "set< unsigned int >::key_type""'");
  } 
  temp2 = static_cast< set< unsigned int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->lower_bound((set< unsigned int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const set< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  set< unsigned int >::key_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  set< unsigned int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_upper_bound" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet_upper_bound" "', argument " "2"" of type '" "set< unsigned int >::key_type""'");
  } 
  temp2 = static_cast< set< unsigned int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->upper_bound((set< unsigned int >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const set< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  set< unsigned int >::key_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< set< unsigned int >::iterator,set< unsigned int >::iterator > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_equal_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_equal_range" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet_equal_range" "', argument " "2"" of type '" "set< unsigned int >::key_type""'");
  } 
  temp2 = static_cast< set< unsigned int >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->equal_range((set< unsigned int >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< set< unsigned int >::iterator,set< unsigned int >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< set< unsigned int >::iterator,set< unsigned int >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntSet_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  set< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  set< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< set< unsigned int >::iterator,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIntSet_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntSet_insert" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntSet_insert" "', argument " "2"" of type '" "set< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< set< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  result = (arg1)->insert((set< unsigned int >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< set< unsigned int >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< set< unsigned int >::iterator,bool > & >(result).second));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UIntSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  set< unsigned int > *arg1 = (set< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UIntSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UIntSet" "', argument " "1"" of type '" "set< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< set< unsigned int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UIntSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Size2D_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Size2D *arg1 = (vigra::Size2D *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size2D_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Size2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size2D_x_set" "', argument " "1"" of type '" "vigra::Size2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Size2D * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Size2D_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size2D_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Size2D *arg1 = (vigra::Size2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Size2D_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Size2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size2D_x_get" "', argument " "1"" of type '" "vigra::Size2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Size2D * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size2D_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Size2D *arg1 = (vigra::Size2D *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Size2D_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Size2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size2D_y_set" "', argument " "1"" of type '" "vigra::Size2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Size2D * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Size2D_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Size2D_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Size2D *arg1 = (vigra::Size2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Size2D_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Size2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size2D_y_get" "', argument " "1"" of type '" "vigra::Size2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Size2D * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Size2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vigra::Size2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Size2D",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Size2D" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Size2D" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (vigra::Size2D *)new vigra::Size2D(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vigra__Size2D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Size2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Size2D *arg1 = (vigra::Size2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Size2D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Size2D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Size2D" "', argument " "1"" of type '" "vigra::Size2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Size2D * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Size2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vigra__Size2D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Point2D_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Point2D *arg1 = (vigra::Point2D *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point2D_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Point2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2D_x_set" "', argument " "1"" of type '" "vigra::Point2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Point2D * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point2D_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point2D_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Point2D *arg1 = (vigra::Point2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point2D_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Point2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2D_x_get" "', argument " "1"" of type '" "vigra::Point2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Point2D * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point2D_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Point2D *arg1 = (vigra::Point2D *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point2D_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Point2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2D_y_set" "', argument " "1"" of type '" "vigra::Point2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Point2D * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point2D_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point2D_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Point2D *arg1 = (vigra::Point2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point2D_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Point2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2D_y_get" "', argument " "1"" of type '" "vigra::Point2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Point2D * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Point2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  vigra::Point2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Point2D",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point2D" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Point2D" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (vigra::Point2D *)new vigra::Point2D(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vigra__Point2D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Point2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vigra::Point2D *arg1 = (vigra::Point2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Point2D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vigra__Point2D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Point2D" "', argument " "1"" of type '" "vigra::Point2D *""'"); 
  }
  arg1 = reinterpret_cast< vigra::Point2D * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Point2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vigra__Point2D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FDiff2D_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hugin_utils::FDiff2D *arg1 = (hugin_utils::FDiff2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FDiff2D_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hugin_utils__FDiff2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FDiff2D_x_set" "', argument " "1"" of type '" "hugin_utils::FDiff2D *""'"); 
  }
  arg1 = reinterpret_cast< hugin_utils::FDiff2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FDiff2D_x_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FDiff2D_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hugin_utils::FDiff2D *arg1 = (hugin_utils::FDiff2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FDiff2D_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hugin_utils__FDiff2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FDiff2D_x_get" "', argument " "1"" of type '" "hugin_utils::FDiff2D *""'"); 
  }
  arg1 = reinterpret_cast< hugin_utils::FDiff2D * >(argp1);
  result = (double) ((arg1)->x);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FDiff2D_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hugin_utils::FDiff2D *arg1 = (hugin_utils::FDiff2D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FDiff2D_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hugin_utils__FDiff2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FDiff2D_y_set" "', argument " "1"" of type '" "hugin_utils::FDiff2D *""'"); 
  }
  arg1 = reinterpret_cast< hugin_utils::FDiff2D * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FDiff2D_y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FDiff2D_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hugin_utils::FDiff2D *arg1 = (hugin_utils::FDiff2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FDiff2D_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hugin_utils__FDiff2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FDiff2D_y_get" "', argument " "1"" of type '" "hugin_utils::FDiff2D *""'"); 
  }
  arg1 = reinterpret_cast< hugin_utils::FDiff2D * >(argp1);
  result = (double) ((arg1)->y);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FDiff2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  hugin_utils::FDiff2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FDiff2D",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FDiff2D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FDiff2D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (hugin_utils::FDiff2D *)new hugin_utils::FDiff2D(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hugin_utils__FDiff2D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FDiff2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hugin_utils::FDiff2D *arg1 = (hugin_utils::FDiff2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FDiff2D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hugin_utils__FDiff2D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FDiff2D" "', argument " "1"" of type '" "hugin_utils::FDiff2D *""'"); 
  }
  arg1 = reinterpret_cast< hugin_utils::FDiff2D * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FDiff2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hugin_utils__FDiff2D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tm_tm_sec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tm_tm_sec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_sec_set" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tm_tm_sec_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->tm_sec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_sec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tm_tm_sec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_sec_get" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  result = (int) ((arg1)->tm_sec);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tm_tm_min_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_min_set" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tm_tm_min_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->tm_min = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tm_tm_min_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_min_get" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  result = (int) ((arg1)->tm_min);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_hour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tm_tm_hour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_hour_set" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tm_tm_hour_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->tm_hour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_hour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tm_tm_hour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_hour_get" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  result = (int) ((arg1)->tm_hour);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_mday_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tm_tm_mday_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_mday_set" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tm_tm_mday_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->tm_mday = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_mday_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tm_tm_mday_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_mday_get" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  result = (int) ((arg1)->tm_mday);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_mon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tm_tm_mon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_mon_set" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tm_tm_mon_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->tm_mon = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_mon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tm_tm_mon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_mon_get" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  result = (int) ((arg1)->tm_mon);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_year_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tm_tm_year_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_year_set" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tm_tm_year_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->tm_year = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_year_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tm_tm_year_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_year_get" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  result = (int) ((arg1)->tm_year);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_wday_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tm_tm_wday_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_wday_set" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tm_tm_wday_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->tm_wday = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_wday_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tm_tm_wday_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_wday_get" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  result = (int) ((arg1)->tm_wday);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_yday_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tm_tm_yday_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_yday_set" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tm_tm_yday_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->tm_yday = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_yday_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tm_tm_yday_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_yday_get" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  result = (int) ((arg1)->tm_yday);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_isdst_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tm_tm_isdst_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_isdst_set" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tm_tm_isdst_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->tm_isdst = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tm_tm_isdst_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tm_tm_isdst_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tm_tm_isdst_get" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  result = (int) ((arg1)->tm_isdst);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_tm")) SWIG_fail;
  result = (tm *)new tm();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tm, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tm *arg1 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_tm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tm" "', argument " "1"" of type '" "tm *""'"); 
  }
  arg1 = reinterpret_cast< tm * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ImageVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_iterator" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_SrcPanoImage_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___nonzero__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = (bool)std_vector_Sl_SrcPanoImage_Sg____nonzero__((std::vector< SrcPanoImage > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___bool__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = (bool)std_vector_Sl_SrcPanoImage_Sg____bool__((std::vector< SrcPanoImage > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___len__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = std_vector_Sl_SrcPanoImage_Sg____len__((std::vector< SrcPanoImage > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_pop" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  try {
    result = std_vector_Sl_SrcPanoImage_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< SrcPanoImage >::value_type(static_cast< const std::vector< SrcPanoImage >::value_type& >(result))), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::difference_type arg2 ;
  std::vector< SrcPanoImage >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___getslice__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector___getslice__" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageVector___getslice__" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< SrcPanoImage >::difference_type >(val3);
  try {
    result = (std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > *)std_vector_Sl_SrcPanoImage_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::difference_type arg2 ;
  std::vector< SrcPanoImage >::difference_type arg3 ;
  std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ImageVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___setslice__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector___setslice__" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageVector___setslice__" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< SrcPanoImage >::difference_type >(val3);
  {
    std::vector<SrcPanoImage,std::allocator< SrcPanoImage > > *ptr = (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageVector___setslice__" "', argument " "4"" of type '" "std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector___setslice__" "', argument " "4"" of type '" "std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_SrcPanoImage_Sg____setslice__(arg1,arg2,arg3,(std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::difference_type arg2 ;
  std::vector< SrcPanoImage >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___delslice__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector___delslice__" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageVector___delslice__" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< SrcPanoImage >::difference_type >(val3);
  try {
    std_vector_Sl_SrcPanoImage_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___delitem__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector___delitem__" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::difference_type >(val2);
  try {
    std_vector_Sl_SrcPanoImage_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___getitem__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > *)std_vector_Sl_SrcPanoImage_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___setitem__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<SrcPanoImage,std::allocator< SrcPanoImage > > *ptr = (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageVector___setitem__" "', argument " "3"" of type '" "std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector___setitem__" "', argument " "3"" of type '" "std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_SrcPanoImage_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___delitem__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_SrcPanoImage_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ImageVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ImageVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImageVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< SrcPanoImage > *,std::vector< SrcPanoImage >::difference_type)\n"
    "    __delitem__(std::vector< SrcPanoImage > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< SrcPanoImage >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___getitem__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector___getitem__" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::difference_type >(val2);
  try {
    result = (std::vector< SrcPanoImage >::value_type *) &std_vector_Sl_SrcPanoImage_Sg____getitem____SWIG_1((std::vector< SrcPanoImage > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ImageVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ImageVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImageVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< SrcPanoImage > *,PySliceObject *)\n"
    "    __getitem__(std::vector< SrcPanoImage > const *,std::vector< SrcPanoImage >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::difference_type arg2 ;
  std::vector< SrcPanoImage >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector___setitem__" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector___setitem__" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageVector___setitem__" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector___setitem__" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< SrcPanoImage >::value_type * >(argp3);
  try {
    std_vector_Sl_SrcPanoImage_Sg____setitem____SWIG_1(arg1,arg2,(HuginBase::SrcPanoImage const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ImageVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ImageVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImageVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< SrcPanoImage > *,PySliceObject *,std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > const &)\n"
    "    __setitem__(std::vector< SrcPanoImage > *,std::vector< SrcPanoImage >::difference_type,std::vector< SrcPanoImage >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_append" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageVector_append" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector_append" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< SrcPanoImage >::value_type * >(argp2);
  std_vector_Sl_SrcPanoImage_Sg__append(arg1,(HuginBase::SrcPanoImage const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImageVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImageVector")) SWIG_fail;
  result = (std::vector< SrcPanoImage > *)new std::vector< SrcPanoImage >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImageVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ImageVector",&obj0)) SWIG_fail;
  {
    std::vector<SrcPanoImage,std::allocator< SrcPanoImage > > *ptr = (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ImageVector" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImageVector" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< SrcPanoImage > *)new std::vector< SrcPanoImage >((std::vector< SrcPanoImage > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_empty" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = (bool)((std::vector< SrcPanoImage > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_size" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = ((std::vector< SrcPanoImage > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_clear" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_swap" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageVector_swap" "', argument " "2"" of type '" "std::vector< SrcPanoImage > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector_swap" "', argument " "2"" of type '" "std::vector< SrcPanoImage > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< HuginBase::SrcPanoImage > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_get_allocator" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = ((std::vector< SrcPanoImage > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< SrcPanoImage >::allocator_type(static_cast< const std::vector< SrcPanoImage >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_begin" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = ((std::vector< SrcPanoImage > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< SrcPanoImage >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_end" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = ((std::vector< SrcPanoImage > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< SrcPanoImage >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_rbegin" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = ((std::vector< SrcPanoImage > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< SrcPanoImage >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_rend" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = ((std::vector< SrcPanoImage > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< SrcPanoImage >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImageVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ImageVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ImageVector" "', argument " "1"" of type '" "std::vector< SrcPanoImage >::size_type""'");
  } 
  arg1 = static_cast< std::vector< SrcPanoImage >::size_type >(val1);
  result = (std::vector< SrcPanoImage > *)new std::vector< SrcPanoImage >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_pop_back" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_resize" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector_resize" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::size_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< SrcPanoImage >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_erase" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_erase" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_erase" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< SrcPanoImage >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::iterator arg2 ;
  std::vector< SrcPanoImage >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< SrcPanoImage >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_erase" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_erase" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_erase" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_erase" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_erase" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< SrcPanoImage >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ImageVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ImageVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImageVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< SrcPanoImage > *,std::vector< SrcPanoImage >::iterator)\n"
    "    erase(std::vector< SrcPanoImage > *,std::vector< SrcPanoImage >::iterator,std::vector< SrcPanoImage >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImageVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage >::size_type arg1 ;
  std::vector< SrcPanoImage >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< SrcPanoImage > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ImageVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ImageVector" "', argument " "1"" of type '" "std::vector< SrcPanoImage >::size_type""'");
  } 
  arg1 = static_cast< std::vector< SrcPanoImage >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ImageVector" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImageVector" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< SrcPanoImage >::value_type * >(argp2);
  result = (std::vector< SrcPanoImage > *)new std::vector< SrcPanoImage >(arg1,(std::vector< SrcPanoImage >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImageVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ImageVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ImageVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ImageVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ImageVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ImageVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< SrcPanoImage >()\n"
    "    std::vector< SrcPanoImage >(std::vector< SrcPanoImage > const &)\n"
    "    std::vector< SrcPanoImage >(std::vector< SrcPanoImage >::size_type)\n"
    "    std::vector< SrcPanoImage >(std::vector< SrcPanoImage >::size_type,std::vector< SrcPanoImage >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_push_back" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageVector_push_back" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector_push_back" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< SrcPanoImage >::value_type * >(argp2);
  (arg1)->push_back((std::vector< SrcPanoImage >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_front" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = (std::vector< SrcPanoImage >::value_type *) &((std::vector< SrcPanoImage > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_back" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = (std::vector< SrcPanoImage >::value_type *) &((std::vector< SrcPanoImage > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::size_type arg2 ;
  std::vector< SrcPanoImage >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_assign" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector_assign" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::size_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageVector_assign" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector_assign" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< SrcPanoImage >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< SrcPanoImage >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::size_type arg2 ;
  std::vector< SrcPanoImage >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_resize" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector_resize" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::size_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageVector_resize" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector_resize" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< SrcPanoImage >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< SrcPanoImage >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ImageVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ImageVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImageVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< SrcPanoImage > *,std::vector< SrcPanoImage >::size_type)\n"
    "    resize(std::vector< SrcPanoImage > *,std::vector< SrcPanoImage >::size_type,std::vector< SrcPanoImage >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::iterator arg2 ;
  std::vector< SrcPanoImage >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< SrcPanoImage >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ImageVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_insert" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_insert" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_insert" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImageVector_insert" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector_insert" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< SrcPanoImage >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< SrcPanoImage >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< SrcPanoImage >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::iterator arg2 ;
  std::vector< SrcPanoImage >::size_type arg3 ;
  std::vector< SrcPanoImage >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ImageVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_insert" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_insert" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ImageVector_insert" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImageVector_insert" "', argument " "3"" of type '" "std::vector< SrcPanoImage >::size_type""'");
  } 
  arg3 = static_cast< std::vector< SrcPanoImage >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImageVector_insert" "', argument " "4"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageVector_insert" "', argument " "4"" of type '" "std::vector< SrcPanoImage >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< SrcPanoImage >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< SrcPanoImage >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ImageVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<SrcPanoImage,std::allocator< SrcPanoImage > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< SrcPanoImage >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ImageVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ImageVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< SrcPanoImage > *,std::vector< SrcPanoImage >::iterator,std::vector< SrcPanoImage >::value_type const &)\n"
    "    insert(std::vector< SrcPanoImage > *,std::vector< SrcPanoImage >::iterator,std::vector< SrcPanoImage >::size_type,std::vector< SrcPanoImage >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  std::vector< SrcPanoImage >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_reserve" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageVector_reserve" "', argument " "2"" of type '" "std::vector< SrcPanoImage >::size_type""'");
  } 
  arg2 = static_cast< std::vector< SrcPanoImage >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< SrcPanoImage >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageVector_capacity" "', argument " "1"" of type '" "std::vector< SrcPanoImage > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  result = ((std::vector< SrcPanoImage > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ImageVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< SrcPanoImage > *arg1 = (std::vector< SrcPanoImage > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImageVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImageVector" "', argument " "1"" of type '" "std::vector< SrcPanoImage > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< SrcPanoImage > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImageVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Lens(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Lens")) SWIG_fail;
  result = (HuginBase::Lens *)new HuginBase::Lens();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__Lens, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_getProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::Lens::LensProjectionFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lens_getProjection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_getProjection" "', argument " "1"" of type '" "HuginBase::Lens const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  result = (HuginBase::Lens::LensProjectionFormat)((HuginBase::Lens const *)arg1)->getProjection();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_setProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  HuginBase::Lens::LensProjectionFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Lens_setProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_setProjection" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lens_setProjection" "', argument " "2"" of type '" "HuginBase::Lens::LensProjectionFormat""'");
  } 
  arg2 = static_cast< HuginBase::Lens::LensProjectionFormat >(val2);
  (arg1)->setProjection(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_getHFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lens_getHFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_getHFOV" "', argument " "1"" of type '" "HuginBase::Lens const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  result = (double)((HuginBase::Lens const *)arg1)->getHFOV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_setHFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Lens_setHFOV",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_setHFOV" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lens_setHFOV" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setHFOV(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_getFocalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lens_getFocalLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_getFocalLength" "', argument " "1"" of type '" "HuginBase::Lens const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  result = (double)((HuginBase::Lens const *)arg1)->getFocalLength();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_getCropFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lens_getCropFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_getCropFactor" "', argument " "1"" of type '" "HuginBase::Lens const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  result = (double)((HuginBase::Lens const *)arg1)->getCropFactor();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_setCropFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Lens_setCropFactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_setCropFactor" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lens_setCropFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setCropFactor(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_getAspectRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lens_getAspectRatio",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_getAspectRatio" "', argument " "1"" of type '" "HuginBase::Lens const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  result = (double)((HuginBase::Lens const *)arg1)->getAspectRatio();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_isLandscape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lens_isLandscape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_isLandscape" "', argument " "1"" of type '" "HuginBase::Lens const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  result = (bool)((HuginBase::Lens const *)arg1)->isLandscape();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_setEV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Lens_setEV",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_setEV" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lens_setEV" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setEV(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_getImageSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< vigra::Size2D > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lens_getImageSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_getImageSize" "', argument " "1"" of type '" "HuginBase::Lens const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  result = ((HuginBase::Lens const *)arg1)->getImageSize();
  resultobj = SWIG_NewPointerObj((new vigra::Size2D(static_cast< const vigra::Size2D& >(result))), SWIGTYPE_p_vigra__Size2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_setImageSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  vigra::Size2D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Lens_setImageSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_setImageSize" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Size2D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lens_setImageSize" "', argument " "2"" of type '" "vigra::Size2D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lens_setImageSize" "', argument " "2"" of type '" "vigra::Size2D const &""'"); 
  }
  arg2 = reinterpret_cast< vigra::Size2D * >(argp2);
  (arg1)->setImageSize((vigra::Size2D const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  HuginBase::Lens *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Lens_update",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_update" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__Lens,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lens_update" "', argument " "2"" of type '" "HuginBase::Lens const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lens_update" "', argument " "2"" of type '" "HuginBase::Lens const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::Lens * >(argp2);
  (arg1)->update((HuginBase::Lens const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_variables_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  LensVarMap *arg2 = (LensVarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Lens_variables_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_variables_set" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lens_variables_set" "', argument " "2"" of type '" "LensVarMap *""'"); 
  }
  arg2 = reinterpret_cast< LensVarMap * >(argp2);
  if (arg1) (arg1)->variables = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_variables_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LensVarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lens_variables_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_variables_get" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  result = (LensVarMap *)& ((arg1)->variables);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Lens_variableNames_set(PyObject *_val) {
  SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""read-only HuginBase::Lens::variableNames""' of type '""char const *[]""'");
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Lens_variableNames_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(HuginBase::Lens::variableNames), SWIGTYPE_p_p_char,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Lens_variableNames_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Lens_variableNames_get();
}


SWIGINTERN PyObject *_wrap_Lens_variableNames_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Lens_variableNames_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_Lens_m_hasExif_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Lens_m_hasExif_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_m_hasExif_set" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lens_m_hasExif_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->m_hasExif = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lens_m_hasExif_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lens_m_hasExif_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lens_m_hasExif_get" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  result = (bool) ((arg1)->m_hasExif);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Lens(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Lens *arg1 = (HuginBase::Lens *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Lens",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Lens, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lens" "', argument " "1"" of type '" "HuginBase::Lens *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Lens * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lens_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__Lens, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BaseSrcPanoImage___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::BaseSrcPanoImage *arg1 = (HuginBase::BaseSrcPanoImage *) 0 ;
  HuginBase::BaseSrcPanoImage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseSrcPanoImage___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__BaseSrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseSrcPanoImage___eq__" "', argument " "1"" of type '" "HuginBase::BaseSrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::BaseSrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__BaseSrcPanoImage,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseSrcPanoImage___eq__" "', argument " "2"" of type '" "HuginBase::BaseSrcPanoImage const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseSrcPanoImage___eq__" "', argument " "2"" of type '" "HuginBase::BaseSrcPanoImage const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::BaseSrcPanoImage * >(argp2);
  result = (bool)((HuginBase::BaseSrcPanoImage const *)arg1)->operator ==((HuginBase::BaseSrcPanoImage const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BaseSrcPanoImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::BaseSrcPanoImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BaseSrcPanoImage")) SWIG_fail;
  result = (HuginBase::BaseSrcPanoImage *)new HuginBase::BaseSrcPanoImage();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__BaseSrcPanoImage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseSrcPanoImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::BaseSrcPanoImage *arg1 = (HuginBase::BaseSrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseSrcPanoImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__BaseSrcPanoImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseSrcPanoImage" "', argument " "1"" of type '" "HuginBase::BaseSrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::BaseSrcPanoImage * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseSrcPanoImage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__BaseSrcPanoImage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SrcPanoImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SrcPanoImage")) SWIG_fail;
  result = (HuginBase::SrcPanoImage *)new HuginBase::SrcPanoImage();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__SrcPanoImage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SrcPanoImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SrcPanoImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SrcPanoImage" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SrcPanoImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  HuginBase::SrcPanoImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SrcPanoImage",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SrcPanoImage" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SrcPanoImage" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (HuginBase::SrcPanoImage *)new HuginBase::SrcPanoImage((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__SrcPanoImage, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SrcPanoImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SrcPanoImage__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SrcPanoImage__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SrcPanoImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::SrcPanoImage()\n"
    "    HuginBase::SrcPanoImage(std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_hasEXIFread(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_hasEXIFread",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_hasEXIFread" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = (bool)((HuginBase::SrcPanoImage const *)arg1)->hasEXIFread();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  vigra::Size2D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_resize" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Size2D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_resize" "', argument " "2"" of type '" "vigra::Size2D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_resize" "', argument " "2"" of type '" "vigra::Size2D const &""'"); 
  }
  arg2 = reinterpret_cast< vigra::Size2D * >(argp2);
  (arg1)->resize((vigra::Size2D const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_isInside__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  SwigValueWrapper< vigra::Point2D > arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SrcPanoImage_isInside",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_isInside" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Point2D,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_isInside" "', argument " "2"" of type '" "vigra::Point2D""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_isInside" "', argument " "2"" of type '" "vigra::Point2D""'");
    } else {
      vigra::Point2D * temp = reinterpret_cast< vigra::Point2D * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SrcPanoImage_isInside" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)((HuginBase::SrcPanoImage const *)arg1)->isInside(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_isInside__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  SwigValueWrapper< vigra::Point2D > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_isInside",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_isInside" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Point2D,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_isInside" "', argument " "2"" of type '" "vigra::Point2D""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_isInside" "', argument " "2"" of type '" "vigra::Point2D""'");
    } else {
      vigra::Point2D * temp = reinterpret_cast< vigra::Point2D * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((HuginBase::SrcPanoImage const *)arg1)->isInside(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_isInside(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__SrcPanoImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vigra__Point2D, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SrcPanoImage_isInside__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__SrcPanoImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vigra__Point2D, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SrcPanoImage_isInside__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SrcPanoImage_isInside'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    isInside(HuginBase::SrcPanoImage const *,vigra::Point2D,bool)\n"
    "    isInside(HuginBase::SrcPanoImage const *,vigra::Point2D)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_horizontalWarpNeeded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_horizontalWarpNeeded",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_horizontalWarpNeeded" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = (bool)(arg1)->horizontalWarpNeeded();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getCorrectTCA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_getCorrectTCA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getCorrectTCA" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = (bool)((HuginBase::SrcPanoImage const *)arg1)->getCorrectTCA();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_setCropMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  HuginBase::BaseSrcPanoImage::CropMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_setCropMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_setCropMode" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SrcPanoImage_setCropMode" "', argument " "2"" of type '" "HuginBase::BaseSrcPanoImage::CropMode""'");
  } 
  arg2 = static_cast< HuginBase::BaseSrcPanoImage::CropMode >(val2);
  (arg1)->setCropMode(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_setSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  SwigValueWrapper< vigra::Size2D > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_setSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_setSize" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Size2D,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_setSize" "', argument " "2"" of type '" "vigra::Size2D""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_setSize" "', argument " "2"" of type '" "vigra::Size2D""'");
    } else {
      vigra::Size2D * temp = reinterpret_cast< vigra::Size2D * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getRadialDistortionCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< hugin_utils::FDiff2D > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_getRadialDistortionCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getRadialDistortionCenter" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = ((HuginBase::SrcPanoImage const *)arg1)->getRadialDistortionCenter();
  resultobj = SWIG_NewPointerObj((new hugin_utils::FDiff2D(static_cast< const hugin_utils::FDiff2D& >(result))), SWIGTYPE_p_hugin_utils__FDiff2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getRadialVigCorrCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< hugin_utils::FDiff2D > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_getRadialVigCorrCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getRadialVigCorrCenter" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = ((HuginBase::SrcPanoImage const *)arg1)->getRadialVigCorrCenter();
  resultobj = SWIG_NewPointerObj((new hugin_utils::FDiff2D(static_cast< const hugin_utils::FDiff2D& >(result))), SWIGTYPE_p_hugin_utils__FDiff2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getExposure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_getExposure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getExposure" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = (double)((HuginBase::SrcPanoImage const *)arg1)->getExposure();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_setExposure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_setExposure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_setExposure" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SrcPanoImage_setExposure" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  (arg1)->setExposure((double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_getWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getWidth" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = (int)((HuginBase::SrcPanoImage const *)arg1)->getWidth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_getHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getHeight" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = (int)((HuginBase::SrcPanoImage const *)arg1)->getHeight();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_getVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getVar" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_getVar" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_getVar" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)((HuginBase::SrcPanoImage const *)arg1)->getVar((std::string const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_setVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SrcPanoImage_setVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_setVar" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_setVar" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_setVar" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SrcPanoImage_setVar" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->setVar((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getVariableMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_getVariableMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getVariableMap" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = ((HuginBase::SrcPanoImage const *)arg1)->getVariableMap();
  resultobj = SWIG_NewPointerObj((new VariableMap(static_cast< const VariableMap& >(result))), SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ImageOptions result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_getOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getOptions" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = ((HuginBase::SrcPanoImage const *)arg1)->getOptions();
  resultobj = SWIG_NewPointerObj((new ImageOptions(static_cast< const ImageOptions& >(result))), SWIGTYPE_p_ImageOptions, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_setOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  ImageOptions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_setOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_setOptions" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ImageOptions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_setOptions" "', argument " "2"" of type '" "ImageOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_setOptions" "', argument " "2"" of type '" "ImageOptions const &""'"); 
  }
  arg2 = reinterpret_cast< ImageOptions * >(argp2);
  (arg1)->setOptions((ImageOptions const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_getExifDateTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  tm *arg2 = (tm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_getExifDateTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_getExifDateTime" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_tm, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_getExifDateTime" "', argument " "2"" of type '" "tm *""'"); 
  }
  arg2 = reinterpret_cast< tm * >(argp2);
  result = (int)((HuginBase::SrcPanoImage const *)arg1)->getExifDateTime(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_unlinkRadialVigCorrCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_unlinkRadialVigCorrCoeff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_unlinkRadialVigCorrCoeff" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  (arg1)->unlinkRadialVigCorrCoeff();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_unlinkRadialVigCorrCenterShift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_unlinkRadialVigCorrCenterShift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_unlinkRadialVigCorrCenterShift" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  (arg1)->unlinkRadialVigCorrCenterShift();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_unlinkEMoRParams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_unlinkEMoRParams",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_unlinkEMoRParams" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  (arg1)->unlinkEMoRParams();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_linkRadialVigCorrCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  HuginBase::SrcPanoImage *arg2 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_linkRadialVigCorrCoeff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_linkRadialVigCorrCoeff" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_linkRadialVigCorrCoeff" "', argument " "2"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp2);
  (arg1)->linkRadialVigCorrCoeff(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_linkRadialVigCorrCenterShift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  HuginBase::SrcPanoImage *arg2 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_linkRadialVigCorrCenterShift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_linkRadialVigCorrCenterShift" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_linkRadialVigCorrCenterShift" "', argument " "2"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp2);
  (arg1)->linkRadialVigCorrCenterShift(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_linkEMoRParams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  HuginBase::SrcPanoImage *arg2 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_linkEMoRParams",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_linkEMoRParams" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_linkEMoRParams" "', argument " "2"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp2);
  (arg1)->linkEMoRParams(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_linkStack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  HuginBase::SrcPanoImage *arg2 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_linkStack",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_linkStack" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_linkStack" "', argument " "2"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp2);
  (arg1)->linkStack(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_readEXIF__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SrcPanoImage_readEXIF",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_readEXIF" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_readEXIF" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_readEXIF" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SrcPanoImage_readEXIF" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_readEXIF" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SrcPanoImage_readEXIF" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SrcPanoImage_readEXIF" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)(arg1)->readEXIF(*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_readEXIF__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:SrcPanoImage_readEXIF",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_readEXIF" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_readEXIF" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_readEXIF" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SrcPanoImage_readEXIF" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_readEXIF" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SrcPanoImage_readEXIF" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_readEXIF" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SrcPanoImage_readEXIF" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SrcPanoImage_readEXIF" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (bool)(arg1)->readEXIF(*arg2,*arg3,*arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_readEXIF(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__SrcPanoImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_SrcPanoImage_readEXIF__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__SrcPanoImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_SrcPanoImage_readEXIF__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SrcPanoImage_readEXIF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    readEXIF(HuginBase::SrcPanoImage *,double &,double &,bool,bool)\n"
    "    readEXIF(HuginBase::SrcPanoImage *,double &,double &,double &,bool,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_calcHFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage::Projection arg1 ;
  double arg2 ;
  double arg3 ;
  SwigValueWrapper< vigra::Size2D > arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SrcPanoImage_calcHFOV",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SrcPanoImage_calcHFOV" "', argument " "1"" of type '" "HuginBase::SrcPanoImage::Projection""'");
  } 
  arg1 = static_cast< HuginBase::SrcPanoImage::Projection >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SrcPanoImage_calcHFOV" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SrcPanoImage_calcHFOV" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vigra__Size2D,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SrcPanoImage_calcHFOV" "', argument " "4"" of type '" "vigra::Size2D""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_calcHFOV" "', argument " "4"" of type '" "vigra::Size2D""'");
    } else {
      vigra::Size2D * temp = reinterpret_cast< vigra::Size2D * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (double)HuginBase::SrcPanoImage::calcHFOV(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_calcFocalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage::Projection arg1 ;
  double arg2 ;
  double arg3 ;
  SwigValueWrapper< vigra::Size2D > arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SrcPanoImage_calcFocalLength",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SrcPanoImage_calcFocalLength" "', argument " "1"" of type '" "HuginBase::SrcPanoImage::Projection""'");
  } 
  arg1 = static_cast< HuginBase::SrcPanoImage::Projection >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SrcPanoImage_calcFocalLength" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SrcPanoImage_calcFocalLength" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vigra__Size2D,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SrcPanoImage_calcFocalLength" "', argument " "4"" of type '" "vigra::Size2D""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_calcFocalLength" "', argument " "4"" of type '" "vigra::Size2D""'");
    } else {
      vigra::Size2D * temp = reinterpret_cast< vigra::Size2D * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (double)HuginBase::SrcPanoImage::calcFocalLength(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_calcCropFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage::Projection arg1 ;
  double arg2 ;
  double arg3 ;
  SwigValueWrapper< vigra::Size2D > arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SrcPanoImage_calcCropFactor",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SrcPanoImage_calcCropFactor" "', argument " "1"" of type '" "HuginBase::SrcPanoImage::Projection""'");
  } 
  arg1 = static_cast< HuginBase::SrcPanoImage::Projection >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SrcPanoImage_calcCropFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SrcPanoImage_calcCropFactor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_vigra__Size2D,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SrcPanoImage_calcCropFactor" "', argument " "4"" of type '" "vigra::Size2D""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_calcCropFactor" "', argument " "4"" of type '" "vigra::Size2D""'");
    } else {
      vigra::Size2D * temp = reinterpret_cast< vigra::Size2D * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (double)HuginBase::SrcPanoImage::calcCropFactor(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_updateFocalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_updateFocalLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_updateFocalLength" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SrcPanoImage_updateFocalLength" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->updateFocalLength(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_updateCropFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SrcPanoImage_updateCropFactor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_updateCropFactor" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SrcPanoImage_updateCropFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SrcPanoImage_updateCropFactor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->updateCropFactor(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_hasMasks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_hasMasks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_hasMasks" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = (bool)((HuginBase::SrcPanoImage const *)arg1)->hasMasks();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_hasPositiveMasks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_hasPositiveMasks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_hasPositiveMasks" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = (bool)((HuginBase::SrcPanoImage const *)arg1)->hasPositiveMasks();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_hasActiveMasks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_hasActiveMasks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_hasActiveMasks" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  result = (bool)((HuginBase::SrcPanoImage const *)arg1)->hasActiveMasks();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_addMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  MaskPolygon arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_addMask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_addMask" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_MaskPolygon,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_addMask" "', argument " "2"" of type '" "MaskPolygon""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_addMask" "', argument " "2"" of type '" "MaskPolygon""'");
    } else {
      MaskPolygon * temp = reinterpret_cast< MaskPolygon * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->addMask(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_addActiveMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  MaskPolygon arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_addActiveMask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_addActiveMask" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_MaskPolygon,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_addActiveMask" "', argument " "2"" of type '" "MaskPolygon""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_addActiveMask" "', argument " "2"" of type '" "MaskPolygon""'");
    } else {
      MaskPolygon * temp = reinterpret_cast< MaskPolygon * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->addActiveMask(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_clearActiveMasks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SrcPanoImage_clearActiveMasks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_clearActiveMasks" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  (arg1)->clearActiveMasks();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_changeMaskType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  unsigned int arg2 ;
  HuginBase::MaskPolygon::MaskType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SrcPanoImage_changeMaskType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_changeMaskType" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SrcPanoImage_changeMaskType" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__MaskPolygon__MaskType,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SrcPanoImage_changeMaskType" "', argument " "3"" of type '" "HuginBase::MaskPolygon::MaskType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_changeMaskType" "', argument " "3"" of type '" "HuginBase::MaskPolygon::MaskType""'");
    } else {
      HuginBase::MaskPolygon::MaskType * temp = reinterpret_cast< HuginBase::MaskPolygon::MaskType * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->changeMaskType(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_deleteMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_deleteMask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_deleteMask" "', argument " "1"" of type '" "HuginBase::SrcPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SrcPanoImage_deleteMask" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->deleteMask(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_printMaskLines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  std::ostream *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SrcPanoImage_printMaskLines",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_printMaskLines" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_printMaskLines" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_printMaskLines" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SrcPanoImage_printMaskLines" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ((HuginBase::SrcPanoImage const *)arg1)->printMaskLines(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SrcPanoImage_isInsideMasks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = (HuginBase::SrcPanoImage *) 0 ;
  SwigValueWrapper< vigra::Point2D > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SrcPanoImage_isInsideMasks",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SrcPanoImage_isInsideMasks" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Point2D,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SrcPanoImage_isInsideMasks" "', argument " "2"" of type '" "vigra::Point2D""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SrcPanoImage_isInsideMasks" "', argument " "2"" of type '" "vigra::Point2D""'");
    } else {
      vigra::Point2D * temp = reinterpret_cast< vigra::Point2D * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)((HuginBase::SrcPanoImage const *)arg1)->isInsideMasks(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SrcPanoImage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__SrcPanoImage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VariableMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,Variable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VariableMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableMap" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VariableMap" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::map< std::string,Variable > *)new std::map< std::string,Variable >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_iterator" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_Variable_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap___nonzero__" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_Variable_Sg____nonzero__((std::map< std::string,Variable > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap___bool__" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_Variable_Sg____bool__((std::map< std::string,Variable > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,Variable >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap___len__" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = std_map_Sl_std_string_Sc_Variable_Sg____len__((std::map< std::string,Variable > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,Variable >::mapped_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap___getitem__" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap___getitem__" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap___getitem__" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = std_map_Sl_std_string_Sc_Variable_Sg____getitem__((std::map< std::string,Variable > const *)arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::map< std::string,Variable >::mapped_type(static_cast< const std::map< std::string,Variable >::mapped_type& >(result))), SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap___delitem__" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap___delitem__" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap___delitem__" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_Variable_Sg____delitem__(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap_has_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_has_key" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap_has_key" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap_has_key" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_Variable_Sg__has_key((std::map< std::string,Variable > const *)arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_keys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_keys" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_Variable_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_values",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_values" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_Variable_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_items",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_items" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_Variable_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap___contains__" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap___contains__" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap___contains__" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_Variable_Sg____contains__(arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_key_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_key_iterator" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_Variable_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_value_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_value_iterator" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_Variable_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  std::map< std::string,Variable >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMap___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap___setitem__" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap___setitem__" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap___setitem__" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableMap___setitem__" "', argument " "3"" of type '" "std::map< std::string,Variable >::mapped_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap___setitem__" "', argument " "3"" of type '" "std::map< std::string,Variable >::mapped_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::map< std::string,Variable >::mapped_type * >(argp3);
  try {
    std_map_Sl_std_string_Sc_Variable_Sg____setitem__(arg1,(std::string const &)*arg2,(HuginBase::Variable const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VariableMap")) SWIG_fail;
  result = (std::map< std::string,Variable > *)new std::map< std::string,Variable >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::map< std::string,Variable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VariableMap",&obj0)) SWIG_fail;
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableMap" "', argument " "1"" of type '" "std::map< std::string,Variable > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VariableMap" "', argument " "1"" of type '" "std::map< std::string,Variable > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< std::string,Variable > *)new std::map< std::string,Variable >((std::map< std::string,Variable > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VariableMap__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VariableMap__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VariableMap__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VariableMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,Variable >(std::less< std::string > const &)\n"
    "    std::map< std::string,Variable >()\n"
    "    std::map< std::string,Variable >(std::map< std::string,Variable > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_empty" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = (bool)((std::map< std::string,Variable > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,Variable >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_size" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = ((std::map< std::string,Variable > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_clear" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_swap" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap_swap" "', argument " "2"" of type '" "std::map< std::string,Variable > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap_swap" "', argument " "2"" of type '" "std::map< std::string,Variable > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,Variable > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,HuginBase::Variable > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_get_allocator" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = ((std::map< std::string,Variable > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< std::string,Variable >::allocator_type(static_cast< const std::map< std::string,Variable >::allocator_type& >(result))), SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,Variable >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_begin" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = ((std::map< std::string,Variable > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,Variable >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,Variable >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_end" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = ((std::map< std::string,Variable > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,Variable >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,Variable >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_rbegin" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = ((std::map< std::string,Variable > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,Variable >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,Variable >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMap_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_rend" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  result = ((std::map< std::string,Variable > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,Variable >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,Variable >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_erase" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap_erase" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap_erase" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::map< std::string,Variable >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,Variable >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_count" "', argument " "1"" of type '" "std::map< std::string,Variable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap_count" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap_count" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::map< std::string,Variable > const *)arg1)->count((std::map< std::string,Variable >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_erase" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMap_erase" "', argument " "2"" of type '" "std::map< std::string,Variable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,Variable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,Variable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMap_erase" "', argument " "2"" of type '" "std::map< std::string,Variable >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::iterator arg2 ;
  std::map< std::string,Variable >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMap_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_erase" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMap_erase" "', argument " "2"" of type '" "std::map< std::string,Variable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,Variable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,Variable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMap_erase" "', argument " "2"" of type '" "std::map< std::string,Variable >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMap_erase" "', argument " "3"" of type '" "std::map< std::string,Variable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,Variable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,Variable >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMap_erase" "', argument " "3"" of type '" "std::map< std::string,Variable >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,Variable >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VariableMap_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VariableMap_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,Variable >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,Variable >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VariableMap_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VariableMap_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::map< std::string,Variable > *,std::map< std::string,Variable >::key_type const &)\n"
    "    erase(std::map< std::string,Variable > *,std::map< std::string,Variable >::iterator)\n"
    "    erase(std::map< std::string,Variable > *,std::map< std::string,Variable >::iterator,std::map< std::string,Variable >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,Variable >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_find" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap_find" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap_find" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::map< std::string,Variable >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,Variable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,Variable >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_lower_bound" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap_lower_bound" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap_lower_bound" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::map< std::string,Variable >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,Variable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMap_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  std::map< std::string,Variable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,Variable >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMap_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMap_upper_bound" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMap_upper_bound" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMap_upper_bound" "', argument " "2"" of type '" "std::map< std::string,Variable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::map< std::string,Variable >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,Variable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VariableMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,Variable > *arg1 = (std::map< std::string,Variable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VariableMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VariableMap" "', argument " "1"" of type '" "std::map< std::string,Variable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,Variable > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VariableMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VariableMapVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_iterator" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = (bool)std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____nonzero__((std::vector< std::map< std::string,Variable > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___bool__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = (bool)std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____bool__((std::vector< std::map< std::string,Variable > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___len__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____len__((std::vector< std::map< std::string,Variable > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_pop" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  try {
    result = std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::difference_type arg2 ;
  std::vector< std::map< std::string,Variable > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMapVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___getslice__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector___getslice__" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableMapVector___getslice__" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::map< std::string,Variable > >::difference_type >(val3);
  try {
    result = (std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > *)std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::difference_type arg2 ;
  std::vector< std::map< std::string,Variable > >::difference_type arg3 ;
  std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VariableMapVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___setslice__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector___setslice__" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableMapVector___setslice__" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::map< std::string,Variable > >::difference_type >(val3);
  {
    std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *ptr = (std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VariableMapVector___setslice__" "', argument " "4"" of type '" "std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector___setslice__" "', argument " "4"" of type '" "std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::difference_type arg2 ;
  std::vector< std::map< std::string,Variable > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMapVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___delslice__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector___delslice__" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableMapVector___delslice__" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::map< std::string,Variable > >::difference_type >(val3);
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___delitem__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector___delitem__" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::difference_type >(val2);
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___getitem__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > *)std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMapVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___setitem__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *ptr = (std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableMapVector___setitem__" "', argument " "3"" of type '" "std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector___setitem__" "', argument " "3"" of type '" "std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___delitem__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VariableMapVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VariableMapVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VariableMapVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::map< std::string,Variable > > *,std::vector< std::map< std::string,Variable > >::difference_type)\n"
    "    __delitem__(std::vector< std::map< std::string,Variable > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::map< std::string,Variable > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___getitem__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector___getitem__" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::difference_type >(val2);
  try {
    result = (std::vector< std::map< std::string,Variable > >::value_type *) &std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____getitem____SWIG_1((std::vector< std::map< std::string,Variable > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VariableMapVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VariableMapVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VariableMapVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::map< std::string,Variable > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::map< std::string,Variable > > const *,std::vector< std::map< std::string,Variable > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::difference_type arg2 ;
  std::vector< std::map< std::string,Variable > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMapVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector___setitem__" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector___setitem__" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::difference_type >(val2);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableMapVector___setitem__" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector___setitem__" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VariableMapVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VariableMapVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VariableMapVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::map< std::string,Variable > > *,PySliceObject *,std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > const &)\n"
    "    __setitem__(std::vector< std::map< std::string,Variable > > *,std::vector< std::map< std::string,Variable > >::difference_type,std::vector< std::map< std::string,Variable > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_append" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMapVector_append" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector_append" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_map_Sl_std_string_Sc_Variable_Sg__Sg__append(arg1,(std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableMapVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VariableMapVector")) SWIG_fail;
  result = (std::vector< std::map< std::string,Variable > > *)new std::vector< std::map< std::string,Variable > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableMapVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VariableMapVector",&obj0)) SWIG_fail;
  {
    std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *ptr = (std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableMapVector" "', argument " "1"" of type '" "std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VariableMapVector" "', argument " "1"" of type '" "std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::map< std::string,Variable > > *)new std::vector< std::map< std::string,Variable > >((std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_empty" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = (bool)((std::vector< std::map< std::string,Variable > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_size" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = ((std::vector< std::map< std::string,Variable > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_clear" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_swap" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMapVector_swap" "', argument " "2"" of type '" "std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector_swap" "', argument " "2"" of type '" "std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = ((std::vector< std::map< std::string,Variable > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::map< std::string,Variable > >::allocator_type(static_cast< const std::vector< std::map< std::string,Variable > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_begin" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = ((std::vector< std::map< std::string,Variable > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::map< std::string,Variable > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_end" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = ((std::vector< std::map< std::string,Variable > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::map< std::string,Variable > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_rbegin" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = ((std::vector< std::map< std::string,Variable > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::map< std::string,Variable > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_rend" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = ((std::vector< std::map< std::string,Variable > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::map< std::string,Variable > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableMapVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VariableMapVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VariableMapVector" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::map< std::string,Variable > >::size_type >(val1);
  result = (std::vector< std::map< std::string,Variable > > *)new std::vector< std::map< std::string,Variable > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_pop_back" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_resize" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector_resize" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::map< std::string,Variable > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_erase" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_erase" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_erase" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::map< std::string,Variable > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::iterator arg2 ;
  std::vector< std::map< std::string,Variable > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::map< std::string,Variable > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMapVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_erase" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_erase" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_erase" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_erase" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_erase" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::map< std::string,Variable > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VariableMapVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VariableMapVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VariableMapVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::map< std::string,Variable > > *,std::vector< std::map< std::string,Variable > >::iterator)\n"
    "    erase(std::vector< std::map< std::string,Variable > > *,std::vector< std::map< std::string,Variable > >::iterator,std::vector< std::map< std::string,Variable > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableMapVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > >::size_type arg1 ;
  std::vector< std::map< std::string,Variable > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::map< std::string,Variable > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VariableMapVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VariableMapVector" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::map< std::string,Variable > >::size_type >(val1);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VariableMapVector" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VariableMapVector" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::map< std::string,Variable > > *)new std::vector< std::map< std::string,Variable > >(arg1,(std::vector< std::map< std::string,Variable > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableMapVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VariableMapVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VariableMapVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VariableMapVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VariableMapVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VariableMapVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::map< std::string,Variable > >()\n"
    "    std::vector< std::map< std::string,Variable > >(std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > const &)\n"
    "    std::vector< std::map< std::string,Variable > >(std::vector< std::map< std::string,Variable > >::size_type)\n"
    "    std::vector< std::map< std::string,Variable > >(std::vector< std::map< std::string,Variable > >::size_type,std::vector< std::map< std::string,Variable > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_push_back" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableMapVector_push_back" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector_push_back" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::map< std::string,Variable > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_front" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = (std::vector< std::map< std::string,Variable > >::value_type *) &((std::vector< std::map< std::string,Variable > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_back" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = (std::vector< std::map< std::string,Variable > >::value_type *) &((std::vector< std::map< std::string,Variable > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::size_type arg2 ;
  std::vector< std::map< std::string,Variable > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMapVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_assign" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector_assign" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::size_type >(val2);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableMapVector_assign" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector_assign" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::map< std::string,Variable > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::size_type arg2 ;
  std::vector< std::map< std::string,Variable > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMapVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_resize" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector_resize" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::size_type >(val2);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableMapVector_resize" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector_resize" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::map< std::string,Variable > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VariableMapVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VariableMapVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VariableMapVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::map< std::string,Variable > > *,std::vector< std::map< std::string,Variable > >::size_type)\n"
    "    resize(std::vector< std::map< std::string,Variable > > *,std::vector< std::map< std::string,Variable > >::size_type,std::vector< std::map< std::string,Variable > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::iterator arg2 ;
  std::vector< std::map< std::string,Variable > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::map< std::string,Variable > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VariableMapVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_insert" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_insert" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_insert" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
    }
  }
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableMapVector_insert" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector_insert" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::map< std::string,Variable > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::map< std::string,Variable > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::iterator arg2 ;
  std::vector< std::map< std::string,Variable > >::size_type arg3 ;
  std::vector< std::map< std::string,Variable > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VariableMapVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_insert" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_insert" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VariableMapVector_insert" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableMapVector_insert" "', argument " "3"" of type '" "std::vector< std::map< std::string,Variable > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::map< std::string,Variable > >::size_type >(val3);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VariableMapVector_insert" "', argument " "4"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableMapVector_insert" "', argument " "4"" of type '" "std::vector< std::map< std::string,Variable > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::map< std::string,Variable > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VariableMapVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::map< std::string,Variable > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VariableMapVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VariableMapVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::map< std::string,Variable > > *,std::vector< std::map< std::string,Variable > >::iterator,std::vector< std::map< std::string,Variable > >::value_type const &)\n"
    "    insert(std::vector< std::map< std::string,Variable > > *,std::vector< std::map< std::string,Variable > >::iterator,std::vector< std::map< std::string,Variable > >::size_type,std::vector< std::map< std::string,Variable > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  std::vector< std::map< std::string,Variable > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VariableMapVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_reserve" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableMapVector_reserve" "', argument " "2"" of type '" "std::vector< std::map< std::string,Variable > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::map< std::string,Variable > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableMapVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::map< std::string,Variable > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariableMapVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableMapVector_capacity" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  result = ((std::vector< std::map< std::string,Variable > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VariableMapVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::map< std::string,Variable > > *arg1 = (std::vector< std::map< std::string,Variable > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VariableMapVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VariableMapVector" "', argument " "1"" of type '" "std::vector< std::map< std::string,Variable > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::map< std::string,Variable > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VariableMapVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LensVarMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,LensVariable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LensVarMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LensVarMap" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LensVarMap" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::map< std::string,LensVariable > *)new std::map< std::string,LensVariable >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_iterator" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_LensVariable_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap___nonzero__" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_LensVariable_Sg____nonzero__((std::map< std::string,LensVariable > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap___bool__" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_LensVariable_Sg____bool__((std::map< std::string,LensVariable > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,LensVariable >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap___len__" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = std_map_Sl_std_string_Sc_LensVariable_Sg____len__((std::map< std::string,LensVariable > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,LensVariable >::mapped_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap___getitem__" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap___getitem__" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap___getitem__" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = std_map_Sl_std_string_Sc_LensVariable_Sg____getitem__((std::map< std::string,LensVariable > const *)arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::map< std::string,LensVariable >::mapped_type(static_cast< const std::map< std::string,LensVariable >::mapped_type& >(result))), SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap___delitem__" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap___delitem__" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap___delitem__" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_LensVariable_Sg____delitem__(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap_has_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_has_key" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap_has_key" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap_has_key" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_LensVariable_Sg__has_key((std::map< std::string,LensVariable > const *)arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_keys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_keys" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_LensVariable_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_values",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_values" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_LensVariable_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_items",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_items" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_LensVariable_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap___contains__" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap___contains__" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap___contains__" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_LensVariable_Sg____contains__(arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_key_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_key_iterator" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_LensVariable_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_value_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_value_iterator" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_LensVariable_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  std::map< std::string,LensVariable >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LensVarMap___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap___setitem__" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap___setitem__" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap___setitem__" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LensVarMap___setitem__" "', argument " "3"" of type '" "std::map< std::string,LensVariable >::mapped_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap___setitem__" "', argument " "3"" of type '" "std::map< std::string,LensVariable >::mapped_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::map< std::string,LensVariable >::mapped_type * >(argp3);
  try {
    std_map_Sl_std_string_Sc_LensVariable_Sg____setitem__(arg1,(std::string const &)*arg2,(HuginBase::LensVariable const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LensVarMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LensVarMap")) SWIG_fail;
  result = (std::map< std::string,LensVariable > *)new std::map< std::string,LensVariable >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LensVarMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::map< std::string,LensVariable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LensVarMap",&obj0)) SWIG_fail;
  {
    std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > > *ptr = (std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LensVarMap" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LensVarMap" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< std::string,LensVariable > *)new std::map< std::string,LensVariable >((std::map< std::string,LensVariable > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LensVarMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LensVarMap__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LensVarMap__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LensVarMap__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LensVarMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,LensVariable >(std::less< std::string > const &)\n"
    "    std::map< std::string,LensVariable >()\n"
    "    std::map< std::string,LensVariable >(std::map< std::string,LensVariable > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_empty" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = (bool)((std::map< std::string,LensVariable > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,LensVariable >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_size" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = ((std::map< std::string,LensVariable > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_clear" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_swap" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap_swap" "', argument " "2"" of type '" "std::map< std::string,LensVariable > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap_swap" "', argument " "2"" of type '" "std::map< std::string,LensVariable > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,HuginBase::LensVariable > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_get_allocator" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = ((std::map< std::string,LensVariable > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< std::string,LensVariable >::allocator_type(static_cast< const std::map< std::string,LensVariable >::allocator_type& >(result))), SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,LensVariable >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_begin" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = ((std::map< std::string,LensVariable > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,LensVariable >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,LensVariable >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_end" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = ((std::map< std::string,LensVariable > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,LensVariable >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,LensVariable >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_rbegin" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = ((std::map< std::string,LensVariable > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,LensVariable >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,LensVariable >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVarMap_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_rend" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  result = ((std::map< std::string,LensVariable > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,LensVariable >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,LensVariable >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_erase" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap_erase" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap_erase" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::map< std::string,LensVariable >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,LensVariable >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_count" "', argument " "1"" of type '" "std::map< std::string,LensVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap_count" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap_count" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::map< std::string,LensVariable > const *)arg1)->count((std::map< std::string,LensVariable >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_erase" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LensVarMap_erase" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,LensVariable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,LensVariable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LensVarMap_erase" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::iterator arg2 ;
  std::map< std::string,LensVariable >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LensVarMap_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_erase" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LensVarMap_erase" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,LensVariable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,LensVariable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LensVarMap_erase" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LensVarMap_erase" "', argument " "3"" of type '" "std::map< std::string,LensVariable >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,LensVariable >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,LensVariable >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LensVarMap_erase" "', argument " "3"" of type '" "std::map< std::string,LensVariable >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,LensVariable >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_LensVarMap_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LensVarMap_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,LensVariable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,LensVariable >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,LensVariable >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_LensVarMap_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LensVarMap_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::map< std::string,LensVariable > *,std::map< std::string,LensVariable >::key_type const &)\n"
    "    erase(std::map< std::string,LensVariable > *,std::map< std::string,LensVariable >::iterator)\n"
    "    erase(std::map< std::string,LensVariable > *,std::map< std::string,LensVariable >::iterator,std::map< std::string,LensVariable >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,LensVariable >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_find" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap_find" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap_find" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::map< std::string,LensVariable >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,LensVariable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,LensVariable >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_lower_bound" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap_lower_bound" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap_lower_bound" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::map< std::string,LensVariable >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,LensVariable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVarMap_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  std::map< std::string,LensVariable >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,LensVariable >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVarMap_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVarMap_upper_bound" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVarMap_upper_bound" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVarMap_upper_bound" "', argument " "2"" of type '" "std::map< std::string,LensVariable >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::map< std::string,LensVariable >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,LensVariable >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LensVarMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,LensVariable > *arg1 = (std::map< std::string,LensVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LensVarMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LensVarMap" "', argument " "1"" of type '" "std::map< std::string,LensVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,LensVariable > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LensVarMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_OptimizeVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_iterator" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_set_Sl_std_string_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = (bool)std_vector_Sl_std_set_Sl_std_string_Sg__Sg____nonzero__((std::vector< std::set< std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___bool__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = (bool)std_vector_Sl_std_set_Sl_std_string_Sg__Sg____bool__((std::vector< std::set< std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___len__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = std_vector_Sl_std_set_Sl_std_string_Sg__Sg____len__((std::vector< std::set< std::string > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_pop" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  try {
    result = std_vector_Sl_std_set_Sl_std_string_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< std::set< std::string > >::value_type(static_cast< const std::vector< std::set< std::string > >::value_type& >(result))), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::difference_type arg2 ;
  std::vector< std::set< std::string > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OptimizeVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___getslice__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector___getslice__" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptimizeVector___getslice__" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::set< std::string > >::difference_type >(val3);
  try {
    result = (std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)std_vector_Sl_std_set_Sl_std_string_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::difference_type arg2 ;
  std::vector< std::set< std::string > >::difference_type arg3 ;
  std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:OptimizeVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___setslice__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector___setslice__" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptimizeVector___setslice__" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::set< std::string > >::difference_type >(val3);
  {
    std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *ptr = (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "OptimizeVector___setslice__" "', argument " "4"" of type '" "std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector___setslice__" "', argument " "4"" of type '" "std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_set_Sl_std_string_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::difference_type arg2 ;
  std::vector< std::set< std::string > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OptimizeVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___delslice__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector___delslice__" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptimizeVector___delslice__" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::set< std::string > >::difference_type >(val3);
  try {
    std_vector_Sl_std_set_Sl_std_string_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___delitem__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector___delitem__" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::difference_type >(val2);
  try {
    std_vector_Sl_std_set_Sl_std_string_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___getitem__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)std_vector_Sl_std_set_Sl_std_string_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OptimizeVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___setitem__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *ptr = (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OptimizeVector___setitem__" "', argument " "3"" of type '" "std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector___setitem__" "', argument " "3"" of type '" "std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_set_Sl_std_string_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___delitem__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_set_Sl_std_string_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_OptimizeVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OptimizeVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OptimizeVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::set< std::string > > *,std::vector< std::set< std::string > >::difference_type)\n"
    "    __delitem__(std::vector< std::set< std::string > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::set< std::string > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___getitem__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector___getitem__" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::difference_type >(val2);
  try {
    result = (std::vector< std::set< std::string > >::value_type *) &std_vector_Sl_std_set_Sl_std_string_Sg__Sg____getitem____SWIG_1((std::vector< std::set< std::string > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_OptimizeVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OptimizeVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OptimizeVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::set< std::string > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::set< std::string > > const *,std::vector< std::set< std::string > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::difference_type arg2 ;
  std::vector< std::set< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OptimizeVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector___setitem__" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector___setitem__" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OptimizeVector___setitem__" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector___setitem__" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::set< std::string > >::value_type * >(argp3);
  try {
    std_vector_Sl_std_set_Sl_std_string_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OptimizeVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OptimizeVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OptimizeVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::set< std::string > > *,PySliceObject *,std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &)\n"
    "    __setitem__(std::vector< std::set< std::string > > *,std::vector< std::set< std::string > >::difference_type,std::vector< std::set< std::string > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_append" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OptimizeVector_append" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector_append" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::set< std::string > >::value_type * >(argp2);
  std_vector_Sl_std_set_Sl_std_string_Sg__Sg__append(arg1,(std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OptimizeVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_OptimizeVector")) SWIG_fail;
  result = (std::vector< std::set< std::string > > *)new std::vector< std::set< std::string > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OptimizeVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OptimizeVector",&obj0)) SWIG_fail;
  {
    std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *ptr = (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OptimizeVector" "', argument " "1"" of type '" "std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptimizeVector" "', argument " "1"" of type '" "std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::set< std::string > > *)new std::vector< std::set< std::string > >((std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_empty" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = (bool)((std::vector< std::set< std::string > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_size" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = ((std::vector< std::set< std::string > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_clear" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_swap" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OptimizeVector_swap" "', argument " "2"" of type '" "std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector_swap" "', argument " "2"" of type '" "std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = ((std::vector< std::set< std::string > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::set< std::string > >::allocator_type(static_cast< const std::vector< std::set< std::string > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_begin" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = ((std::vector< std::set< std::string > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::set< std::string > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_end" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = ((std::vector< std::set< std::string > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::set< std::string > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_rbegin" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = ((std::vector< std::set< std::string > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::set< std::string > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_rend" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = ((std::vector< std::set< std::string > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::set< std::string > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OptimizeVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OptimizeVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OptimizeVector" "', argument " "1"" of type '" "std::vector< std::set< std::string > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::set< std::string > >::size_type >(val1);
  result = (std::vector< std::set< std::string > > *)new std::vector< std::set< std::string > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_pop_back" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_resize" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector_resize" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::set< std::string > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_erase" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_erase" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_erase" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::set< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::iterator arg2 ;
  std::vector< std::set< std::string > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::set< std::string > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OptimizeVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_erase" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_erase" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_erase" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_erase" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_erase" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::set< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_OptimizeVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_OptimizeVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OptimizeVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::set< std::string > > *,std::vector< std::set< std::string > >::iterator)\n"
    "    erase(std::vector< std::set< std::string > > *,std::vector< std::set< std::string > >::iterator,std::vector< std::set< std::string > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OptimizeVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > >::size_type arg1 ;
  std::vector< std::set< std::string > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::set< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_OptimizeVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OptimizeVector" "', argument " "1"" of type '" "std::vector< std::set< std::string > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::set< std::string > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_OptimizeVector" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OptimizeVector" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::set< std::string > >::value_type * >(argp2);
  result = (std::vector< std::set< std::string > > *)new std::vector< std::set< std::string > >(arg1,(std::vector< std::set< std::string > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OptimizeVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_OptimizeVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_OptimizeVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OptimizeVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_OptimizeVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OptimizeVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::set< std::string > >()\n"
    "    std::vector< std::set< std::string > >(std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > const &)\n"
    "    std::vector< std::set< std::string > >(std::vector< std::set< std::string > >::size_type)\n"
    "    std::vector< std::set< std::string > >(std::vector< std::set< std::string > >::size_type,std::vector< std::set< std::string > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_push_back" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OptimizeVector_push_back" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector_push_back" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::set< std::string > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< std::set< std::string > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_front" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = (std::vector< std::set< std::string > >::value_type *) &((std::vector< std::set< std::string > > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_back" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = (std::vector< std::set< std::string > >::value_type *) &((std::vector< std::set< std::string > > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::size_type arg2 ;
  std::vector< std::set< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OptimizeVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_assign" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector_assign" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OptimizeVector_assign" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector_assign" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::set< std::string > >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< std::set< std::string > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::size_type arg2 ;
  std::vector< std::set< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OptimizeVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_resize" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector_resize" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OptimizeVector_resize" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector_resize" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::set< std::string > >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< std::set< std::string > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OptimizeVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OptimizeVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OptimizeVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::set< std::string > > *,std::vector< std::set< std::string > >::size_type)\n"
    "    resize(std::vector< std::set< std::string > > *,std::vector< std::set< std::string > >::size_type,std::vector< std::set< std::string > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::iterator arg2 ;
  std::vector< std::set< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::set< std::string > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OptimizeVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_insert" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_insert" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_insert" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OptimizeVector_insert" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector_insert" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::set< std::string > >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< std::set< std::string > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::set< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::iterator arg2 ;
  std::vector< std::set< std::string > >::size_type arg3 ;
  std::vector< std::set< std::string > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:OptimizeVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_insert" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_insert" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "OptimizeVector_insert" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptimizeVector_insert" "', argument " "3"" of type '" "std::vector< std::set< std::string > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::set< std::string > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "OptimizeVector_insert" "', argument " "4"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimizeVector_insert" "', argument " "4"" of type '" "std::vector< std::set< std::string > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::set< std::string > >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< std::set< std::string > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OptimizeVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::set< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_OptimizeVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OptimizeVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::set< std::string > > *,std::vector< std::set< std::string > >::iterator,std::vector< std::set< std::string > >::value_type const &)\n"
    "    insert(std::vector< std::set< std::string > > *,std::vector< std::set< std::string > >::iterator,std::vector< std::set< std::string > >::size_type,std::vector< std::set< std::string > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  std::vector< std::set< std::string > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_reserve" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimizeVector_reserve" "', argument " "2"" of type '" "std::vector< std::set< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::set< std::string > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::set< std::string > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVector_capacity" "', argument " "1"" of type '" "std::vector< std::set< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  result = ((std::vector< std::set< std::string > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OptimizeVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::set< std::string > > *arg1 = (std::vector< std::set< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OptimizeVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OptimizeVector" "', argument " "1"" of type '" "std::vector< std::set< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::set< std::string > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OptimizeVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Variable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Variable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Variable")) SWIG_fail;
  result = (HuginBase::Variable *)new HuginBase::Variable();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__Variable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::Variable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Variable",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Variable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Variable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Variable" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (HuginBase::Variable *)new HuginBase::Variable((std::string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__Variable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variable__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  HuginBase::Variable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Variable",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Variable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Variable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (HuginBase::Variable *)new HuginBase::Variable((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__Variable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Variable__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Variable__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Variable__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Variable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::Variable()\n"
    "    HuginBase::Variable(std::string const &,double)\n"
    "    HuginBase::Variable(std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Variable *arg1 = (HuginBase::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Variable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Variable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Variable" "', argument " "1"" of type '" "HuginBase::Variable *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Variable * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Variable *arg1 = (HuginBase::Variable *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variable__print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable__print" "', argument " "1"" of type '" "HuginBase::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Variable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variable__print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variable__print" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &((HuginBase::Variable const *)arg1)->print(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Variable *arg1 = (HuginBase::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variable_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getName" "', argument " "1"" of type '" "HuginBase::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Variable * >(argp1);
  result = (std::string *) &((HuginBase::Variable const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Variable *arg1 = (HuginBase::Variable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variable_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_setValue" "', argument " "1"" of type '" "HuginBase::Variable *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Variable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variable_setValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Variable *arg1 = (HuginBase::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variable_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_getValue" "', argument " "1"" of type '" "HuginBase::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Variable * >(argp1);
  result = (double)((HuginBase::Variable const *)arg1)->getValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Variable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__Variable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LinkedVariable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int arg3 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HuginBase::LinkedVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LinkedVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinkedVariable" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinkedVariable" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (HuginBase::LinkedVariable *)new HuginBase::LinkedVariable((std::string const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__LinkedVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinkedVariable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::LinkedVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LinkedVariable",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinkedVariable" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (HuginBase::LinkedVariable *)new HuginBase::LinkedVariable((std::string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__LinkedVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinkedVariable__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  HuginBase::LinkedVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LinkedVariable",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (HuginBase::LinkedVariable *)new HuginBase::LinkedVariable((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__LinkedVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinkedVariable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkedVariable__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LinkedVariable__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LinkedVariable__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LinkedVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::LinkedVariable(std::string const &,double,int)\n"
    "    HuginBase::LinkedVariable(std::string const &,double)\n"
    "    HuginBase::LinkedVariable(std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinkedVariable_isLinked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LinkedVariable *arg1 = (HuginBase::LinkedVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinkedVariable_isLinked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__LinkedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkedVariable_isLinked" "', argument " "1"" of type '" "HuginBase::LinkedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LinkedVariable * >(argp1);
  result = (bool)((HuginBase::LinkedVariable const *)arg1)->isLinked();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinkedVariable_getLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LinkedVariable *arg1 = (HuginBase::LinkedVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinkedVariable_getLink",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__LinkedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkedVariable_getLink" "', argument " "1"" of type '" "HuginBase::LinkedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LinkedVariable * >(argp1);
  result = (int)((HuginBase::LinkedVariable const *)arg1)->getLink();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinkedVariable_setLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LinkedVariable *arg1 = (HuginBase::LinkedVariable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinkedVariable_setLink",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__LinkedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkedVariable_setLink" "', argument " "1"" of type '" "HuginBase::LinkedVariable *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LinkedVariable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkedVariable_setLink" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setLink(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LinkedVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LinkedVariable *arg1 = (HuginBase::LinkedVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LinkedVariable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__LinkedVariable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkedVariable" "', argument " "1"" of type '" "HuginBase::LinkedVariable *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LinkedVariable * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinkedVariable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__LinkedVariable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LensVariable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LensVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LensVariable")) SWIG_fail;
  result = (HuginBase::LensVariable *)new HuginBase::LensVariable();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__LensVariable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LensVariable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HuginBase::LensVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LensVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LensVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LensVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LensVariable" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LensVariable" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (HuginBase::LensVariable *)new HuginBase::LensVariable((std::string const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__LensVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LensVariable__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::LensVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LensVariable",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LensVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LensVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LensVariable" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (HuginBase::LensVariable *)new HuginBase::LensVariable((std::string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__LensVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LensVariable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LensVariable__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LensVariable__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LensVariable__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LensVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::LensVariable()\n"
    "    HuginBase::LensVariable(std::string const &,double,bool)\n"
    "    HuginBase::LensVariable(std::string const &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LensVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LensVariable *arg1 = (HuginBase::LensVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LensVariable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__LensVariable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LensVariable" "', argument " "1"" of type '" "HuginBase::LensVariable *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LensVariable * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVariable_printLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LensVariable *arg1 = (HuginBase::LensVariable *) 0 ;
  std::ostream *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LensVariable_printLink",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__LensVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVariable_printLink" "', argument " "1"" of type '" "HuginBase::LensVariable const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LensVariable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LensVariable_printLink" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LensVariable_printLink" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LensVariable_printLink" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (std::ostream *) &((HuginBase::LensVariable const *)arg1)->printLink(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVariable_isLinked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LensVariable *arg1 = (HuginBase::LensVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVariable_isLinked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__LensVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVariable_isLinked" "', argument " "1"" of type '" "HuginBase::LensVariable const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LensVariable * >(argp1);
  result = (bool)((HuginBase::LensVariable const *)arg1)->isLinked();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVariable_setLinked__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LensVariable *arg1 = (HuginBase::LensVariable *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LensVariable_setLinked",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__LensVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVariable_setLinked" "', argument " "1"" of type '" "HuginBase::LensVariable *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LensVariable * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LensVariable_setLinked" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setLinked(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVariable_setLinked__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LensVariable *arg1 = (HuginBase::LensVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LensVariable_setLinked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__LensVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LensVariable_setLinked" "', argument " "1"" of type '" "HuginBase::LensVariable *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LensVariable * >(argp1);
  (arg1)->setLinked();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LensVariable_setLinked(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__LensVariable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LensVariable_setLinked__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__LensVariable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LensVariable_setLinked__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LensVariable_setLinked'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setLinked(HuginBase::LensVariable *,bool)\n"
    "    setLinked(HuginBase::LensVariable *)\n");
  return NULL;
}


SWIGINTERN PyObject *LensVariable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__LensVariable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fillVariableMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::VariableMap *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fillVariableMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fillVariableMap" "', argument " "1"" of type '" "HuginBase::VariableMap &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fillVariableMap" "', argument " "1"" of type '" "HuginBase::VariableMap &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::VariableMap * >(argp1);
  HuginBase::fillVariableMap(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_printVariableMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  HuginBase::VariableMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:printVariableMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "printVariableMap" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "printVariableMap" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "printVariableMap" "', argument " "2"" of type '" "HuginBase::VariableMap const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "printVariableMap" "', argument " "2"" of type '" "HuginBase::VariableMap const &""'"); 
    }
    arg2 = ptr;
  }
  HuginBase::printVariableMap(*arg1,(std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fillLensVarMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::LensVarMap *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fillLensVarMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fillLensVarMap" "', argument " "1"" of type '" "HuginBase::LensVarMap &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fillLensVarMap" "', argument " "1"" of type '" "HuginBase::LensVarMap &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::LensVarMap * >(argp1);
  HuginBase::fillLensVarMap(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_iterator" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_ControlPoint_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___nonzero__" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = (bool)std_vector_Sl_ControlPoint_Sg____nonzero__((std::vector< ControlPoint > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___bool__" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = (bool)std_vector_Sl_ControlPoint_Sg____bool__((std::vector< ControlPoint > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___len__" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = std_vector_Sl_ControlPoint_Sg____len__((std::vector< ControlPoint > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_pop" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  try {
    result = std_vector_Sl_ControlPoint_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< ControlPoint >::value_type(static_cast< const std::vector< ControlPoint >::value_type& >(result))), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::difference_type arg2 ;
  std::vector< ControlPoint >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___getslice__" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector___getslice__" "', argument " "2"" of type '" "std::vector< ControlPoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPVector___getslice__" "', argument " "3"" of type '" "std::vector< ControlPoint >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ControlPoint >::difference_type >(val3);
  try {
    result = (std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > *)std_vector_Sl_ControlPoint_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::difference_type arg2 ;
  std::vector< ControlPoint >::difference_type arg3 ;
  std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CPVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___setslice__" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector___setslice__" "', argument " "2"" of type '" "std::vector< ControlPoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPVector___setslice__" "', argument " "3"" of type '" "std::vector< ControlPoint >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ControlPoint >::difference_type >(val3);
  {
    std::vector<ControlPoint,std::allocator< ControlPoint > > *ptr = (std::vector<ControlPoint,std::allocator< ControlPoint > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPVector___setslice__" "', argument " "4"" of type '" "std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector___setslice__" "', argument " "4"" of type '" "std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_ControlPoint_Sg____setslice__(arg1,arg2,arg3,(std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::difference_type arg2 ;
  std::vector< ControlPoint >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___delslice__" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector___delslice__" "', argument " "2"" of type '" "std::vector< ControlPoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPVector___delslice__" "', argument " "3"" of type '" "std::vector< ControlPoint >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ControlPoint >::difference_type >(val3);
  try {
    std_vector_Sl_ControlPoint_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___delitem__" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector___delitem__" "', argument " "2"" of type '" "std::vector< ControlPoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::difference_type >(val2);
  try {
    std_vector_Sl_ControlPoint_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___getitem__" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > *)std_vector_Sl_ControlPoint_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___setitem__" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<ControlPoint,std::allocator< ControlPoint > > *ptr = (std::vector<ControlPoint,std::allocator< ControlPoint > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPVector___setitem__" "', argument " "3"" of type '" "std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector___setitem__" "', argument " "3"" of type '" "std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_ControlPoint_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___delitem__" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_ControlPoint_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CPVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CPVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< ControlPoint > *,std::vector< ControlPoint >::difference_type)\n"
    "    __delitem__(std::vector< ControlPoint > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ControlPoint >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___getitem__" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector___getitem__" "', argument " "2"" of type '" "std::vector< ControlPoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::difference_type >(val2);
  try {
    result = (std::vector< ControlPoint >::value_type *) &std_vector_Sl_ControlPoint_Sg____getitem____SWIG_1((std::vector< ControlPoint > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CPVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CPVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< ControlPoint > *,PySliceObject *)\n"
    "    __getitem__(std::vector< ControlPoint > const *,std::vector< ControlPoint >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::difference_type arg2 ;
  std::vector< ControlPoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector___setitem__" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector___setitem__" "', argument " "2"" of type '" "std::vector< ControlPoint >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPVector___setitem__" "', argument " "3"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector___setitem__" "', argument " "3"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ControlPoint >::value_type * >(argp3);
  try {
    std_vector_Sl_ControlPoint_Sg____setitem____SWIG_1(arg1,arg2,(HuginBase::ControlPoint const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CPVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CPVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< ControlPoint > *,PySliceObject *,std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > const &)\n"
    "    __setitem__(std::vector< ControlPoint > *,std::vector< ControlPoint >::difference_type,std::vector< ControlPoint >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_append" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPVector_append" "', argument " "2"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector_append" "', argument " "2"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ControlPoint >::value_type * >(argp2);
  std_vector_Sl_ControlPoint_Sg__append(arg1,(HuginBase::ControlPoint const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CPVector")) SWIG_fail;
  result = (std::vector< ControlPoint > *)new std::vector< ControlPoint >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CPVector",&obj0)) SWIG_fail;
  {
    std::vector<ControlPoint,std::allocator< ControlPoint > > *ptr = (std::vector<ControlPoint,std::allocator< ControlPoint > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CPVector" "', argument " "1"" of type '" "std::vector< ControlPoint > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CPVector" "', argument " "1"" of type '" "std::vector< ControlPoint > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< ControlPoint > *)new std::vector< ControlPoint >((std::vector< ControlPoint > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_empty" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = (bool)((std::vector< ControlPoint > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_size" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = ((std::vector< ControlPoint > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_clear" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_swap" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPVector_swap" "', argument " "2"" of type '" "std::vector< ControlPoint > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector_swap" "', argument " "2"" of type '" "std::vector< ControlPoint > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ControlPoint > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< HuginBase::ControlPoint > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_get_allocator" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = ((std::vector< ControlPoint > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< ControlPoint >::allocator_type(static_cast< const std::vector< ControlPoint >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_begin" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = ((std::vector< ControlPoint > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ControlPoint >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_end" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = ((std::vector< ControlPoint > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ControlPoint >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_rbegin" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = ((std::vector< ControlPoint > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ControlPoint >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_rend" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = ((std::vector< ControlPoint > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ControlPoint >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CPVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CPVector" "', argument " "1"" of type '" "std::vector< ControlPoint >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ControlPoint >::size_type >(val1);
  result = (std::vector< ControlPoint > *)new std::vector< ControlPoint >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_pop_back" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_resize" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector_resize" "', argument " "2"" of type '" "std::vector< ControlPoint >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ControlPoint >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_erase" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_erase" "', argument " "2"" of type '" "std::vector< ControlPoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_erase" "', argument " "2"" of type '" "std::vector< ControlPoint >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ControlPoint >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::iterator arg2 ;
  std::vector< ControlPoint >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ControlPoint >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_erase" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_erase" "', argument " "2"" of type '" "std::vector< ControlPoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_erase" "', argument " "2"" of type '" "std::vector< ControlPoint >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_erase" "', argument " "3"" of type '" "std::vector< ControlPoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_erase" "', argument " "3"" of type '" "std::vector< ControlPoint >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ControlPoint >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_CPVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_CPVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< ControlPoint > *,std::vector< ControlPoint >::iterator)\n"
    "    erase(std::vector< ControlPoint > *,std::vector< ControlPoint >::iterator,std::vector< ControlPoint >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint >::size_type arg1 ;
  std::vector< ControlPoint >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ControlPoint > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CPVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CPVector" "', argument " "1"" of type '" "std::vector< ControlPoint >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ControlPoint >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CPVector" "', argument " "2"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CPVector" "', argument " "2"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ControlPoint >::value_type * >(argp2);
  result = (std::vector< ControlPoint > *)new std::vector< ControlPoint >(arg1,(std::vector< ControlPoint >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CPVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CPVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CPVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CPVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CPVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< ControlPoint >()\n"
    "    std::vector< ControlPoint >(std::vector< ControlPoint > const &)\n"
    "    std::vector< ControlPoint >(std::vector< ControlPoint >::size_type)\n"
    "    std::vector< ControlPoint >(std::vector< ControlPoint >::size_type,std::vector< ControlPoint >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_push_back" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPVector_push_back" "', argument " "2"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector_push_back" "', argument " "2"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< ControlPoint >::value_type * >(argp2);
  (arg1)->push_back((std::vector< ControlPoint >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_front" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = (std::vector< ControlPoint >::value_type *) &((std::vector< ControlPoint > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_back" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = (std::vector< ControlPoint >::value_type *) &((std::vector< ControlPoint > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::size_type arg2 ;
  std::vector< ControlPoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_assign" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector_assign" "', argument " "2"" of type '" "std::vector< ControlPoint >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPVector_assign" "', argument " "3"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector_assign" "', argument " "3"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ControlPoint >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< ControlPoint >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::size_type arg2 ;
  std::vector< ControlPoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_resize" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector_resize" "', argument " "2"" of type '" "std::vector< ControlPoint >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPVector_resize" "', argument " "3"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector_resize" "', argument " "3"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ControlPoint >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< ControlPoint >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CPVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CPVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< ControlPoint > *,std::vector< ControlPoint >::size_type)\n"
    "    resize(std::vector< ControlPoint > *,std::vector< ControlPoint >::size_type,std::vector< ControlPoint >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::iterator arg2 ;
  std::vector< ControlPoint >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ControlPoint >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_insert" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_insert" "', argument " "2"" of type '" "std::vector< ControlPoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_insert" "', argument " "2"" of type '" "std::vector< ControlPoint >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPVector_insert" "', argument " "3"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector_insert" "', argument " "3"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< ControlPoint >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< ControlPoint >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ControlPoint >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::iterator arg2 ;
  std::vector< ControlPoint >::size_type arg3 ;
  std::vector< ControlPoint >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CPVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_insert" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_insert" "', argument " "2"" of type '" "std::vector< ControlPoint >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPVector_insert" "', argument " "2"" of type '" "std::vector< ControlPoint >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPVector_insert" "', argument " "3"" of type '" "std::vector< ControlPoint >::size_type""'");
  } 
  arg3 = static_cast< std::vector< ControlPoint >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPVector_insert" "', argument " "4"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPVector_insert" "', argument " "4"" of type '" "std::vector< ControlPoint >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< ControlPoint >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< ControlPoint >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CPVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ControlPoint >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CPVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< ControlPoint > *,std::vector< ControlPoint >::iterator,std::vector< ControlPoint >::value_type const &)\n"
    "    insert(std::vector< ControlPoint > *,std::vector< ControlPoint >::iterator,std::vector< ControlPoint >::size_type,std::vector< ControlPoint >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  std::vector< ControlPoint >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_reserve" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPVector_reserve" "', argument " "2"" of type '" "std::vector< ControlPoint >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ControlPoint >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< ControlPoint >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPVector_capacity" "', argument " "1"" of type '" "std::vector< ControlPoint > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  result = ((std::vector< ControlPoint > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CPVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< ControlPoint > *arg1 = (std::vector< ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CPVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPVector" "', argument " "1"" of type '" "std::vector< ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< ControlPoint > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CPVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,ControlPoint > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CPoint")) SWIG_fail;
  result = (std::pair< unsigned int,ControlPoint > *)new std::pair< unsigned int,ControlPoint >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  ControlPoint arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< unsigned int,ControlPoint > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CPoint",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CPoint" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__ControlPoint,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CPoint" "', argument " "2"" of type '" "ControlPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CPoint" "', argument " "2"" of type '" "ControlPoint""'");
    } else {
      ControlPoint * temp = reinterpret_cast< ControlPoint * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::pair< unsigned int,ControlPoint > *)new std::pair< unsigned int,ControlPoint >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,ControlPoint > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< unsigned int,ControlPoint > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CPoint",&obj0)) SWIG_fail;
  {
    std::pair<unsigned int,ControlPoint > *ptr = (std::pair<unsigned int,ControlPoint > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CPoint" "', argument " "1"" of type '" "std::pair< unsigned int,ControlPoint > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CPoint" "', argument " "1"" of type '" "std::pair< unsigned int,ControlPoint > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< unsigned int,ControlPoint > *)new std::pair< unsigned int,ControlPoint >((std::pair< unsigned int,ControlPoint > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CPoint__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<unsigned int,ControlPoint >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CPoint__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HuginBase__ControlPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CPoint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< unsigned int,ControlPoint >()\n"
    "    std::pair< unsigned int,ControlPoint >(unsigned int,ControlPoint)\n"
    "    std::pair< unsigned int,ControlPoint >(std::pair< unsigned int,ControlPoint > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPoint_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,ControlPoint > *arg1 = (std::pair< unsigned int,ControlPoint > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPoint_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPoint_first_set" "', argument " "1"" of type '" "std::pair< unsigned int,ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,ControlPoint > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPoint_first_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPoint_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,ControlPoint > *arg1 = (std::pair< unsigned int,ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPoint_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPoint_first_get" "', argument " "1"" of type '" "std::pair< unsigned int,ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,ControlPoint > * >(argp1);
  result = (unsigned int) ((arg1)->first);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPoint_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,ControlPoint > *arg1 = (std::pair< unsigned int,ControlPoint > *) 0 ;
  ControlPoint *arg2 = (ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPoint_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPoint_second_set" "', argument " "1"" of type '" "std::pair< unsigned int,ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,ControlPoint > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPoint_second_set" "', argument " "2"" of type '" "ControlPoint *""'"); 
  }
  arg2 = reinterpret_cast< ControlPoint * >(argp2);
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPoint_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,ControlPoint > *arg1 = (std::pair< unsigned int,ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ControlPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPoint_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPoint_second_get" "', argument " "1"" of type '" "std::pair< unsigned int,ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,ControlPoint > * >(argp1);
  result = (ControlPoint *)& ((arg1)->second);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,ControlPoint > *arg1 = (std::pair< unsigned int,ControlPoint > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPoint" "', argument " "1"" of type '" "std::pair< unsigned int,ControlPoint > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,ControlPoint > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CPointVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_iterator" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____nonzero__((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___bool__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____bool__((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___len__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____len__((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::pair< unsigned int,HuginBase::ControlPoint > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_pop" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  try {
    result = std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair<unsigned int,ControlPoint > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::difference_type arg2 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPointVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___getslice__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector___getslice__" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPointVector___getslice__" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::difference_type >(val3);
  try {
    result = (std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > *)std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::difference_type arg2 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::difference_type arg3 ;
  std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CPointVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPointVector___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::difference_type >(val3);
  {
    std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > > *ptr = (std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPointVector___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::difference_type arg2 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPointVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___delslice__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector___delslice__" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPointVector___delslice__" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector___delitem__" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::difference_type >(val2);
  try {
    std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > *)std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPointVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > > *ptr = (std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPointVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CPointVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CPointVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPointVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::pair< unsigned int,ControlPoint > > *,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type)\n"
    "    __delitem__(std::vector< std::pair< unsigned int,ControlPoint > > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector___getitem__" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::difference_type >(val2);
  try {
    result = (std::vector< std::pair< unsigned int,ControlPoint > >::value_type *) &std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____getitem____SWIG_1((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair<unsigned int,ControlPoint > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CPointVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CPointVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPointVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::pair< unsigned int,ControlPoint > > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::pair< unsigned int,ControlPoint > > const *,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::difference_type arg2 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPointVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector___setitem__" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::difference_type >(val2);
  {
    std::pair<unsigned int,ControlPoint > *ptr = (std::pair<unsigned int,ControlPoint > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPointVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg____setitem____SWIG_1(arg1,arg2,(std::pair< unsigned int,HuginBase::ControlPoint > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CPointVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair<unsigned int,ControlPoint >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CPointVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPointVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::pair< unsigned int,ControlPoint > > *,PySliceObject *,std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > const &)\n"
    "    __setitem__(std::vector< std::pair< unsigned int,ControlPoint > > *,std::vector< std::pair< unsigned int,ControlPoint > >::difference_type,std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_append" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  {
    std::pair<unsigned int,ControlPoint > *ptr = (std::pair<unsigned int,ControlPoint > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPointVector_append" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector_append" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_ControlPoint_Sg__Sg__append(arg1,(std::pair< unsigned int,HuginBase::ControlPoint > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPointVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CPointVector")) SWIG_fail;
  result = (std::vector< std::pair< unsigned int,ControlPoint > > *)new std::vector< std::pair< unsigned int,ControlPoint > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPointVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CPointVector",&obj0)) SWIG_fail;
  {
    std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > > *ptr = (std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CPointVector" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CPointVector" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::pair< unsigned int,ControlPoint > > *)new std::vector< std::pair< unsigned int,ControlPoint > >((std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_empty" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = (bool)((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_size" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = ((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_clear" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_swap" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPointVector_swap" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector_swap" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = ((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::pair< unsigned int,ControlPoint > >::allocator_type(static_cast< const std::vector< std::pair< unsigned int,ControlPoint > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_begin" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = ((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< unsigned int,ControlPoint > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_end" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = ((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< unsigned int,ControlPoint > >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_rbegin" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = ((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< unsigned int,ControlPoint > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_rend" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = ((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< unsigned int,ControlPoint > >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPointVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CPointVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CPointVector" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::size_type >(val1);
  result = (std::vector< std::pair< unsigned int,ControlPoint > > *)new std::vector< std::pair< unsigned int,ControlPoint > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_pop_back" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_resize" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector_resize" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_erase" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< unsigned int,ControlPoint > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::iterator arg2 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPointVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_erase" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_erase" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_erase" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< unsigned int,ControlPoint > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_CPointVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_CPointVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPointVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::pair< unsigned int,ControlPoint > > *,std::vector< std::pair< unsigned int,ControlPoint > >::iterator)\n"
    "    erase(std::vector< std::pair< unsigned int,ControlPoint > > *,std::vector< std::pair< unsigned int,ControlPoint > >::iterator,std::vector< std::pair< unsigned int,ControlPoint > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPointVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type arg1 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CPointVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CPointVector" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::size_type >(val1);
  {
    std::pair<unsigned int,ControlPoint > *ptr = (std::pair<unsigned int,ControlPoint > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CPointVector" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CPointVector" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::pair< unsigned int,ControlPoint > > *)new std::vector< std::pair< unsigned int,ControlPoint > >(arg1,(std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPointVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CPointVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CPointVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CPointVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair<unsigned int,ControlPoint >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CPointVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CPointVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< unsigned int,ControlPoint > >()\n"
    "    std::vector< std::pair< unsigned int,ControlPoint > >(std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > const &)\n"
    "    std::vector< std::pair< unsigned int,ControlPoint > >(std::vector< std::pair< unsigned int,ControlPoint > >::size_type)\n"
    "    std::vector< std::pair< unsigned int,ControlPoint > >(std::vector< std::pair< unsigned int,ControlPoint > >::size_type,std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_push_back" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  {
    std::pair<unsigned int,ControlPoint > *ptr = (std::pair<unsigned int,ControlPoint > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPointVector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_front" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = (std::vector< std::pair< unsigned int,ControlPoint > >::value_type *) &((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::pair<unsigned int,ControlPoint > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_back" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = (std::vector< std::pair< unsigned int,ControlPoint > >::value_type *) &((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::pair<unsigned int,ControlPoint > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type arg2 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPointVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_assign" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector_assign" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::size_type >(val2);
  {
    std::pair<unsigned int,ControlPoint > *ptr = (std::pair<unsigned int,ControlPoint > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPointVector_assign" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector_assign" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type arg2 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPointVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_resize" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector_resize" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::size_type >(val2);
  {
    std::pair<unsigned int,ControlPoint > *ptr = (std::pair<unsigned int,ControlPoint > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPointVector_resize" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector_resize" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CPointVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair<unsigned int,ControlPoint >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CPointVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPointVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::pair< unsigned int,ControlPoint > > *,std::vector< std::pair< unsigned int,ControlPoint > >::size_type)\n"
    "    resize(std::vector< std::pair< unsigned int,ControlPoint > > *,std::vector< std::pair< unsigned int,ControlPoint > >::size_type,std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::iterator arg2 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CPointVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_insert" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
    }
  }
  {
    std::pair<unsigned int,ControlPoint > *ptr = (std::pair<unsigned int,ControlPoint > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPointVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< unsigned int,ControlPoint > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::iterator arg2 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type arg3 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CPointVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_insert" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CPointVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPointVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::size_type >(val3);
  {
    std::pair<unsigned int,ControlPoint > *ptr = (std::pair<unsigned int,ControlPoint > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPointVector_insert" "', argument " "4"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPointVector_insert" "', argument " "4"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair<unsigned int,ControlPoint >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CPointVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< unsigned int,ControlPoint > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::pair<unsigned int,ControlPoint >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CPointVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CPointVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::pair< unsigned int,ControlPoint > > *,std::vector< std::pair< unsigned int,ControlPoint > >::iterator,std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)\n"
    "    insert(std::vector< std::pair< unsigned int,ControlPoint > > *,std::vector< std::pair< unsigned int,ControlPoint > >::iterator,std::vector< std::pair< unsigned int,ControlPoint > >::size_type,std::vector< std::pair< unsigned int,ControlPoint > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CPointVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_reserve" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPointVector_reserve" "', argument " "2"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< unsigned int,ControlPoint > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPointVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< unsigned int,ControlPoint > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPointVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPointVector_capacity" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  result = ((std::vector< std::pair< unsigned int,ControlPoint > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CPointVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< unsigned int,ControlPoint > > *arg1 = (std::vector< std::pair< unsigned int,ControlPoint > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CPointVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPointVector" "', argument " "1"" of type '" "std::vector< std::pair< unsigned int,ControlPoint > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< unsigned int,ControlPoint > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CPointVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ControlPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ControlPoint")) SWIG_fail;
  result = (HuginBase::ControlPoint *)new HuginBase::ControlPoint();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__ControlPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ControlPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  HuginBase::ControlPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ControlPoint",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ControlPoint" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ControlPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ControlPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ControlPoint" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ControlPoint" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ControlPoint" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ControlPoint" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = (HuginBase::ControlPoint *)new HuginBase::ControlPoint(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__ControlPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ControlPoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  HuginBase::ControlPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ControlPoint",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ControlPoint" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ControlPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ControlPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ControlPoint" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ControlPoint" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ControlPoint" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  result = (HuginBase::ControlPoint *)new HuginBase::ControlPoint(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__ControlPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ControlPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ControlPoint__SWIG_0(self, args);
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ControlPoint__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_ControlPoint__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ControlPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::ControlPoint()\n"
    "    HuginBase::ControlPoint(unsigned int,double,double,unsigned int,double,double,int)\n"
    "    HuginBase::ControlPoint(unsigned int,double,double,unsigned int,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  HuginBase::ControlPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint___eq__" "', argument " "1"" of type '" "HuginBase::ControlPoint const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__ControlPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ControlPoint___eq__" "', argument " "2"" of type '" "HuginBase::ControlPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ControlPoint___eq__" "', argument " "2"" of type '" "HuginBase::ControlPoint const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::ControlPoint * >(argp2);
  result = (bool)((HuginBase::ControlPoint const *)arg1)->operator ==((HuginBase::ControlPoint const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_getModeName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  HuginBase::ControlPoint::OptimizeMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint_getModeName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_getModeName" "', argument " "1"" of type '" "HuginBase::ControlPoint const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ControlPoint_getModeName" "', argument " "2"" of type '" "HuginBase::ControlPoint::OptimizeMode""'");
  } 
  arg2 = static_cast< HuginBase::ControlPoint::OptimizeMode >(val2);
  result = (std::string *) &((HuginBase::ControlPoint const *)arg1)->getModeName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_getCPString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_getCPString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_getCPString" "', argument " "1"" of type '" "HuginBase::ControlPoint const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  result = ((HuginBase::ControlPoint const *)arg1)->getCPString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_mirror(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_mirror",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_mirror" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  (arg1)->mirror();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_image1Nr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint_image1Nr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_image1Nr_set" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ControlPoint_image1Nr_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->image1Nr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_image1Nr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_image1Nr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_image1Nr_get" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  result = (unsigned int) ((arg1)->image1Nr);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_image2Nr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint_image2Nr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_image2Nr_set" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ControlPoint_image2Nr_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->image2Nr = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_image2Nr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_image2Nr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_image2Nr_get" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  result = (unsigned int) ((arg1)->image2Nr);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_x1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint_x1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_x1_set" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ControlPoint_x1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_x1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_x1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_x1_get" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  result = (double) ((arg1)->x1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_y1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint_y1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_y1_set" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ControlPoint_y1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_y1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_y1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_y1_get" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  result = (double) ((arg1)->y1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_x2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint_x2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_x2_set" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ControlPoint_x2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_x2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_x2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_x2_get" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  result = (double) ((arg1)->x2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_y2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint_y2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_y2_set" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ControlPoint_y2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_y2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_y2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_y2_get" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  result = (double) ((arg1)->y2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_error_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint_error_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_error_set" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ControlPoint_error_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->error = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_error_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_error_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_error_get" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  result = (double) ((arg1)->error);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ControlPoint_mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_mode_set" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ControlPoint_mode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->mode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ControlPoint_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ControlPoint_mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ControlPoint_mode_get" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  result = (int) ((arg1)->mode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ControlPoint_modeNames_set(PyObject *_val) {
  SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""read-only HuginBase::ControlPoint::modeNames""' of type '""std::string []""'");
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_ControlPoint_modeNames_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(HuginBase::ControlPoint::modeNames), SWIGTYPE_p_std__string,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ControlPoint_modeNames_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ControlPoint_modeNames_get();
}


SWIGINTERN PyObject *_wrap_ControlPoint_modeNames_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_ControlPoint_modeNames_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_delete_ControlPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ControlPoint *arg1 = (HuginBase::ControlPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ControlPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ControlPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ControlPoint" "', argument " "1"" of type '" "HuginBase::ControlPoint *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ControlPoint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ControlPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__ControlPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DestPanoImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DestPanoImage")) SWIG_fail;
  result = (HuginBase::DestPanoImage *)new HuginBase::DestPanoImage();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__DestPanoImage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DestPanoImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage::Projection arg1 ;
  double arg2 ;
  SwigValueWrapper< vigra::Size2D > arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HuginBase::DestPanoImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DestPanoImage",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DestPanoImage" "', argument " "1"" of type '" "HuginBase::DestPanoImage::Projection""'");
  } 
  arg1 = static_cast< HuginBase::DestPanoImage::Projection >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DestPanoImage" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_vigra__Size2D,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DestPanoImage" "', argument " "3"" of type '" "vigra::Size2D""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DestPanoImage" "', argument " "3"" of type '" "vigra::Size2D""'");
    } else {
      vigra::Size2D * temp = reinterpret_cast< vigra::Size2D * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (HuginBase::DestPanoImage *)new HuginBase::DestPanoImage(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__DestPanoImage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DestPanoImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DestPanoImage__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_vigra__Size2D, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_DestPanoImage__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DestPanoImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::DestPanoImage()\n"
    "    HuginBase::DestPanoImage(HuginBase::DestPanoImage::Projection,double,vigra::Size2D)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestPanoImage_horizontalWarpNeeded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DestPanoImage_horizontalWarpNeeded",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestPanoImage_horizontalWarpNeeded" "', argument " "1"" of type '" "HuginBase::DestPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  result = (bool)((HuginBase::DestPanoImage const *)arg1)->horizontalWarpNeeded();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestPanoImage_getProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::DestPanoImage::Projection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DestPanoImage_getProjection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestPanoImage_getProjection" "', argument " "1"" of type '" "HuginBase::DestPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  result = (HuginBase::DestPanoImage::Projection *) &((HuginBase::DestPanoImage const *)arg1)->getProjection();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestPanoImage_setProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  HuginBase::DestPanoImage::Projection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  HuginBase::DestPanoImage::Projection temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DestPanoImage_setProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestPanoImage_setProjection" "', argument " "1"" of type '" "HuginBase::DestPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DestPanoImage_setProjection" "', argument " "2"" of type '" "HuginBase::DestPanoImage::Projection const &""'");
  } else {
    temp2 = static_cast< HuginBase::DestPanoImage::Projection >(val2);
    arg2 = &temp2;
  }
  (arg1)->setProjection((HuginBase::DestPanoImage::Projection const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestPanoImage_getHFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DestPanoImage_getHFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestPanoImage_getHFOV" "', argument " "1"" of type '" "HuginBase::DestPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  result = (double *) &((HuginBase::DestPanoImage const *)arg1)->getHFOV();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestPanoImage_setHFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DestPanoImage_setHFOV",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestPanoImage_setHFOV" "', argument " "1"" of type '" "HuginBase::DestPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DestPanoImage_setHFOV" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  (arg1)->setHFOV((double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestPanoImage_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vigra::Size2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DestPanoImage_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestPanoImage_getSize" "', argument " "1"" of type '" "HuginBase::DestPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  result = (vigra::Size2D *) &((HuginBase::DestPanoImage const *)arg1)->getSize();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vigra__Size2D, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestPanoImage_setSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  vigra::Size2D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DestPanoImage_setSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestPanoImage_setSize" "', argument " "1"" of type '" "HuginBase::DestPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Size2D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DestPanoImage_setSize" "', argument " "2"" of type '" "vigra::Size2D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DestPanoImage_setSize" "', argument " "2"" of type '" "vigra::Size2D const &""'"); 
  }
  arg2 = reinterpret_cast< vigra::Size2D * >(argp2);
  (arg1)->setSize((vigra::Size2D const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestPanoImage_getROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vigra::Rect2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DestPanoImage_getROI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestPanoImage_getROI" "', argument " "1"" of type '" "HuginBase::DestPanoImage const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  result = (vigra::Rect2D *) &((HuginBase::DestPanoImage const *)arg1)->getROI();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vigra__Rect2D, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DestPanoImage_setROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  vigra::Rect2D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DestPanoImage_setROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DestPanoImage_setROI" "', argument " "1"" of type '" "HuginBase::DestPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Rect2D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DestPanoImage_setROI" "', argument " "2"" of type '" "vigra::Rect2D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DestPanoImage_setROI" "', argument " "2"" of type '" "vigra::Rect2D const &""'"); 
  }
  arg2 = reinterpret_cast< vigra::Rect2D * >(argp2);
  (arg1)->setROI((vigra::Rect2D const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DestPanoImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::DestPanoImage *arg1 = (HuginBase::DestPanoImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DestPanoImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__DestPanoImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DestPanoImage" "', argument " "1"" of type '" "HuginBase::DestPanoImage *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::DestPanoImage * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DestPanoImage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__DestPanoImage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PanoramaOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PanoramaOptions")) SWIG_fail;
  result = (HuginBase::PanoramaOptions *)new HuginBase::PanoramaOptions();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaOptions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PanoramaOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PanoramaOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PanoramaOptions" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_reset" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_printScriptLine__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaOptions_printScriptLine",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_printScriptLine" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_printScriptLine" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_printScriptLine" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PanoramaOptions_printScriptLine" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ((HuginBase::PanoramaOptions const *)arg1)->printScriptLine(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_printScriptLine__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_printScriptLine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_printScriptLine" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_printScriptLine" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_printScriptLine" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  ((HuginBase::PanoramaOptions const *)arg1)->printScriptLine(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_printScriptLine(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PanoramaOptions_printScriptLine__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PanoramaOptions_printScriptLine__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PanoramaOptions_printScriptLine'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    printScriptLine(HuginBase::PanoramaOptions const *,std::ostream &,bool)\n"
    "    printScriptLine(HuginBase::PanoramaOptions const *,std::ostream &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getFormatName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions::FileFormat arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getFormatName",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PanoramaOptions_getFormatName" "', argument " "1"" of type '" "HuginBase::PanoramaOptions::FileFormat""'");
  } 
  arg1 = static_cast< HuginBase::PanoramaOptions::FileFormat >(val1);
  result = (std::string *) &HuginBase::PanoramaOptions::getFormatName(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getFormatFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions::FileFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getFormatFromName",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getFormatFromName" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_getFormatFromName" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (HuginBase::PanoramaOptions::FileFormat)HuginBase::PanoramaOptions::getFormatFromName((std::string const &)*arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getOutputExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getOutputExtension",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getOutputExtension" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) &((HuginBase::PanoramaOptions const *)arg1)->getOutputExtension();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setWidth__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaOptions_setWidth",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_setWidth" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_setWidth" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PanoramaOptions_setWidth" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setWidth(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setWidth__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_setWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_setWidth" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_setWidth" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setWidth(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setWidth(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PanoramaOptions_setWidth__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PanoramaOptions_setWidth__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PanoramaOptions_setWidth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setWidth(HuginBase::PanoramaOptions *,unsigned int,bool)\n"
    "    setWidth(HuginBase::PanoramaOptions *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_setHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_setHeight" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_setHeight" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setHeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getWidth" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (unsigned int)((HuginBase::PanoramaOptions const *)arg1)->getWidth();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getHeight" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (unsigned int)((HuginBase::PanoramaOptions const *)arg1)->getHeight();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< vigra::Size2D > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getSize" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = ((HuginBase::PanoramaOptions const *)arg1)->getSize();
  resultobj = SWIG_NewPointerObj((new vigra::Size2D(static_cast< const vigra::Size2D& >(result))), SWIGTYPE_p_vigra__Size2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vigra::Rect2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getROI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getROI" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (vigra::Rect2D *) &((HuginBase::PanoramaOptions const *)arg1)->getROI();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vigra__Rect2D, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  vigra::Rect2D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_setROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_setROI" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Rect2D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_setROI" "', argument " "2"" of type '" "vigra::Rect2D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_setROI" "', argument " "2"" of type '" "vigra::Rect2D const &""'"); 
  }
  arg2 = reinterpret_cast< vigra::Rect2D * >(argp2);
  (arg1)->setROI((vigra::Rect2D const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  HuginBase::PanoramaOptions::ProjectionFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_setProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_setProjection" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_setProjection" "', argument " "2"" of type '" "HuginBase::PanoramaOptions::ProjectionFormat""'");
  } 
  arg2 = static_cast< HuginBase::PanoramaOptions::ProjectionFormat >(val2);
  (arg1)->setProjection(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_resetProjectionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_resetProjectionParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_resetProjectionParameters" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  (arg1)->resetProjectionParameters();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions::ProjectionFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getProjection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getProjection" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (HuginBase::PanoramaOptions::ProjectionFormat)((HuginBase::PanoramaOptions const *)arg1)->getProjection();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getProjectionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getProjectionParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getProjectionParameters" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::vector< double,std::allocator< double > > *) &((HuginBase::PanoramaOptions const *)arg1)->getProjectionParameters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setProjectionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_setProjectionParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_setProjectionParameters" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_setProjectionParameters" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_setProjectionParameters" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  (arg1)->setProjectionParameters((std::vector< double,std::allocator< double > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_fovCalcSupported(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  HuginBase::PanoramaOptions::ProjectionFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_fovCalcSupported",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_fovCalcSupported" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_fovCalcSupported" "', argument " "2"" of type '" "HuginBase::PanoramaOptions::ProjectionFormat""'");
  } 
  arg2 = static_cast< HuginBase::PanoramaOptions::ProjectionFormat >(val2);
  result = (bool)((HuginBase::PanoramaOptions const *)arg1)->fovCalcSupported(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setHFOV__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PanoramaOptions_setHFOV",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_setHFOV" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_setHFOV" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PanoramaOptions_setHFOV" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setHFOV(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setHFOV__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_setHFOV",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_setHFOV" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_setHFOV" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setHFOV(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setHFOV(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PanoramaOptions_setHFOV__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PanoramaOptions_setHFOV__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PanoramaOptions_setHFOV'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setHFOV(HuginBase::PanoramaOptions *,double,bool)\n"
    "    setHFOV(HuginBase::PanoramaOptions *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getHFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getHFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getHFOV" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (double)((HuginBase::PanoramaOptions const *)arg1)->getHFOV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_setVFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_setVFOV",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_setVFOV" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_setVFOV" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setVFOV(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getVFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getVFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getVFOV" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (double)((HuginBase::PanoramaOptions const *)arg1)->getVFOV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getMaxHFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getMaxHFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getMaxHFOV" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (double)((HuginBase::PanoramaOptions const *)arg1)->getMaxHFOV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getMaxVFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getMaxVFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getMaxVFOV" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (double)((HuginBase::PanoramaOptions const *)arg1)->getMaxVFOV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_getDestImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::DestPanoImage result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_getDestImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_getDestImage" "', argument " "1"" of type '" "HuginBase::PanoramaOptions const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = ((HuginBase::PanoramaOptions const *)arg1)->getDestImage();
  resultobj = SWIG_NewPointerObj((new HuginBase::DestPanoImage(static_cast< const HuginBase::DestPanoImage& >(result))), SWIGTYPE_p_HuginBase__DestPanoImage, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outfile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outfile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outfile_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_outfile_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_outfile_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->outfile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outfile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outfile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outfile_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->outfile);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputFormat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  HuginBase::PanoramaOptions::FileFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputFormat_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputFormat_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputFormat_set" "', argument " "2"" of type '" "HuginBase::PanoramaOptions::FileFormat""'");
  } 
  arg2 = static_cast< HuginBase::PanoramaOptions::FileFormat >(val2);
  if (arg1) (arg1)->outputFormat = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputFormat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions::FileFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputFormat_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputFormat_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (HuginBase::PanoramaOptions::FileFormat) ((arg1)->outputFormat);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_quality_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_quality_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_quality_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_quality_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->quality = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_quality_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_quality_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_quality_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (int) ((arg1)->quality);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_tiffCompression_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_tiffCompression_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_tiffCompression_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_tiffCompression_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_tiffCompression_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->tiffCompression = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_tiffCompression_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_tiffCompression_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_tiffCompression_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->tiffCompression);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_tiff_saveROI_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_tiff_saveROI_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_tiff_saveROI_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_tiff_saveROI_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->tiff_saveROI = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_tiff_saveROI_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_tiff_saveROI_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_tiff_saveROI_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->tiff_saveROI);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_colorCorrection_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  HuginBase::PanoramaOptions::ColorCorrection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_colorCorrection_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_colorCorrection_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_colorCorrection_set" "', argument " "2"" of type '" "HuginBase::PanoramaOptions::ColorCorrection""'");
  } 
  arg2 = static_cast< HuginBase::PanoramaOptions::ColorCorrection >(val2);
  if (arg1) (arg1)->colorCorrection = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_colorCorrection_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions::ColorCorrection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_colorCorrection_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_colorCorrection_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (HuginBase::PanoramaOptions::ColorCorrection) ((arg1)->colorCorrection);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_colorReferenceImage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_colorReferenceImage_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_colorReferenceImage_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_colorReferenceImage_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->colorReferenceImage = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_colorReferenceImage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_colorReferenceImage_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_colorReferenceImage_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (unsigned int) ((arg1)->colorReferenceImage);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_gamma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_gamma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_gamma_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_gamma_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->gamma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_gamma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_gamma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_gamma_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (double) ((arg1)->gamma);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_interpolator_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  vigra_ext::Interpolator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_interpolator_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_interpolator_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra_ext__Interpolator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_interpolator_set" "', argument " "2"" of type '" "vigra_ext::Interpolator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_interpolator_set" "', argument " "2"" of type '" "vigra_ext::Interpolator""'");
    } else {
      vigra_ext::Interpolator * temp = reinterpret_cast< vigra_ext::Interpolator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->interpolator = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_interpolator_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vigra_ext::Interpolator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_interpolator_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_interpolator_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result =  ((arg1)->interpolator);
  resultobj = SWIG_NewPointerObj((new vigra_ext::Interpolator(static_cast< const vigra_ext::Interpolator& >(result))), SWIGTYPE_p_vigra_ext__Interpolator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_optimizeReferenceImage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_optimizeReferenceImage_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_optimizeReferenceImage_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_optimizeReferenceImage_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->optimizeReferenceImage = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_optimizeReferenceImage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_optimizeReferenceImage_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_optimizeReferenceImage_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (unsigned int) ((arg1)->optimizeReferenceImage);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_featherWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_featherWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_featherWidth_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_featherWidth_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->featherWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_featherWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_featherWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_featherWidth_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (unsigned int) ((arg1)->featherWidth);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_remapAcceleration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  HuginBase::PanoramaOptions::PTStitcherAcceleration arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_remapAcceleration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_remapAcceleration_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_remapAcceleration_set" "', argument " "2"" of type '" "HuginBase::PanoramaOptions::PTStitcherAcceleration""'");
  } 
  arg2 = static_cast< HuginBase::PanoramaOptions::PTStitcherAcceleration >(val2);
  if (arg1) (arg1)->remapAcceleration = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_remapAcceleration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions::PTStitcherAcceleration result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_remapAcceleration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_remapAcceleration_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (HuginBase::PanoramaOptions::PTStitcherAcceleration) ((arg1)->remapAcceleration);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_blendMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  HuginBase::PanoramaOptions::BlendingMechanism arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_blendMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_blendMode_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_blendMode_set" "', argument " "2"" of type '" "HuginBase::PanoramaOptions::BlendingMechanism""'");
  } 
  arg2 = static_cast< HuginBase::PanoramaOptions::BlendingMechanism >(val2);
  if (arg1) (arg1)->blendMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_blendMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions::BlendingMechanism result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_blendMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_blendMode_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (HuginBase::PanoramaOptions::BlendingMechanism) ((arg1)->blendMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_hdrMergeMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  HuginBase::PanoramaOptions::HDRMergeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_hdrMergeMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_hdrMergeMode_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_hdrMergeMode_set" "', argument " "2"" of type '" "HuginBase::PanoramaOptions::HDRMergeType""'");
  } 
  arg2 = static_cast< HuginBase::PanoramaOptions::HDRMergeType >(val2);
  if (arg1) (arg1)->hdrMergeMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_hdrMergeMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions::HDRMergeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_hdrMergeMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_hdrMergeMode_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (HuginBase::PanoramaOptions::HDRMergeType) ((arg1)->hdrMergeMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_remapper_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  HuginBase::PanoramaOptions::Remapper arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_remapper_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_remapper_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_remapper_set" "', argument " "2"" of type '" "HuginBase::PanoramaOptions::Remapper""'");
  } 
  arg2 = static_cast< HuginBase::PanoramaOptions::Remapper >(val2);
  if (arg1) (arg1)->remapper = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_remapper_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions::Remapper result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_remapper_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_remapper_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (HuginBase::PanoramaOptions::Remapper) ((arg1)->remapper);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_remapUsingGPU_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_remapUsingGPU_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_remapUsingGPU_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_remapUsingGPU_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->remapUsingGPU = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_remapUsingGPU_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_remapUsingGPU_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_remapUsingGPU_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->remapUsingGPU);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_saveCoordImgs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_saveCoordImgs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_saveCoordImgs_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_saveCoordImgs_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->saveCoordImgs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_saveCoordImgs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_saveCoordImgs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_saveCoordImgs_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->saveCoordImgs);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_huberSigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_huberSigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_huberSigma_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_huberSigma_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->huberSigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_huberSigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_huberSigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_huberSigma_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (double) ((arg1)->huberSigma);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_photometricHuberSigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_photometricHuberSigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_photometricHuberSigma_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_photometricHuberSigma_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->photometricHuberSigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_photometricHuberSigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_photometricHuberSigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_photometricHuberSigma_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (double) ((arg1)->photometricHuberSigma);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_photometricSymmetricError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_photometricSymmetricError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_photometricSymmetricError_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_photometricSymmetricError_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->photometricSymmetricError = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_photometricSymmetricError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_photometricSymmetricError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_photometricSymmetricError_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (double) ((arg1)->photometricSymmetricError);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  HuginBase::PanoramaOptions::OutputMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputMode_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputMode_set" "', argument " "2"" of type '" "HuginBase::PanoramaOptions::OutputMode""'");
  } 
  arg2 = static_cast< HuginBase::PanoramaOptions::OutputMode >(val2);
  if (arg1) (arg1)->outputMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions::OutputMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputMode_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (HuginBase::PanoramaOptions::OutputMode) ((arg1)->outputMode);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRBlended_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputLDRBlended_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRBlended_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputLDRBlended_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outputLDRBlended = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRBlended_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputLDRBlended_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRBlended_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->outputLDRBlended);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRLayers_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputLDRLayers_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRLayers_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputLDRLayers_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outputLDRLayers = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRLayers_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputLDRLayers_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRLayers_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->outputLDRLayers);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRExposureRemapped_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputLDRExposureRemapped_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRExposureRemapped_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputLDRExposureRemapped_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outputLDRExposureRemapped = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRExposureRemapped_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputLDRExposureRemapped_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRExposureRemapped_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->outputLDRExposureRemapped);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRExposureLayers_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputLDRExposureLayers_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRExposureLayers_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputLDRExposureLayers_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outputLDRExposureLayers = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRExposureLayers_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputLDRExposureLayers_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRExposureLayers_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->outputLDRExposureLayers);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRExposureLayersFused_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputLDRExposureLayersFused_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRExposureLayersFused_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputLDRExposureLayersFused_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outputLDRExposureLayersFused = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRExposureLayersFused_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputLDRExposureLayersFused_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRExposureLayersFused_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->outputLDRExposureLayersFused);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRExposureBlended_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputLDRExposureBlended_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRExposureBlended_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputLDRExposureBlended_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outputLDRExposureBlended = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLDRExposureBlended_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputLDRExposureBlended_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLDRExposureBlended_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->outputLDRExposureBlended);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputHDRBlended_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputHDRBlended_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputHDRBlended_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputHDRBlended_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outputHDRBlended = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputHDRBlended_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputHDRBlended_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputHDRBlended_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->outputHDRBlended);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputHDRLayers_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputHDRLayers_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputHDRLayers_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputHDRLayers_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outputHDRLayers = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputHDRLayers_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputHDRLayers_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputHDRLayers_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->outputHDRLayers);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputHDRStacks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputHDRStacks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputHDRStacks_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputHDRStacks_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->outputHDRStacks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputHDRStacks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputHDRStacks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputHDRStacks_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (bool) ((arg1)->outputHDRStacks);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLayersCompression_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputLayersCompression_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLayersCompression_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_outputLayersCompression_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_outputLayersCompression_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->outputLayersCompression = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputLayersCompression_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputLayersCompression_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputLayersCompression_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->outputLayersCompression);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputImageType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputImageType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputImageType_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_outputImageType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_outputImageType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->outputImageType = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputImageType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputImageType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputImageType_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->outputImageType);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputImageTypeCompression_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputImageTypeCompression_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputImageTypeCompression_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_outputImageTypeCompression_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_outputImageTypeCompression_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->outputImageTypeCompression = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputImageTypeCompression_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputImageTypeCompression_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputImageTypeCompression_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->outputImageTypeCompression);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputImageTypeHDR_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputImageTypeHDR_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputImageTypeHDR_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_outputImageTypeHDR_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_outputImageTypeHDR_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->outputImageTypeHDR = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputImageTypeHDR_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputImageTypeHDR_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputImageTypeHDR_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->outputImageTypeHDR);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputImageTypeHDRCompression_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputImageTypeHDRCompression_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputImageTypeHDRCompression_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_outputImageTypeHDRCompression_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_outputImageTypeHDRCompression_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->outputImageTypeHDRCompression = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputImageTypeHDRCompression_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputImageTypeHDRCompression_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputImageTypeHDRCompression_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->outputImageTypeHDRCompression);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_enblendOptions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_enblendOptions_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_enblendOptions_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_enblendOptions_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_enblendOptions_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->enblendOptions = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_enblendOptions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_enblendOptions_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_enblendOptions_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->enblendOptions);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_enfuseOptions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_enfuseOptions_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_enfuseOptions_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_enfuseOptions_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_enfuseOptions_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->enfuseOptions = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_enfuseOptions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_enfuseOptions_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_enfuseOptions_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->enfuseOptions);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_hdrmergeOptions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_hdrmergeOptions_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_hdrmergeOptions_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_hdrmergeOptions_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_hdrmergeOptions_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->hdrmergeOptions = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_hdrmergeOptions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_hdrmergeOptions_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_hdrmergeOptions_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->hdrmergeOptions);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputExposureValue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputExposureValue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputExposureValue_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PanoramaOptions_outputExposureValue_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->outputExposureValue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputExposureValue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputExposureValue_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputExposureValue_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (double) ((arg1)->outputExposureValue);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputEMoRParams_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = (std::vector< float,std::allocator< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputEMoRParams_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputEMoRParams_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_outputEMoRParams_set" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< float,std::allocator< float > > * >(argp2);
  if (arg1) (arg1)->outputEMoRParams = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputEMoRParams_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputEMoRParams_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputEMoRParams_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::vector< float,std::allocator< float > > *)& ((arg1)->outputEMoRParams);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputPixelType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_outputPixelType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputPixelType_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_outputPixelType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_outputPixelType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->outputPixelType = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_outputPixelType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_outputPixelType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_outputPixelType_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result = (std::string *) & ((arg1)->outputPixelType);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_m_projFeatures_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  pano_projection_features arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PanoramaOptions_m_projFeatures_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_m_projFeatures_set" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pano_projection_features,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaOptions_m_projFeatures_set" "', argument " "2"" of type '" "pano_projection_features""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaOptions_m_projFeatures_set" "', argument " "2"" of type '" "pano_projection_features""'");
    } else {
      pano_projection_features * temp = reinterpret_cast< pano_projection_features * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->m_projFeatures = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaOptions_m_projFeatures_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaOptions *arg1 = (HuginBase::PanoramaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pano_projection_features result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaOptions_m_projFeatures_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaOptions_m_projFeatures_get" "', argument " "1"" of type '" "HuginBase::PanoramaOptions *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp1);
  result =  ((arg1)->m_projFeatures);
  resultobj = SWIG_NewPointerObj((new pano_projection_features(static_cast< const pano_projection_features& >(result))), SWIGTYPE_p_pano_projection_features, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PanoramaOptions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PanoramaOptions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PanoramaMemento__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaMemento *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PanoramaMemento")) SWIG_fail;
  result = (HuginBase::PanoramaMemento *)new HuginBase::PanoramaMemento();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaMemento, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PanoramaMemento__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaMemento *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaMemento *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PanoramaMemento",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaMemento,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PanoramaMemento" "', argument " "1"" of type '" "HuginBase::PanoramaMemento const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMemento" "', argument " "1"" of type '" "HuginBase::PanoramaMemento const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaMemento * >(argp1);
  result = (HuginBase::PanoramaMemento *)new HuginBase::PanoramaMemento((HuginBase::PanoramaMemento const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaMemento, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PanoramaMemento(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PanoramaMemento__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__PanoramaMemento, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PanoramaMemento__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PanoramaMemento'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::PanoramaMemento()\n"
    "    HuginBase::PanoramaMemento(HuginBase::PanoramaMemento const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PanoramaMemento(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaMemento *arg1 = (HuginBase::PanoramaMemento *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PanoramaMemento",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaMemento, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PanoramaMemento" "', argument " "1"" of type '" "HuginBase::PanoramaMemento *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaMemento * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PanoramaMemento_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PanoramaMemento, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Panorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Panorama")) SWIG_fail;
  result = (HuginBase::Panorama *)new HuginBase::Panorama();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__Panorama, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Panorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Panorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Panorama" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getSubset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::Panorama result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_getSubset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getSubset" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_getSubset" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_getSubset" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((HuginBase::Panorama const *)arg1)->getSubset((HuginBase::UIntSet const &)*arg2);
  resultobj = SWIG_NewPointerObj((new HuginBase::Panorama(static_cast< const HuginBase::Panorama& >(result))), SWIGTYPE_p_HuginBase__Panorama, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_duplicate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::Panorama result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_duplicate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_duplicate" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = ((HuginBase::Panorama const *)arg1)->duplicate();
  resultobj = SWIG_NewPointerObj((new HuginBase::Panorama(static_cast< const HuginBase::Panorama& >(result))), SWIGTYPE_p_HuginBase__Panorama, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getNewSubset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::PanoramaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_getNewSubset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getNewSubset" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_getNewSubset" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_getNewSubset" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg2 = ptr;
  }
  result = (HuginBase::PanoramaData *)((HuginBase::Panorama const *)arg1)->getNewSubset((HuginBase::UIntSet const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getNewCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getNewCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getNewCopy" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = (HuginBase::PanoramaData *)((HuginBase::Panorama const *)arg1)->getNewCopy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getNrOfImages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getNrOfImages",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getNrOfImages" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = ((HuginBase::Panorama const *)arg1)->getNrOfImages();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::SrcPanoImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_getImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getImage" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_getImage" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  result = (HuginBase::SrcPanoImage *) &((HuginBase::Panorama const *)arg1)->getImage(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__SrcPanoImage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::size_t arg2 ;
  HuginBase::SrcPanoImage arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_setImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setImage" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_setImage" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__SrcPanoImage,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_setImage" "', argument " "3"" of type '" "HuginBase::SrcPanoImage""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_setImage" "', argument " "3"" of type '" "HuginBase::SrcPanoImage""'");
    } else {
      HuginBase::SrcPanoImage * temp = reinterpret_cast< HuginBase::SrcPanoImage * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->setImage(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_addImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::SrcPanoImage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_addImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_addImage" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__SrcPanoImage,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_addImage" "', argument " "2"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_addImage" "', argument " "2"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp2);
  result = (unsigned int)(arg1)->addImage((HuginBase::SrcPanoImage const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_mergePanorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::Panorama *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_mergePanorama",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_mergePanorama" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__Panorama,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_mergePanorama" "', argument " "2"" of type '" "HuginBase::Panorama const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_mergePanorama" "', argument " "2"" of type '" "HuginBase::Panorama const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::Panorama * >(argp2);
  (arg1)->mergePanorama((HuginBase::Panorama const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_removeImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_removeImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_removeImage" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_removeImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->removeImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_swapImages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_swapImages",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_swapImages" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_swapImages" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Panorama_swapImages" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->swapImages(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getSrcImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::SrcPanoImage result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_getSrcImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getSrcImage" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_getSrcImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((HuginBase::Panorama const *)arg1)->getSrcImage(arg2);
  resultobj = SWIG_NewPointerObj((new HuginBase::SrcPanoImage(static_cast< const HuginBase::SrcPanoImage& >(result))), SWIGTYPE_p_HuginBase__SrcPanoImage, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setSrcImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  HuginBase::SrcPanoImage *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_setSrcImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setSrcImage" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_setSrcImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__SrcPanoImage,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_setSrcImage" "', argument " "3"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_setSrcImage" "', argument " "3"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp3);
  (arg1)->setSrcImage(arg2,(HuginBase::SrcPanoImage const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setImageFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_setImageFilename",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setImageFilename" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_setImageFilename" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_setImageFilename" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_setImageFilename" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->setImageFilename(arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setImageOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  ImageOptions *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_setImageOptions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setImageOptions" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_setImageOptions" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ImageOptions,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_setImageOptions" "', argument " "3"" of type '" "ImageOptions const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_setImageOptions" "', argument " "3"" of type '" "ImageOptions const &""'"); 
  }
  arg3 = reinterpret_cast< ImageOptions * >(argp3);
  (arg1)->setImageOptions(arg2,(ImageOptions const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_activateImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_activateImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_activateImage" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_activateImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Panorama_activateImage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->activateImage(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_activateImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_activateImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_activateImage" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_activateImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->activateImage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_activateImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Panorama_activateImage__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Panorama_activateImage__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Panorama_activateImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    activateImage(HuginBase::Panorama *,unsigned int,bool)\n"
    "    activateImage(HuginBase::Panorama *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getActiveImages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getActiveImages",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getActiveImages" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = ((HuginBase::Panorama const *)arg1)->getActiveImages();
  resultobj = swig::from(static_cast< std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getNrOfCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getNrOfCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getNrOfCtrlPoints" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = ((HuginBase::Panorama const *)arg1)->getNrOfCtrlPoints();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getCtrlPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::ControlPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_getCtrlPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getCtrlPoint" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_getCtrlPoint" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  result = (HuginBase::ControlPoint *) &((HuginBase::Panorama const *)arg1)->getCtrlPoint(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__ControlPoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CPVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getCtrlPoints" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = (HuginBase::CPVector *) &((HuginBase::Panorama const *)arg1)->getCtrlPoints();
  resultobj = swig::from(static_cast< std::vector<ControlPoint,std::allocator< ControlPoint > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getCtrlPointsForImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_getCtrlPointsForImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getCtrlPointsForImage" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_getCtrlPointsForImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((HuginBase::Panorama const *)arg1)->getCtrlPointsForImage(arg2);
  resultobj = swig::from(static_cast< std::vector<unsigned int,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getCtrlPointsVectorForImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_getCtrlPointsVectorForImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getCtrlPointsVectorForImage" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_getCtrlPointsVectorForImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((HuginBase::Panorama const *)arg1)->getCtrlPointsVectorForImage(arg2);
  resultobj = swig::from(static_cast< std::vector<std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::CPVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_setCtrlPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setCtrlPoints" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::vector<ControlPoint,std::allocator< ControlPoint > > *ptr = (std::vector<ControlPoint,std::allocator< ControlPoint > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_setCtrlPoints" "', argument " "2"" of type '" "HuginBase::CPVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_setCtrlPoints" "', argument " "2"" of type '" "HuginBase::CPVector const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setCtrlPoints((HuginBase::CPVector const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_addCtrlPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::ControlPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_addCtrlPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_addCtrlPoint" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__ControlPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_addCtrlPoint" "', argument " "2"" of type '" "HuginBase::ControlPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_addCtrlPoint" "', argument " "2"" of type '" "HuginBase::ControlPoint const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::ControlPoint * >(argp2);
  result = (unsigned int)(arg1)->addCtrlPoint((HuginBase::ControlPoint const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_removeCtrlPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_removeCtrlPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_removeCtrlPoint" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_removeCtrlPoint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->removeCtrlPoint(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_removeDuplicateCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_removeDuplicateCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_removeDuplicateCtrlPoints" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  (arg1)->removeDuplicateCtrlPoints();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_changeControlPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  HuginBase::ControlPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_changeControlPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_changeControlPoint" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_changeControlPoint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__ControlPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_changeControlPoint" "', argument " "3"" of type '" "HuginBase::ControlPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_changeControlPoint" "', argument " "3"" of type '" "HuginBase::ControlPoint const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::ControlPoint * >(argp3);
  (arg1)->changeControlPoint(arg2,(HuginBase::ControlPoint const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getNextCPTypeLineNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getNextCPTypeLineNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getNextCPTypeLineNumber" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = (int)((HuginBase::Panorama const *)arg1)->getNextCPTypeLineNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateLineCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_updateLineCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateLineCtrlPoints" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  (arg1)->updateLineCtrlPoints();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateCtrlPointErrors__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::CPVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_updateCtrlPointErrors",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateCtrlPointErrors" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::vector<ControlPoint,std::allocator< ControlPoint > > *ptr = (std::vector<ControlPoint,std::allocator< ControlPoint > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_updateCtrlPointErrors" "', argument " "2"" of type '" "HuginBase::CPVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_updateCtrlPointErrors" "', argument " "2"" of type '" "HuginBase::CPVector const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->updateCtrlPointErrors((HuginBase::CPVector const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateCtrlPointErrors__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  HuginBase::CPVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_updateCtrlPointErrors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateCtrlPointErrors" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_updateCtrlPointErrors" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_updateCtrlPointErrors" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<ControlPoint,std::allocator< ControlPoint > > *ptr = (std::vector<ControlPoint,std::allocator< ControlPoint > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_updateCtrlPointErrors" "', argument " "3"" of type '" "HuginBase::CPVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_updateCtrlPointErrors" "', argument " "3"" of type '" "HuginBase::CPVector const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->updateCtrlPointErrors((HuginBase::UIntSet const &)*arg2,(HuginBase::CPVector const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateCtrlPointErrors(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Panorama_updateCtrlPointErrors__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<ControlPoint,std::allocator< ControlPoint > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Panorama_updateCtrlPointErrors__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Panorama_updateCtrlPointErrors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    updateCtrlPointErrors(HuginBase::Panorama *,HuginBase::CPVector const &)\n"
    "    updateCtrlPointErrors(HuginBase::Panorama *,HuginBase::UIntSet const &,HuginBase::CPVector const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getVariables",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getVariables" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = ((HuginBase::Panorama const *)arg1)->getVariables();
  resultobj = swig::from(static_cast< std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getImageVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_getImageVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getImageVariables" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_getImageVariables" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((HuginBase::Panorama const *)arg1)->getImageVariables(arg2);
  resultobj = swig::from(static_cast< std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateVariables__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::VariableMapVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_updateVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateVariables" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *ptr = (std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_updateVariables" "', argument " "2"" of type '" "HuginBase::VariableMapVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_updateVariables" "', argument " "2"" of type '" "HuginBase::VariableMapVector const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->updateVariables((HuginBase::VariableMapVector const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateVariables__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  HuginBase::VariableMapVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_updateVariables",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateVariables" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_updateVariables" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_updateVariables" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *ptr = (std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_updateVariables" "', argument " "3"" of type '" "HuginBase::VariableMapVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_updateVariables" "', argument " "3"" of type '" "HuginBase::VariableMapVector const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->updateVariables((HuginBase::UIntSet const &)*arg2,(HuginBase::VariableMapVector const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateVariables__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  HuginBase::VariableMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_updateVariables",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateVariables" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_updateVariables" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_updateVariables" "', argument " "3"" of type '" "HuginBase::VariableMap const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_updateVariables" "', argument " "3"" of type '" "HuginBase::VariableMap const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->updateVariables(arg2,(HuginBase::VariableMap const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateVariables(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Panorama_updateVariables__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Panorama_updateVariables__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Panorama_updateVariables__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Panorama_updateVariables'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    updateVariables(HuginBase::Panorama *,HuginBase::VariableMapVector const &)\n"
    "    updateVariables(HuginBase::Panorama *,HuginBase::UIntSet const &,HuginBase::VariableMapVector const &)\n"
    "    updateVariables(HuginBase::Panorama *,unsigned int,HuginBase::VariableMap const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  HuginBase::Variable *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_updateVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateVariable" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_updateVariable" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__Variable,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_updateVariable" "', argument " "3"" of type '" "HuginBase::Variable const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_updateVariable" "', argument " "3"" of type '" "HuginBase::Variable const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::Variable * >(argp3);
  (arg1)->updateVariable(arg2,(HuginBase::Variable const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_UpdateFocalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_UpdateFocalLength",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_UpdateFocalLength" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Panorama_UpdateFocalLength" "', argument " "2"" of type '" "HuginBase::UIntSet""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Panorama_UpdateFocalLength" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->UpdateFocalLength(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_UpdateCropFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_UpdateCropFactor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_UpdateCropFactor" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Panorama_UpdateCropFactor" "', argument " "2"" of type '" "HuginBase::UIntSet""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Panorama_UpdateCropFactor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->UpdateCropFactor(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getOptimizeVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::OptimizeVector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getOptimizeVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getOptimizeVector" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = (HuginBase::OptimizeVector *) &((HuginBase::Panorama const *)arg1)->getOptimizeVector();
  resultobj = swig::from(static_cast< std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setOptimizeVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::OptimizeVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_setOptimizeVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setOptimizeVector" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *ptr = (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_setOptimizeVector" "', argument " "2"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_setOptimizeVector" "', argument " "2"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setOptimizeVector((HuginBase::OptimizeVector const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaOptions *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getOptions" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = (HuginBase::PanoramaOptions *) &((HuginBase::Panorama const *)arg1)->getOptions();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaOptions, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::PanoramaOptions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_setOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setOptions" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_setOptions" "', argument " "2"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_setOptions" "', argument " "2"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp2);
  (arg1)->setOptions((HuginBase::PanoramaOptions const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_parseOptimizerScript(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::istream *arg2 = 0 ;
  HuginBase::UIntSet *arg3 = 0 ;
  HuginBase::VariableMapVector *arg4 = 0 ;
  HuginBase::CPVector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Panorama_parseOptimizerScript",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_parseOptimizerScript" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_parseOptimizerScript" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_parseOptimizerScript" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_parseOptimizerScript" "', argument " "3"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_parseOptimizerScript" "', argument " "3"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Panorama_parseOptimizerScript" "', argument " "4"" of type '" "HuginBase::VariableMapVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_parseOptimizerScript" "', argument " "4"" of type '" "HuginBase::VariableMapVector &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::VariableMapVector * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Panorama_parseOptimizerScript" "', argument " "5"" of type '" "HuginBase::CPVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_parseOptimizerScript" "', argument " "5"" of type '" "HuginBase::CPVector &""'"); 
  }
  arg5 = reinterpret_cast< HuginBase::CPVector * >(argp5);
  ((HuginBase::Panorama const *)arg1)->parseOptimizerScript(*arg2,(HuginBase::UIntSet const &)*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_printPanoramaScript__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::ostream *arg2 = 0 ;
  HuginBase::OptimizeVector *arg3 = 0 ;
  HuginBase::PanoramaOptions *arg4 = 0 ;
  HuginBase::UIntSet *arg5 = 0 ;
  bool arg6 ;
  std::string *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  bool val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Panorama_printPanoramaScript",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_printPanoramaScript" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_printPanoramaScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printPanoramaScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *ptr = (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_printPanoramaScript" "', argument " "3"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printPanoramaScript" "', argument " "3"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Panorama_printPanoramaScript" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printPanoramaScript" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp4);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Panorama_printPanoramaScript" "', argument " "5"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printPanoramaScript" "', argument " "5"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Panorama_printPanoramaScript" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Panorama_printPanoramaScript" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printPanoramaScript" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  ((HuginBase::Panorama const *)arg1)->printPanoramaScript(*arg2,(HuginBase::OptimizeVector const &)*arg3,(HuginBase::PanoramaOptions const &)*arg4,(HuginBase::UIntSet const &)*arg5,arg6,(std::string const &)*arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_printPanoramaScript__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::ostream *arg2 = 0 ;
  HuginBase::OptimizeVector *arg3 = 0 ;
  HuginBase::PanoramaOptions *arg4 = 0 ;
  HuginBase::UIntSet *arg5 = 0 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Panorama_printPanoramaScript",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_printPanoramaScript" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_printPanoramaScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printPanoramaScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *ptr = (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_printPanoramaScript" "', argument " "3"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printPanoramaScript" "', argument " "3"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Panorama_printPanoramaScript" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printPanoramaScript" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp4);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Panorama_printPanoramaScript" "', argument " "5"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printPanoramaScript" "', argument " "5"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Panorama_printPanoramaScript" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ((HuginBase::Panorama const *)arg1)->printPanoramaScript(*arg2,(HuginBase::OptimizeVector const &)*arg3,(HuginBase::PanoramaOptions const &)*arg4,(HuginBase::UIntSet const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_printPanoramaScript(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Panorama_printPanoramaScript__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_Panorama_printPanoramaScript__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Panorama_printPanoramaScript'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    printPanoramaScript(HuginBase::Panorama const *,std::ostream &,HuginBase::OptimizeVector const &,HuginBase::PanoramaOptions const &,HuginBase::UIntSet const &,bool,std::string const &)\n"
    "    printPanoramaScript(HuginBase::Panorama const *,std::ostream &,HuginBase::OptimizeVector const &,HuginBase::PanoramaOptions const &,HuginBase::UIntSet const &,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_printStitcherScript(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::ostream *arg2 = 0 ;
  HuginBase::PanoramaOptions *arg3 = 0 ;
  HuginBase::UIntSet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Panorama_printStitcherScript",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_printStitcherScript" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_printStitcherScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printStitcherScript" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_printStitcherScript" "', argument " "3"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printStitcherScript" "', argument " "3"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp3);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Panorama_printStitcherScript" "', argument " "4"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_printStitcherScript" "', argument " "4"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg4 = ptr;
  }
  ((HuginBase::Panorama const *)arg1)->printStitcherScript(*arg2,(HuginBase::PanoramaOptions const &)*arg3,(HuginBase::UIntSet const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_addObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::PanoramaObserver *arg2 = (HuginBase::PanoramaObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_addObserver",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_addObserver" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__PanoramaObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_addObserver" "', argument " "2"" of type '" "HuginBase::PanoramaObserver *""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaObserver * >(argp2);
  (arg1)->addObserver(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_removeObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::PanoramaObserver *arg2 = (HuginBase::PanoramaObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_removeObserver",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_removeObserver" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__PanoramaObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_removeObserver" "', argument " "2"" of type '" "HuginBase::PanoramaObserver *""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaObserver * >(argp2);
  result = (bool)(arg1)->removeObserver(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_clearObservers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_clearObservers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_clearObservers" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  (arg1)->clearObservers();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_changeFinished__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_changeFinished",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_changeFinished" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_changeFinished" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->changeFinished(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_changeFinished__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_changeFinished",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_changeFinished" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  (arg1)->changeFinished();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_changeFinished(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Panorama_changeFinished__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Panorama_changeFinished__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Panorama_changeFinished'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    changeFinished(HuginBase::Panorama *,bool)\n"
    "    changeFinished(HuginBase::Panorama *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_imageChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_imageChanged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_imageChanged" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_imageChanged" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->imageChanged(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateMasksForImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  unsigned int arg2 ;
  MaskPolygonVector arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_updateMasksForImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateMasksForImage" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_updateMasksForImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_MaskPolygonVector,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Panorama_updateMasksForImage" "', argument " "3"" of type '" "MaskPolygonVector""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_updateMasksForImage" "', argument " "3"" of type '" "MaskPolygonVector""'");
    } else {
      MaskPolygonVector * temp = reinterpret_cast< MaskPolygonVector * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->updateMasksForImage(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateMasks__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_updateMasks",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateMasks" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_updateMasks" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->updateMasks(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateMasks__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_updateMasks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_updateMasks" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  (arg1)->updateMasks();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_updateMasks(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Panorama_updateMasks__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Panorama_updateMasks__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Panorama_updateMasks'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    updateMasks(HuginBase::Panorama *,bool)\n"
    "    updateMasks(HuginBase::Panorama *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_transferMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  MaskPolygon arg2 ;
  unsigned int arg3 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Panorama_transferMask",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_transferMask" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_MaskPolygon,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_transferMask" "', argument " "2"" of type '" "MaskPolygon""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_transferMask" "', argument " "2"" of type '" "MaskPolygon""'");
    } else {
      MaskPolygon * temp = reinterpret_cast< MaskPolygon * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Panorama_transferMask" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Panorama_transferMask" "', argument " "4"" of type '" "HuginBase::UIntSet const""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->transferMask(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getNewMemento(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaDataMemento *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getNewMemento",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getNewMemento" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = (HuginBase::PanoramaDataMemento *)((HuginBase::Panorama const *)arg1)->getNewMemento();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaDataMemento, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setMementoToCopyOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::PanoramaDataMemento *arg2 = (HuginBase::PanoramaDataMemento *) (HuginBase::PanoramaDataMemento *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_setMementoToCopyOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setMementoToCopyOf" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_HuginBase__PanoramaDataMemento, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_setMementoToCopyOf" "', argument " "2"" of type '" "HuginBase::PanoramaDataMemento const *const""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaDataMemento * >(argp2);
  result = (bool)(arg1)->setMementoToCopyOf((HuginBase::PanoramaDataMemento const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_getMemento(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PanoramaMemento result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_getMemento",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_getMemento" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = ((HuginBase::Panorama const *)arg1)->getMemento();
  resultobj = SWIG_NewPointerObj((new HuginBase::PanoramaMemento(static_cast< const HuginBase::PanoramaMemento& >(result))), SWIGTYPE_p_HuginBase__PanoramaMemento, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setMemento(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  HuginBase::PanoramaMemento *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_setMemento",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setMemento" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaMemento,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_setMemento" "', argument " "2"" of type '" "HuginBase::PanoramaMemento const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_setMemento" "', argument " "2"" of type '" "HuginBase::PanoramaMemento const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaMemento * >(argp2);
  (arg1)->setMemento((HuginBase::PanoramaMemento const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_needsOptimization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_needsOptimization",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_needsOptimization" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = (bool)(arg1)->needsOptimization();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_markAsOptimized__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_markAsOptimized",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_markAsOptimized" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Panorama_markAsOptimized" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->markAsOptimized(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_markAsOptimized__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_markAsOptimized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_markAsOptimized" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  (arg1)->markAsOptimized();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_markAsOptimized(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Panorama_markAsOptimized__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Panorama_markAsOptimized__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Panorama_markAsOptimized'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    markAsOptimized(HuginBase::Panorama *,bool)\n"
    "    markAsOptimized(HuginBase::Panorama *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_readData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::istream *arg2 = 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  AppBase::DocumentData::ReadWriteError result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_readData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_readData" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_readData" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_readData" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Panorama_readData" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (AppBase::DocumentData::ReadWriteError)(arg1)->readData(*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_readData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  AppBase::DocumentData::ReadWriteError result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_readData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_readData" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_readData" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_readData" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  result = (AppBase::DocumentData::ReadWriteError)(arg1)->readData(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_readData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__istream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Panorama_readData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__istream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Panorama_readData__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Panorama_readData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    readData(HuginBase::Panorama *,std::istream &,std::string)\n"
    "    readData(HuginBase::Panorama *,std::istream &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_writeData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::ostream *arg2 = 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  AppBase::DocumentData::ReadWriteError result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Panorama_writeData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_writeData" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_writeData" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_writeData" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Panorama_writeData" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (AppBase::DocumentData::ReadWriteError)(arg1)->writeData(*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_writeData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  AppBase::DocumentData::ReadWriteError result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_writeData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_writeData" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Panorama_writeData" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Panorama_writeData" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (AppBase::DocumentData::ReadWriteError)(arg1)->writeData(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_writeData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Panorama_writeData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Panorama_writeData__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Panorama_writeData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    writeData(HuginBase::Panorama *,std::ostream &,std::string)\n"
    "    writeData(HuginBase::Panorama *,std::ostream &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_isDirty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_isDirty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_isDirty" "', argument " "1"" of type '" "HuginBase::Panorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  result = (bool)((HuginBase::Panorama const *)arg1)->isDirty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_clearDirty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_clearDirty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_clearDirty" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  (arg1)->clearDirty();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_setFilePrefix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Panorama_setFilePrefix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_setFilePrefix" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Panorama_setFilePrefix" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->setFilePrefix(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panorama_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Panorama_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panorama_reset" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Panorama_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__Panorama, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_calcCtrlPointErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:calcCtrlPointErrors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcCtrlPointErrors" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "calcCtrlPointErrors" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  HuginBase::PTools::calcCtrlPointErrors(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Transform")) SWIG_fail;
  result = (HuginBase::PTools::Transform *)new HuginBase::PTools::Transform();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PTools__Transform, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Transform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transform" "', argument " "1"" of type '" "HuginBase::PTools::Transform *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createTransform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  vigra::Diff2D *arg2 = 0 ;
  SwigValueWrapper< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > arg3 ;
  HuginBase::Lens::LensProjectionFormat arg4 ;
  vigra::Diff2D *arg5 = 0 ;
  HuginBase::PanoramaOptions::ProjectionFormat arg6 ;
  std::vector< double,std::allocator< double > > *arg7 = 0 ;
  double arg8 ;
  vigra::Diff2D *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Transform_createTransform",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_createTransform" "', argument " "1"" of type '" "HuginBase::PTools::Transform *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_createTransform" "', argument " "2"" of type '" "vigra::Diff2D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "2"" of type '" "vigra::Diff2D const &""'"); 
  }
  arg2 = reinterpret_cast< vigra::Diff2D * >(argp2);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Transform_createTransform" "', argument " "3"" of type '" "HuginBase::VariableMap""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transform_createTransform" "', argument " "4"" of type '" "HuginBase::Lens::LensProjectionFormat""'");
  } 
  arg4 = static_cast< HuginBase::Lens::LensProjectionFormat >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Transform_createTransform" "', argument " "5"" of type '" "vigra::Diff2D const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "5"" of type '" "vigra::Diff2D const &""'"); 
  }
  arg5 = reinterpret_cast< vigra::Diff2D * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Transform_createTransform" "', argument " "6"" of type '" "HuginBase::PanoramaOptions::ProjectionFormat""'");
  } 
  arg6 = static_cast< HuginBase::PanoramaOptions::ProjectionFormat >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Transform_createTransform" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg7 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Transform_createTransform" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Transform_createTransform" "', argument " "9"" of type '" "vigra::Diff2D const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "9"" of type '" "vigra::Diff2D const &""'"); 
  }
  arg9 = reinterpret_cast< vigra::Diff2D * >(argp9);
  (arg1)->createTransform((vigra::Diff2D const &)*arg2,arg3,arg4,(vigra::Diff2D const &)*arg5,arg6,(std::vector< double,std::allocator< double > > const &)*arg7,arg8,(vigra::Diff2D const &)*arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createTransform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  HuginBase::PanoramaData *arg2 = 0 ;
  unsigned int arg3 ;
  HuginBase::PanoramaOptions *arg4 = 0 ;
  vigra::Diff2D arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Transform_createTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_createTransform" "', argument " "1"" of type '" "HuginBase::PTools::Transform *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_createTransform" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaData * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_createTransform" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Transform_createTransform" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Transform_createTransform" "', argument " "5"" of type '" "vigra::Diff2D""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "5"" of type '" "vigra::Diff2D""'");
    } else {
      vigra::Diff2D * temp = reinterpret_cast< vigra::Diff2D * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  (arg1)->createTransform((HuginBase::PanoramaData const &)*arg2,arg3,(HuginBase::PanoramaOptions const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createTransform__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  HuginBase::PanoramaData *arg2 = 0 ;
  unsigned int arg3 ;
  HuginBase::PanoramaOptions *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Transform_createTransform",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_createTransform" "', argument " "1"" of type '" "HuginBase::PTools::Transform *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_createTransform" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaData * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_createTransform" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Transform_createTransform" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp4);
  (arg1)->createTransform((HuginBase::PanoramaData const &)*arg2,arg3,(HuginBase::PanoramaOptions const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createTransform__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  HuginBase::SrcPanoImage *arg2 = 0 ;
  HuginBase::PanoramaOptions *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Transform_createTransform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_createTransform" "', argument " "1"" of type '" "HuginBase::PTools::Transform *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__SrcPanoImage,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_createTransform" "', argument " "2"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "2"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Transform_createTransform" "', argument " "3"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createTransform" "', argument " "3"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp3);
  (arg1)->createTransform((HuginBase::SrcPanoImage const &)*arg2,(HuginBase::PanoramaOptions const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createTransform(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HuginBase__SrcPanoImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Transform_createTransform__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Transform_createTransform__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vigra__Diff2D, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Transform_createTransform__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vigra__Diff2D, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vigra__Diff2D, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_vigra__Diff2D, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_Transform_createTransform__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Transform_createTransform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    createTransform(HuginBase::PTools::Transform *,vigra::Diff2D const &,HuginBase::VariableMap,HuginBase::Lens::LensProjectionFormat,vigra::Diff2D const &,HuginBase::PanoramaOptions::ProjectionFormat,std::vector< double,std::allocator< double > > const &,double,vigra::Diff2D const &)\n"
    "    createTransform(HuginBase::PTools::Transform *,HuginBase::PanoramaData const &,unsigned int,HuginBase::PanoramaOptions const &,vigra::Diff2D)\n"
    "    createTransform(HuginBase::PTools::Transform *,HuginBase::PanoramaData const &,unsigned int,HuginBase::PanoramaOptions const &)\n"
    "    createTransform(HuginBase::PTools::Transform *,HuginBase::SrcPanoImage const &,HuginBase::PanoramaOptions const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createInvTransform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  vigra::Diff2D *arg2 = 0 ;
  SwigValueWrapper< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > arg3 ;
  HuginBase::Lens::LensProjectionFormat arg4 ;
  vigra::Diff2D *arg5 = 0 ;
  HuginBase::PanoramaOptions::ProjectionFormat arg6 ;
  std::vector< double,std::allocator< double > > *arg7 = 0 ;
  double arg8 ;
  vigra::Diff2D *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Transform_createInvTransform",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_createInvTransform" "', argument " "1"" of type '" "HuginBase::PTools::Transform *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_createInvTransform" "', argument " "2"" of type '" "vigra::Diff2D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "2"" of type '" "vigra::Diff2D const &""'"); 
  }
  arg2 = reinterpret_cast< vigra::Diff2D * >(argp2);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Transform_createInvTransform" "', argument " "3"" of type '" "HuginBase::VariableMap""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transform_createInvTransform" "', argument " "4"" of type '" "HuginBase::Lens::LensProjectionFormat""'");
  } 
  arg4 = static_cast< HuginBase::Lens::LensProjectionFormat >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Transform_createInvTransform" "', argument " "5"" of type '" "vigra::Diff2D const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "5"" of type '" "vigra::Diff2D const &""'"); 
  }
  arg5 = reinterpret_cast< vigra::Diff2D * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Transform_createInvTransform" "', argument " "6"" of type '" "HuginBase::PanoramaOptions::ProjectionFormat""'");
  } 
  arg6 = static_cast< HuginBase::PanoramaOptions::ProjectionFormat >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Transform_createInvTransform" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "7"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg7 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Transform_createInvTransform" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Transform_createInvTransform" "', argument " "9"" of type '" "vigra::Diff2D const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "9"" of type '" "vigra::Diff2D const &""'"); 
  }
  arg9 = reinterpret_cast< vigra::Diff2D * >(argp9);
  (arg1)->createInvTransform((vigra::Diff2D const &)*arg2,arg3,arg4,(vigra::Diff2D const &)*arg5,arg6,(std::vector< double,std::allocator< double > > const &)*arg7,arg8,(vigra::Diff2D const &)*arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createInvTransform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  HuginBase::PanoramaData *arg2 = 0 ;
  unsigned int arg3 ;
  HuginBase::PanoramaOptions *arg4 = 0 ;
  vigra::Diff2D arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Transform_createInvTransform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_createInvTransform" "', argument " "1"" of type '" "HuginBase::PTools::Transform *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_createInvTransform" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaData * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_createInvTransform" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Transform_createInvTransform" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Transform_createInvTransform" "', argument " "5"" of type '" "vigra::Diff2D""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "5"" of type '" "vigra::Diff2D""'");
    } else {
      vigra::Diff2D * temp = reinterpret_cast< vigra::Diff2D * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  (arg1)->createInvTransform((HuginBase::PanoramaData const &)*arg2,arg3,(HuginBase::PanoramaOptions const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createInvTransform__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  HuginBase::PanoramaData *arg2 = 0 ;
  unsigned int arg3 ;
  HuginBase::PanoramaOptions *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Transform_createInvTransform",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_createInvTransform" "', argument " "1"" of type '" "HuginBase::PTools::Transform *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_createInvTransform" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaData * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_createInvTransform" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Transform_createInvTransform" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "4"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp4);
  (arg1)->createInvTransform((HuginBase::PanoramaData const &)*arg2,arg3,(HuginBase::PanoramaOptions const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createInvTransform__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  HuginBase::SrcPanoImage *arg2 = 0 ;
  HuginBase::PanoramaOptions *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Transform_createInvTransform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_createInvTransform" "', argument " "1"" of type '" "HuginBase::PTools::Transform *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__SrcPanoImage,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_createInvTransform" "', argument " "2"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "2"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Transform_createInvTransform" "', argument " "3"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_createInvTransform" "', argument " "3"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp3);
  (arg1)->createInvTransform((HuginBase::SrcPanoImage const &)*arg2,(HuginBase::PanoramaOptions const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_createInvTransform(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HuginBase__SrcPanoImage, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Transform_createInvTransform__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Transform_createInvTransform__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HuginBase__PanoramaOptions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vigra__Diff2D, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Transform_createInvTransform__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_vigra__Diff2D, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_vigra__Diff2D, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_vigra__Diff2D, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_Transform_createInvTransform__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Transform_createInvTransform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    createInvTransform(HuginBase::PTools::Transform *,vigra::Diff2D const &,HuginBase::VariableMap,HuginBase::Lens::LensProjectionFormat,vigra::Diff2D const &,HuginBase::PanoramaOptions::ProjectionFormat,std::vector< double,std::allocator< double > > const &,double,vigra::Diff2D const &)\n"
    "    createInvTransform(HuginBase::PTools::Transform *,HuginBase::PanoramaData const &,unsigned int,HuginBase::PanoramaOptions const &,vigra::Diff2D)\n"
    "    createInvTransform(HuginBase::PTools::Transform *,HuginBase::PanoramaData const &,unsigned int,HuginBase::PanoramaOptions const &)\n"
    "    createInvTransform(HuginBase::PTools::Transform *,HuginBase::SrcPanoImage const &,HuginBase::PanoramaOptions const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_transform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Transform_transform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_transform" "', argument " "1"" of type '" "HuginBase::PTools::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_transform" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Transform_transform" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transform_transform" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Transform_transform" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (bool)((HuginBase::PTools::Transform const *)arg1)->transform(*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_transform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  hugin_utils::FDiff2D *arg2 = 0 ;
  hugin_utils::FDiff2D *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Transform_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_transform" "', argument " "1"" of type '" "HuginBase::PTools::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_hugin_utils__FDiff2D,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_transform" "', argument " "2"" of type '" "hugin_utils::FDiff2D &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "2"" of type '" "hugin_utils::FDiff2D &""'"); 
  }
  arg2 = reinterpret_cast< hugin_utils::FDiff2D * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_hugin_utils__FDiff2D,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Transform_transform" "', argument " "3"" of type '" "hugin_utils::FDiff2D const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "3"" of type '" "hugin_utils::FDiff2D const &""'"); 
  }
  arg3 = reinterpret_cast< hugin_utils::FDiff2D * >(argp3);
  result = (bool)((HuginBase::PTools::Transform const *)arg1)->transform(*arg2,(hugin_utils::FDiff2D const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_transform(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hugin_utils__FDiff2D, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hugin_utils__FDiff2D, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Transform_transform__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Transform_transform__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Transform_transform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    transform(HuginBase::PTools::Transform const *,double &,double &,double,double)\n"
    "    transform(HuginBase::PTools::Transform const *,hugin_utils::FDiff2D &,hugin_utils::FDiff2D const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_transformImgCoord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Transform_transformImgCoord",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_transformImgCoord" "', argument " "1"" of type '" "HuginBase::PTools::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_transformImgCoord" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transformImgCoord" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Transform_transformImgCoord" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transformImgCoord" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transform_transformImgCoord" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Transform_transformImgCoord" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (bool)((HuginBase::PTools::Transform const *)arg1)->transformImgCoord(*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_transformImgCoordPartial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Transform_transformImgCoordPartial",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_transformImgCoordPartial" "', argument " "1"" of type '" "HuginBase::PTools::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_transformImgCoordPartial" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transformImgCoordPartial" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Transform_transformImgCoordPartial" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transformImgCoordPartial" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transform_transformImgCoordPartial" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Transform_transformImgCoordPartial" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (bool)((HuginBase::PTools::Transform const *)arg1)->transformImgCoordPartial(*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_transformImgCoord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  hugin_utils::FDiff2D *arg2 = 0 ;
  hugin_utils::FDiff2D *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Transform_transformImgCoord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_transformImgCoord" "', argument " "1"" of type '" "HuginBase::PTools::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_hugin_utils__FDiff2D,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_transformImgCoord" "', argument " "2"" of type '" "hugin_utils::FDiff2D &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transformImgCoord" "', argument " "2"" of type '" "hugin_utils::FDiff2D &""'"); 
  }
  arg2 = reinterpret_cast< hugin_utils::FDiff2D * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_hugin_utils__FDiff2D,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Transform_transformImgCoord" "', argument " "3"" of type '" "hugin_utils::FDiff2D const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transformImgCoord" "', argument " "3"" of type '" "hugin_utils::FDiff2D const &""'"); 
  }
  arg3 = reinterpret_cast< hugin_utils::FDiff2D * >(argp3);
  result = (bool)((HuginBase::PTools::Transform const *)arg1)->transformImgCoord(*arg2,(hugin_utils::FDiff2D const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_transformImgCoord(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hugin_utils__FDiff2D, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hugin_utils__FDiff2D, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Transform_transformImgCoord__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PTools__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Transform_transformImgCoord__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Transform_transformImgCoord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    transformImgCoord(HuginBase::PTools::Transform const *,double &,double &,double,double)\n"
    "    transformImgCoord(HuginBase::PTools::Transform const *,hugin_utils::FDiff2D &,hugin_utils::FDiff2D const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_emitGLSL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::Transform *arg1 = (HuginBase::PTools::Transform *) 0 ;
  std::ostringstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Transform_emitGLSL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_emitGLSL" "', argument " "1"" of type '" "HuginBase::PTools::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostringstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_emitGLSL" "', argument " "2"" of type '" "std::ostringstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_emitGLSL" "', argument " "2"" of type '" "std::ostringstream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostringstream * >(argp2);
  result = (bool)((HuginBase::PTools::Transform const *)arg1)->emitGLSL(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Transform_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PTools__Transform, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AlignInfoWrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::AlignInfoWrap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AlignInfoWrap")) SWIG_fail;
  result = (HuginBase::PTools::AlignInfoWrap *)new HuginBase::PTools::AlignInfoWrap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PTools__AlignInfoWrap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AlignInfoWrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::AlignInfoWrap *arg1 = (HuginBase::PTools::AlignInfoWrap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AlignInfoWrap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__AlignInfoWrap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AlignInfoWrap" "', argument " "1"" of type '" "HuginBase::PTools::AlignInfoWrap *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::AlignInfoWrap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlignInfoWrap_setInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::AlignInfoWrap *arg1 = (HuginBase::PTools::AlignInfoWrap *) 0 ;
  HuginBase::PanoramaData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AlignInfoWrap_setInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__AlignInfoWrap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlignInfoWrap_setInfo" "', argument " "1"" of type '" "HuginBase::PTools::AlignInfoWrap *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::AlignInfoWrap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlignInfoWrap_setInfo" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlignInfoWrap_setInfo" "', argument " "2"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaData * >(argp2);
  result = (bool)(arg1)->setInfo((HuginBase::PanoramaData const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlignInfoWrap_setGlobal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::AlignInfoWrap *arg1 = (HuginBase::PTools::AlignInfoWrap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AlignInfoWrap_setGlobal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__AlignInfoWrap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlignInfoWrap_setGlobal" "', argument " "1"" of type '" "HuginBase::PTools::AlignInfoWrap *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::AlignInfoWrap * >(argp1);
  (arg1)->setGlobal();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlignInfoWrap_getVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::AlignInfoWrap *arg1 = (HuginBase::PTools::AlignInfoWrap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AlignInfoWrap_getVariables",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__AlignInfoWrap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlignInfoWrap_getVariables" "', argument " "1"" of type '" "HuginBase::PTools::AlignInfoWrap const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::AlignInfoWrap * >(argp1);
  result = ((HuginBase::PTools::AlignInfoWrap const *)arg1)->getVariables();
  resultobj = swig::from(static_cast< std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlignInfoWrap_getCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTools::AlignInfoWrap *arg1 = (HuginBase::PTools::AlignInfoWrap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AlignInfoWrap_getCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTools__AlignInfoWrap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlignInfoWrap_getCtrlPoints" "', argument " "1"" of type '" "HuginBase::PTools::AlignInfoWrap const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTools::AlignInfoWrap * >(argp1);
  result = ((HuginBase::PTools::AlignInfoWrap const *)arg1)->getCtrlPoints();
  resultobj = swig::from(static_cast< std::vector<ControlPoint,std::allocator< ControlPoint > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AlignInfoWrap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PTools__AlignInfoWrap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_setDestImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Image *arg1 = 0 ;
  vigra::Diff2D arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  HuginBase::PanoramaOptions::ProjectionFormat *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 ;
  HuginBase::PanoramaOptions::ProjectionFormat temp4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:setDestImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Image,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setDestImage" "', argument " "1"" of type '" "Image &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setDestImage" "', argument " "1"" of type '" "Image &""'"); 
  }
  arg1 = reinterpret_cast< Image * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setDestImage" "', argument " "2"" of type '" "vigra::Diff2D""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setDestImage" "', argument " "2"" of type '" "vigra::Diff2D""'");
    } else {
      vigra::Diff2D * temp = reinterpret_cast< vigra::Diff2D * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setDestImage" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  ecode4 = SWIG_AsVal_int (obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "setDestImage" "', argument " "4"" of type '" "HuginBase::PanoramaOptions::ProjectionFormat const &""'");
  } else {
    temp4 = static_cast< HuginBase::PanoramaOptions::ProjectionFormat >(val4);
    arg4 = &temp4;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "setDestImage" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setDestImage" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "setDestImage" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  HuginBase::PTools::setDestImage(*arg1,arg2,arg3,(enum HuginBase::PanoramaOptions::ProjectionFormat const &)*arg4,(std::vector< double,std::allocator< double > > const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setFullImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Image *arg1 = 0 ;
  vigra::Diff2D arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  HuginBase::VariableMap *arg4 = 0 ;
  HuginBase::Lens::LensProjectionFormat arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:setFullImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Image,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setFullImage" "', argument " "1"" of type '" "Image &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setFullImage" "', argument " "1"" of type '" "Image &""'"); 
  }
  arg1 = reinterpret_cast< Image * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_vigra__Diff2D,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setFullImage" "', argument " "2"" of type '" "vigra::Diff2D""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setFullImage" "', argument " "2"" of type '" "vigra::Diff2D""'");
    } else {
      vigra::Diff2D * temp = reinterpret_cast< vigra::Diff2D * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setFullImage" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "setFullImage" "', argument " "4"" of type '" "HuginBase::VariableMap const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setFullImage" "', argument " "4"" of type '" "HuginBase::VariableMap const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "setFullImage" "', argument " "5"" of type '" "HuginBase::Lens::LensProjectionFormat""'");
  } 
  arg5 = static_cast< HuginBase::Lens::LensProjectionFormat >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "setFullImage" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  HuginBase::PTools::setFullImage(*arg1,arg2,arg3,(std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > const &)*arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_createAdjustPrefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  aPrefs *arg1 = 0 ;
  TrformStr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:createAdjustPrefs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_aPrefs,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createAdjustPrefs" "', argument " "1"" of type '" "aPrefs &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createAdjustPrefs" "', argument " "1"" of type '" "aPrefs &""'"); 
  }
  arg1 = reinterpret_cast< aPrefs * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TrformStr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createAdjustPrefs" "', argument " "2"" of type '" "TrformStr &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createAdjustPrefs" "', argument " "2"" of type '" "TrformStr &""'"); 
  }
  arg2 = reinterpret_cast< TrformStr * >(argp2);
  HuginBase::PTools::createAdjustPrefs(*arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setAdjustSrcImg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrformStr *arg1 = 0 ;
  aPrefs *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  HuginBase::VariableMap *arg6 = 0 ;
  HuginBase::Lens::LensProjectionFormat arg7 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  int val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:setAdjustSrcImg",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_TrformStr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setAdjustSrcImg" "', argument " "1"" of type '" "TrformStr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setAdjustSrcImg" "', argument " "1"" of type '" "TrformStr &""'"); 
  }
  arg1 = reinterpret_cast< TrformStr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_aPrefs,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setAdjustSrcImg" "', argument " "2"" of type '" "aPrefs &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setAdjustSrcImg" "', argument " "2"" of type '" "aPrefs &""'"); 
  }
  arg2 = reinterpret_cast< aPrefs * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setAdjustSrcImg" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "setAdjustSrcImg" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "setAdjustSrcImg" "', argument " "5"" of type '" "unsigned char *""'"); 
  }
  arg5 = reinterpret_cast< unsigned char * >(argp5);
  {
    std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *ptr = (std::map<std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > *)0;
    res6 = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "setAdjustSrcImg" "', argument " "6"" of type '" "HuginBase::VariableMap const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setAdjustSrcImg" "', argument " "6"" of type '" "HuginBase::VariableMap const &""'"); 
    }
    arg6 = ptr;
  }
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "setAdjustSrcImg" "', argument " "7"" of type '" "HuginBase::Lens::LensProjectionFormat""'");
  } 
  arg7 = static_cast< HuginBase::Lens::LensProjectionFormat >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "setAdjustSrcImg" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  HuginBase::PTools::setAdjustSrcImg(*arg1,*arg2,arg3,arg4,arg5,(std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > const &)*arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_setAdjustDestImg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrformStr *arg1 = 0 ;
  aPrefs *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  HuginBase::PanoramaOptions *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:setAdjustDestImg",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_TrformStr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setAdjustDestImg" "', argument " "1"" of type '" "TrformStr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setAdjustDestImg" "', argument " "1"" of type '" "TrformStr &""'"); 
  }
  arg1 = reinterpret_cast< TrformStr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_aPrefs,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setAdjustDestImg" "', argument " "2"" of type '" "aPrefs &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setAdjustDestImg" "', argument " "2"" of type '" "aPrefs &""'"); 
  }
  arg2 = reinterpret_cast< aPrefs * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setAdjustDestImg" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "setAdjustDestImg" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "setAdjustDestImg" "', argument " "5"" of type '" "unsigned char *""'"); 
  }
  arg5 = reinterpret_cast< unsigned char * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "setAdjustDestImg" "', argument " "6"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setAdjustDestImg" "', argument " "6"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg6 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp6);
  HuginBase::PTools::setAdjustDestImg(*arg1,*arg2,arg3,arg4,arg5,(HuginBase::PanoramaOptions const &)*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_createAdjustTrform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrformStr *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:createAdjustTrform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_TrformStr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createAdjustTrform" "', argument " "1"" of type '" "TrformStr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createAdjustTrform" "', argument " "1"" of type '" "TrformStr &""'"); 
  }
  arg1 = reinterpret_cast< TrformStr * >(argp1);
  HuginBase::PTools::createAdjustTrform(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_freeTrform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrformStr *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:freeTrform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_TrformStr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "freeTrform" "', argument " "1"" of type '" "TrformStr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "freeTrform" "', argument " "1"" of type '" "TrformStr &""'"); 
  }
  arg1 = reinterpret_cast< TrformStr * >(argp1);
  HuginBase::PTools::freeTrform(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_freeImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:freeImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Image,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "freeImage" "', argument " "1"" of type '" "Image &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "freeImage" "', argument " "1"" of type '" "Image &""'"); 
  }
  arg1 = reinterpret_cast< Image * >(argp1);
  HuginBase::PTools::freeImage(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setOptVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  optVars *arg1 = 0 ;
  std::set< std::string,std::less< std::string >,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:setOptVars",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_optVars,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setOptVars" "', argument " "1"" of type '" "optVars &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setOptVars" "', argument " "1"" of type '" "optVars &""'"); 
  }
  arg1 = reinterpret_cast< optVars * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setOptVars" "', argument " "2"" of type '" "std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setOptVars" "', argument " "2"" of type '" "std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::set< std::string,std::less< std::string >,std::allocator< std::string > > * >(argp2);
  HuginBase::PTools::setOptVars(*arg1,(std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetAlignInfoVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AlignInfo *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetAlignInfoVariables",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_AlignInfo,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAlignInfoVariables" "', argument " "1"" of type '" "AlignInfo const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetAlignInfoVariables" "', argument " "1"" of type '" "AlignInfo const &""'"); 
  }
  arg1 = reinterpret_cast< AlignInfo * >(argp1);
  result = HuginBase::PTools::GetAlignInfoVariables((AlignInfo const &)*arg1);
  resultobj = swig::from(static_cast< std::vector<std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetAlignInfoCtrlPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AlignInfo *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetAlignInfoCtrlPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_AlignInfo,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAlignInfoCtrlPoints" "', argument " "1"" of type '" "AlignInfo const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetAlignInfoCtrlPoints" "', argument " "1"" of type '" "AlignInfo const &""'"); 
  }
  arg1 = reinterpret_cast< AlignInfo * >(argp1);
  result = HuginBase::PTools::GetAlignInfoCtrlPoints((AlignInfo const &)*arg1);
  resultobj = swig::from(static_cast< std::vector<ControlPoint,std::allocator< ControlPoint > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_optimize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:optimize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "optimize" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "optimize" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "optimize" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (unsigned int)HuginBase::PTools::optimize(*arg1,(char const *)arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_optimize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:optimize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "optimize" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "optimize" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (unsigned int)HuginBase::PTools::optimize(*arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_optimize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_optimize__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_optimize__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'optimize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::PTools::optimize(HuginBase::PanoramaData &,char const *)\n"
    "    HuginBase::PTools::optimize(HuginBase::PanoramaData &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PanoramaAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaAlgorithm *arg1 = (HuginBase::PanoramaAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PanoramaAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaAlgorithm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PanoramaAlgorithm" "', argument " "1"" of type '" "HuginBase::PanoramaAlgorithm *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaAlgorithm * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaAlgorithm_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaAlgorithm *arg1 = (HuginBase::PanoramaAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaAlgorithm_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaAlgorithm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaAlgorithm_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::PanoramaAlgorithm const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaAlgorithm * >(argp1);
  result = (bool)((HuginBase::PanoramaAlgorithm const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaAlgorithm_hasRunSuccessfully(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaAlgorithm *arg1 = (HuginBase::PanoramaAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaAlgorithm_hasRunSuccessfully",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaAlgorithm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaAlgorithm_hasRunSuccessfully" "', argument " "1"" of type '" "HuginBase::PanoramaAlgorithm *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaAlgorithm * >(argp1);
  result = (bool)(arg1)->hasRunSuccessfully();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaAlgorithm_run(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaAlgorithm *arg1 = (HuginBase::PanoramaAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaAlgorithm_run",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaAlgorithm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaAlgorithm_run" "', argument " "1"" of type '" "HuginBase::PanoramaAlgorithm *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaAlgorithm * >(argp1);
  (arg1)->run();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaAlgorithm_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaAlgorithm *arg1 = (HuginBase::PanoramaAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaAlgorithm_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaAlgorithm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaAlgorithm_runAlgorithm" "', argument " "1"" of type '" "HuginBase::PanoramaAlgorithm *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaAlgorithm * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PanoramaAlgorithm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PanoramaAlgorithm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_TimeConsumingPanoramaAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::TimeConsumingPanoramaAlgorithm *arg1 = (HuginBase::TimeConsumingPanoramaAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeConsumingPanoramaAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__TimeConsumingPanoramaAlgorithm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeConsumingPanoramaAlgorithm" "', argument " "1"" of type '" "HuginBase::TimeConsumingPanoramaAlgorithm *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::TimeConsumingPanoramaAlgorithm * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeConsumingPanoramaAlgorithm_wasCancelled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::TimeConsumingPanoramaAlgorithm *arg1 = (HuginBase::TimeConsumingPanoramaAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeConsumingPanoramaAlgorithm_wasCancelled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeConsumingPanoramaAlgorithm_wasCancelled" "', argument " "1"" of type '" "HuginBase::TimeConsumingPanoramaAlgorithm const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::TimeConsumingPanoramaAlgorithm * >(argp1);
  result = (bool)((HuginBase::TimeConsumingPanoramaAlgorithm const *)arg1)->wasCancelled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeConsumingPanoramaAlgorithm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__TimeConsumingPanoramaAlgorithm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_StitcherAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::StitcherAlgorithm *arg1 = (HuginBase::StitcherAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StitcherAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__StitcherAlgorithm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StitcherAlgorithm" "', argument " "1"" of type '" "HuginBase::StitcherAlgorithm *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::StitcherAlgorithm * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StitcherAlgorithm_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::StitcherAlgorithm *arg1 = (HuginBase::StitcherAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StitcherAlgorithm_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__StitcherAlgorithm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StitcherAlgorithm_runAlgorithm" "', argument " "1"" of type '" "HuginBase::StitcherAlgorithm *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::StitcherAlgorithm * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StitcherAlgorithm_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::StitcherAlgorithm *arg1 = (HuginBase::StitcherAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StitcherAlgorithm_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__StitcherAlgorithm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StitcherAlgorithm_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::StitcherAlgorithm const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::StitcherAlgorithm * >(argp1);
  result = (bool)((HuginBase::StitcherAlgorithm const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StitcherAlgorithm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__StitcherAlgorithm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ImageStitcherAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ImageStitcherAlgorithm *arg1 = (HuginBase::ImageStitcherAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImageStitcherAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ImageStitcherAlgorithm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImageStitcherAlgorithm" "', argument " "1"" of type '" "HuginBase::ImageStitcherAlgorithm *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ImageStitcherAlgorithm * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImageStitcherAlgorithm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__ImageStitcherAlgorithm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_FileOutputStitcherAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::FileOutputStitcherAlgorithm *arg1 = (HuginBase::FileOutputStitcherAlgorithm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileOutputStitcherAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__FileOutputStitcherAlgorithm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileOutputStitcherAlgorithm" "', argument " "1"" of type '" "HuginBase::FileOutputStitcherAlgorithm *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::FileOutputStitcherAlgorithm * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileOutputStitcherAlgorithm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__FileOutputStitcherAlgorithm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AssistantMakefilelibExport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  HuginBase::AssistantMakefilelibExport::AssistantPrograms *arg2 = 0 ;
  bool *arg3 = 0 ;
  double *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  double *arg7 = 0 ;
  std::ostream *arg8 = 0 ;
  std::string *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  bool temp5 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool temp6 ;
  bool val6 ;
  int ecode6 = 0 ;
  double temp7 ;
  double val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int res9 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  HuginBase::AssistantMakefilelibExport *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_AssistantMakefilelibExport",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AssistantMakefilelibExport" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssistantMakefilelibExport" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__AssistantMakefilelibExport__AssistantPrograms,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AssistantMakefilelibExport" "', argument " "2"" of type '" "HuginBase::AssistantMakefilelibExport::AssistantPrograms const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssistantMakefilelibExport" "', argument " "2"" of type '" "HuginBase::AssistantMakefilelibExport::AssistantPrograms const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::AssistantMakefilelibExport::AssistantPrograms * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AssistantMakefilelibExport" "', argument " "3"" of type '" "bool""'");
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AssistantMakefilelibExport" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_AssistantMakefilelibExport" "', argument " "5"" of type '" "bool""'");
  } 
  temp5 = static_cast< bool >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_AssistantMakefilelibExport" "', argument " "6"" of type '" "bool""'");
  } 
  temp6 = static_cast< bool >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_AssistantMakefilelibExport" "', argument " "7"" of type '" "double""'");
  } 
  temp7 = static_cast< double >(val7);
  arg7 = &temp7;
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_AssistantMakefilelibExport" "', argument " "8"" of type '" "std::ostream &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssistantMakefilelibExport" "', argument " "8"" of type '" "std::ostream &""'"); 
  }
  arg8 = reinterpret_cast< std::ostream * >(argp8);
  {
    std::string *ptr = (std::string *)0;
    res9 = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_AssistantMakefilelibExport" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssistantMakefilelibExport" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    arg9 = ptr;
  }
  result = (HuginBase::AssistantMakefilelibExport *)new HuginBase::AssistantMakefilelibExport(*arg1,(HuginBase::AssistantMakefilelibExport::AssistantPrograms const &)*arg2,(bool const &)*arg3,(double const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(double const &)*arg7,*arg8,(std::string const &)*arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__AssistantMakefilelibExport, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res9)) delete arg9;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res9)) delete arg9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssistantMakefilelibExport_createMakefile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  HuginBase::AssistantMakefilelibExport::AssistantPrograms *arg2 = 0 ;
  bool *arg3 = 0 ;
  double *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  double *arg7 = 0 ;
  std::ostream *arg8 = 0 ;
  std::string *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  bool temp5 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool temp6 ;
  bool val6 ;
  int ecode6 = 0 ;
  double temp7 ;
  double val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int res9 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:AssistantMakefilelibExport_createMakefile",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__AssistantMakefilelibExport__AssistantPrograms,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "2"" of type '" "HuginBase::AssistantMakefilelibExport::AssistantPrograms const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "2"" of type '" "HuginBase::AssistantMakefilelibExport::AssistantPrograms const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::AssistantMakefilelibExport::AssistantPrograms * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "3"" of type '" "bool""'");
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "5"" of type '" "bool""'");
  } 
  temp5 = static_cast< bool >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "6"" of type '" "bool""'");
  } 
  temp6 = static_cast< bool >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "7"" of type '" "double""'");
  } 
  temp7 = static_cast< double >(val7);
  arg7 = &temp7;
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "8"" of type '" "std::ostream &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "8"" of type '" "std::ostream &""'"); 
  }
  arg8 = reinterpret_cast< std::ostream * >(argp8);
  {
    std::string *ptr = (std::string *)0;
    res9 = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AssistantMakefilelibExport_createMakefile" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    arg9 = ptr;
  }
  HuginBase::AssistantMakefilelibExport::createMakefile(*arg1,(HuginBase::AssistantMakefilelibExport::AssistantPrograms const &)*arg2,(bool const &)*arg3,(double const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(double const &)*arg7,*arg8,(std::string const &)*arg9);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res9)) delete arg9;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res9)) delete arg9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssistantMakefilelibExport_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::AssistantMakefilelibExport *arg1 = (HuginBase::AssistantMakefilelibExport *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssistantMakefilelibExport_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__AssistantMakefilelibExport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssistantMakefilelibExport_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::AssistantMakefilelibExport const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::AssistantMakefilelibExport * >(argp1);
  result = (bool)((HuginBase::AssistantMakefilelibExport const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssistantMakefilelibExport_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::AssistantMakefilelibExport *arg1 = (HuginBase::AssistantMakefilelibExport *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssistantMakefilelibExport_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__AssistantMakefilelibExport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssistantMakefilelibExport_runAlgorithm" "', argument " "1"" of type '" "HuginBase::AssistantMakefilelibExport *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::AssistantMakefilelibExport * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AssistantMakefilelibExport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::AssistantMakefilelibExport *arg1 = (HuginBase::AssistantMakefilelibExport *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AssistantMakefilelibExport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__AssistantMakefilelibExport, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AssistantMakefilelibExport" "', argument " "1"" of type '" "HuginBase::AssistantMakefilelibExport *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::AssistantMakefilelibExport * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AssistantMakefilelibExport_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__AssistantMakefilelibExport, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_CalculateCPStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatistics *arg1 = (HuginBase::CalculateCPStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculateCPStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatistics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculateCPStatistics" "', argument " "1"" of type '" "HuginBase::CalculateCPStatistics *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatistics * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatistics_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatistics *arg1 = (HuginBase::CalculateCPStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatistics_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatistics_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::CalculateCPStatistics const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatistics * >(argp1);
  result = (bool)((HuginBase::CalculateCPStatistics const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatistics_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatistics *arg1 = (HuginBase::CalculateCPStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatistics_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatistics_runAlgorithm" "', argument " "1"" of type '" "HuginBase::CalculateCPStatistics *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatistics * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatistics_getResultMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatistics *arg1 = (HuginBase::CalculateCPStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatistics_getResultMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatistics_getResultMin" "', argument " "1"" of type '" "HuginBase::CalculateCPStatistics *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatistics * >(argp1);
  result = (double)(arg1)->getResultMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatistics_getResultMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatistics *arg1 = (HuginBase::CalculateCPStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatistics_getResultMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatistics_getResultMax" "', argument " "1"" of type '" "HuginBase::CalculateCPStatistics *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatistics * >(argp1);
  result = (double)(arg1)->getResultMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatistics_getResultMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatistics *arg1 = (HuginBase::CalculateCPStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatistics_getResultMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatistics_getResultMean" "', argument " "1"" of type '" "HuginBase::CalculateCPStatistics *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatistics * >(argp1);
  result = (double)(arg1)->getResultMean();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatistics_getResultVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatistics *arg1 = (HuginBase::CalculateCPStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatistics_getResultVariance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatistics_getResultVariance" "', argument " "1"" of type '" "HuginBase::CalculateCPStatistics *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatistics * >(argp1);
  result = (double)(arg1)->getResultVariance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculateCPStatistics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CalculateCPStatistics, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalculateCPStatisticsError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::CalculateCPStatisticsError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CalculateCPStatisticsError",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateCPStatisticsError" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculateCPStatisticsError" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CalculateCPStatisticsError" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (HuginBase::CalculateCPStatisticsError *)new HuginBase::CalculateCPStatisticsError(*arg1,(int const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateCPStatisticsError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalculateCPStatisticsError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CalculateCPStatisticsError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalculateCPStatisticsError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateCPStatisticsError" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculateCPStatisticsError" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::CalculateCPStatisticsError *)new HuginBase::CalculateCPStatisticsError(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateCPStatisticsError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalculateCPStatisticsError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CalculateCPStatisticsError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CalculateCPStatisticsError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CalculateCPStatisticsError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::CalculateCPStatisticsError(HuginBase::PanoramaData &,int const &)\n"
    "    HuginBase::CalculateCPStatisticsError(HuginBase::PanoramaData &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalculateCPStatisticsError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatisticsError *arg1 = (HuginBase::CalculateCPStatisticsError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculateCPStatisticsError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatisticsError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculateCPStatisticsError" "', argument " "1"" of type '" "HuginBase::CalculateCPStatisticsError *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatisticsError * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsError_calcCtrlPntsErrorStats__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  int *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int temp6 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CalculateCPStatisticsError_calcCtrlPntsErrorStats",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "6"" of type '" "int""'");
  } 
  temp6 = static_cast< int >(val6);
  arg6 = &temp6;
  HuginBase::CalculateCPStatisticsError::calcCtrlPntsErrorStats((HuginBase::PanoramaData const &)*arg1,*arg2,*arg3,*arg4,*arg5,(int const &)*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsError_calcCtrlPntsErrorStats__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CalculateCPStatisticsError_calcCtrlPntsErrorStats",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsError_calcCtrlPntsErrorStats" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  HuginBase::CalculateCPStatisticsError::calcCtrlPntsErrorStats((HuginBase::PanoramaData const &)*arg1,*arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsError_calcCtrlPntsErrorStats(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_CalculateCPStatisticsError_calcCtrlPntsErrorStats__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_CalculateCPStatisticsError_calcCtrlPntsErrorStats__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CalculateCPStatisticsError_calcCtrlPntsErrorStats'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    calcCtrlPntsErrorStats(HuginBase::PanoramaData const &,double &,double &,double &,double &,int const &)\n"
    "    HuginBase::CalculateCPStatisticsError::calcCtrlPntsErrorStats(HuginBase::PanoramaData const &,double &,double &,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsError_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatisticsError *arg1 = (HuginBase::CalculateCPStatisticsError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatisticsError_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatisticsError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatisticsError_runAlgorithm" "', argument " "1"" of type '" "HuginBase::CalculateCPStatisticsError *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatisticsError * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculateCPStatisticsError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CalculateCPStatisticsError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalculateCPStatisticsRadial__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::CalculateCPStatisticsRadial *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CalculateCPStatisticsRadial",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateCPStatisticsRadial" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculateCPStatisticsRadial" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CalculateCPStatisticsRadial" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (HuginBase::CalculateCPStatisticsRadial *)new HuginBase::CalculateCPStatisticsRadial(*arg1,(int const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateCPStatisticsRadial, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalculateCPStatisticsRadial__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CalculateCPStatisticsRadial *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalculateCPStatisticsRadial",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateCPStatisticsRadial" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculateCPStatisticsRadial" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::CalculateCPStatisticsRadial *)new HuginBase::CalculateCPStatisticsRadial(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateCPStatisticsRadial, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalculateCPStatisticsRadial(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CalculateCPStatisticsRadial__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CalculateCPStatisticsRadial__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CalculateCPStatisticsRadial'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::CalculateCPStatisticsRadial(HuginBase::PanoramaData &,int const &)\n"
    "    HuginBase::CalculateCPStatisticsRadial(HuginBase::PanoramaData &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalculateCPStatisticsRadial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatisticsRadial *arg1 = (HuginBase::CalculateCPStatisticsRadial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculateCPStatisticsRadial",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatisticsRadial, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculateCPStatisticsRadial" "', argument " "1"" of type '" "HuginBase::CalculateCPStatisticsRadial *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatisticsRadial * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsRadial_calcCtrlPntsRadiStats__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  int *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int temp8 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:CalculateCPStatisticsRadial_calcCtrlPntsRadiStats",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "8"" of type '" "int""'");
  } 
  temp8 = static_cast< int >(val8);
  arg8 = &temp8;
  HuginBase::CalculateCPStatisticsRadial::calcCtrlPntsRadiStats((HuginBase::PanoramaData const &)*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,(int const &)*arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsRadial_calcCtrlPntsRadiStats__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:CalculateCPStatisticsRadial_calcCtrlPntsRadiStats",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateCPStatisticsRadial_calcCtrlPntsRadiStats" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  HuginBase::CalculateCPStatisticsRadial::calcCtrlPntsRadiStats((HuginBase::PanoramaData const &)*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsRadial_calcCtrlPntsRadiStats(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_CalculateCPStatisticsRadial_calcCtrlPntsRadiStats__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_CalculateCPStatisticsRadial_calcCtrlPntsRadiStats__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CalculateCPStatisticsRadial_calcCtrlPntsRadiStats'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    calcCtrlPntsRadiStats(HuginBase::PanoramaData const &,double &,double &,double &,double &,double &,double &,int const &)\n"
    "    HuginBase::CalculateCPStatisticsRadial::calcCtrlPntsRadiStats(HuginBase::PanoramaData const &,double &,double &,double &,double &,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsRadial_getResultPercentile10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatisticsRadial *arg1 = (HuginBase::CalculateCPStatisticsRadial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatisticsRadial_getResultPercentile10",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatisticsRadial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatisticsRadial_getResultPercentile10" "', argument " "1"" of type '" "HuginBase::CalculateCPStatisticsRadial *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatisticsRadial * >(argp1);
  result = (double)(arg1)->getResultPercentile10();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsRadial_getResultPercentile90(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatisticsRadial *arg1 = (HuginBase::CalculateCPStatisticsRadial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatisticsRadial_getResultPercentile90",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatisticsRadial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatisticsRadial_getResultPercentile90" "', argument " "1"" of type '" "HuginBase::CalculateCPStatisticsRadial *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatisticsRadial * >(argp1);
  result = (double)(arg1)->getResultPercentile90();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateCPStatisticsRadial_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateCPStatisticsRadial *arg1 = (HuginBase::CalculateCPStatisticsRadial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateCPStatisticsRadial_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateCPStatisticsRadial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateCPStatisticsRadial_runAlgorithm" "', argument " "1"" of type '" "HuginBase::CalculateCPStatisticsRadial *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateCPStatisticsRadial * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculateCPStatisticsRadial_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CalculateCPStatisticsRadial, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalculateMeanExposure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CalculateMeanExposure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalculateMeanExposure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateMeanExposure" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculateMeanExposure" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::CalculateMeanExposure *)new HuginBase::CalculateMeanExposure(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateMeanExposure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalculateMeanExposure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateMeanExposure *arg1 = (HuginBase::CalculateMeanExposure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculateMeanExposure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateMeanExposure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculateMeanExposure" "', argument " "1"" of type '" "HuginBase::CalculateMeanExposure *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateMeanExposure * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateMeanExposure_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateMeanExposure *arg1 = (HuginBase::CalculateMeanExposure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateMeanExposure_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateMeanExposure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateMeanExposure_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::CalculateMeanExposure const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateMeanExposure * >(argp1);
  result = (bool)((HuginBase::CalculateMeanExposure const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateMeanExposure_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateMeanExposure *arg1 = (HuginBase::CalculateMeanExposure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateMeanExposure_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateMeanExposure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateMeanExposure_runAlgorithm" "', argument " "1"" of type '" "HuginBase::CalculateMeanExposure *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateMeanExposure * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateMeanExposure_calcMeanExposure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateMeanExposure_calcMeanExposure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateMeanExposure_calcMeanExposure" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateMeanExposure_calcMeanExposure" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (double)HuginBase::CalculateMeanExposure::calcMeanExposure((HuginBase::PanoramaData const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateMeanExposure_getResultExposure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateMeanExposure *arg1 = (HuginBase::CalculateMeanExposure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateMeanExposure_getResultExposure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateMeanExposure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateMeanExposure_getResultExposure" "', argument " "1"" of type '" "HuginBase::CalculateMeanExposure const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateMeanExposure * >(argp1);
  result = (double)((HuginBase::CalculateMeanExposure const *)arg1)->getResultExposure();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculateMeanExposure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CalculateMeanExposure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalculateOptimalROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CalculateOptimalROI *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalculateOptimalROI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateOptimalROI" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculateOptimalROI" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::CalculateOptimalROI *)new HuginBase::CalculateOptimalROI(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateOptimalROI, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalculateOptimalROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalROI *arg1 = (HuginBase::CalculateOptimalROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculateOptimalROI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalROI, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculateOptimalROI" "', argument " "1"" of type '" "HuginBase::CalculateOptimalROI *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalROI * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalROI_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalROI *arg1 = (HuginBase::CalculateOptimalROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateOptimalROI_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalROI_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::CalculateOptimalROI const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalROI * >(argp1);
  result = (bool)((HuginBase::CalculateOptimalROI const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalROI_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalROI *arg1 = (HuginBase::CalculateOptimalROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateOptimalROI_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalROI_runAlgorithm" "', argument " "1"" of type '" "HuginBase::CalculateOptimalROI *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalROI * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalROI_calcOptimalROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalROI *arg1 = (HuginBase::CalculateOptimalROI *) 0 ;
  HuginBase::PanoramaData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalculateOptimalROI_calcOptimalROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalROI_calcOptimalROI" "', argument " "1"" of type '" "HuginBase::CalculateOptimalROI *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalROI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalculateOptimalROI_calcOptimalROI" "', argument " "2"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateOptimalROI_calcOptimalROI" "', argument " "2"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaData * >(argp2);
  result = (bool)(arg1)->calcOptimalROI(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalROI_getResultOptimalROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalROI *arg1 = (HuginBase::CalculateOptimalROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vigra::Rect2D result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateOptimalROI_getResultOptimalROI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalROI_getResultOptimalROI" "', argument " "1"" of type '" "HuginBase::CalculateOptimalROI *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalROI * >(argp1);
  result = (arg1)->getResultOptimalROI();
  resultobj = SWIG_NewPointerObj((new vigra::Rect2D(static_cast< const vigra::Rect2D& >(result))), SWIGTYPE_p_vigra__Rect2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalROI_getResultOptimalSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalROI *arg1 = (HuginBase::CalculateOptimalROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< vigra::Size2D > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateOptimalROI_getResultOptimalSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalROI_getResultOptimalSize" "', argument " "1"" of type '" "HuginBase::CalculateOptimalROI *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalROI * >(argp1);
  result = (arg1)->getResultOptimalSize();
  resultobj = SWIG_NewPointerObj((new vigra::Size2D(static_cast< const vigra::Size2D& >(result))), SWIGTYPE_p_vigra__Size2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculateOptimalROI_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CalculateOptimalROI, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalculateOptimalScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CalculateOptimalScale *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalculateOptimalScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateOptimalScale" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculateOptimalScale" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::CalculateOptimalScale *)new HuginBase::CalculateOptimalScale(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateOptimalScale, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalculateOptimalScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalScale *arg1 = (HuginBase::CalculateOptimalScale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculateOptimalScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalScale, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculateOptimalScale" "', argument " "1"" of type '" "HuginBase::CalculateOptimalScale *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalScale * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalScale_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalScale *arg1 = (HuginBase::CalculateOptimalScale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateOptimalScale_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalScale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalScale_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::CalculateOptimalScale const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalScale * >(argp1);
  result = (bool)((HuginBase::CalculateOptimalScale const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalScale_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalScale *arg1 = (HuginBase::CalculateOptimalScale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateOptimalScale_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalScale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalScale_runAlgorithm" "', argument " "1"" of type '" "HuginBase::CalculateOptimalScale *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalScale * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalScale_calcOptimalScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateOptimalScale_calcOptimalScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalScale_calcOptimalScale" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateOptimalScale_calcOptimalScale" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (double)HuginBase::CalculateOptimalScale::calcOptimalScale(*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalScale_calcOptimalPanoScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SrcPanoImage *arg1 = 0 ;
  HuginBase::PanoramaOptions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalculateOptimalScale_calcOptimalPanoScale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__SrcPanoImage,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalScale_calcOptimalPanoScale" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateOptimalScale_calcOptimalPanoScale" "', argument " "1"" of type '" "HuginBase::SrcPanoImage const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SrcPanoImage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalculateOptimalScale_calcOptimalPanoScale" "', argument " "2"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateOptimalScale_calcOptimalPanoScale" "', argument " "2"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp2);
  result = (double)HuginBase::CalculateOptimalScale::calcOptimalPanoScale((HuginBase::SrcPanoImage const &)*arg1,(HuginBase::PanoramaOptions const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalScale_getResultOptimalScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalScale *arg1 = (HuginBase::CalculateOptimalScale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateOptimalScale_getResultOptimalScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalScale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalScale_getResultOptimalScale" "', argument " "1"" of type '" "HuginBase::CalculateOptimalScale *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalScale * >(argp1);
  result = (double)(arg1)->getResultOptimalScale();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateOptimalScale_getResultOptimalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateOptimalScale *arg1 = (HuginBase::CalculateOptimalScale *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateOptimalScale_getResultOptimalWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateOptimalScale, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateOptimalScale_getResultOptimalWidth" "', argument " "1"" of type '" "HuginBase::CalculateOptimalScale *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateOptimalScale * >(argp1);
  result = (unsigned int)(arg1)->getResultOptimalWidth();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculateOptimalScale_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CalculateOptimalScale, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SetWidthOptimal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::SetWidthOptimal *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SetWidthOptimal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SetWidthOptimal" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SetWidthOptimal" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::SetWidthOptimal *)new HuginBase::SetWidthOptimal(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__SetWidthOptimal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SetWidthOptimal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SetWidthOptimal *arg1 = (HuginBase::SetWidthOptimal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SetWidthOptimal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SetWidthOptimal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SetWidthOptimal" "', argument " "1"" of type '" "HuginBase::SetWidthOptimal *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SetWidthOptimal * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWidthOptimal_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SetWidthOptimal *arg1 = (HuginBase::SetWidthOptimal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWidthOptimal_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SetWidthOptimal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWidthOptimal_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::SetWidthOptimal const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SetWidthOptimal * >(argp1);
  result = (bool)((HuginBase::SetWidthOptimal const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetWidthOptimal_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SetWidthOptimal *arg1 = (HuginBase::SetWidthOptimal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetWidthOptimal_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SetWidthOptimal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetWidthOptimal_runAlgorithm" "', argument " "1"" of type '" "HuginBase::SetWidthOptimal *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SetWidthOptimal * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SetWidthOptimal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__SetWidthOptimal, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalculateImageOverlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = (HuginBase::PanoramaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CalculateImageOverlap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalculateImageOverlap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateImageOverlap" "', argument " "1"" of type '" "HuginBase::PanoramaData const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::CalculateImageOverlap *)new HuginBase::CalculateImageOverlap((HuginBase::PanoramaData const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateImageOverlap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalculateImageOverlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateImageOverlap *arg1 = (HuginBase::CalculateImageOverlap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculateImageOverlap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateImageOverlap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculateImageOverlap" "', argument " "1"" of type '" "HuginBase::CalculateImageOverlap *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateImageOverlap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateImageOverlap_calculate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateImageOverlap *arg1 = (HuginBase::CalculateImageOverlap *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalculateImageOverlap_calculate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateImageOverlap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateImageOverlap_calculate" "', argument " "1"" of type '" "HuginBase::CalculateImageOverlap *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateImageOverlap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CalculateImageOverlap_calculate" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->calculate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateImageOverlap_getOverlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateImageOverlap *arg1 = (HuginBase::CalculateImageOverlap *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CalculateImageOverlap_getOverlap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateImageOverlap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateImageOverlap_getOverlap" "', argument " "1"" of type '" "HuginBase::CalculateImageOverlap *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateImageOverlap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CalculateImageOverlap_getOverlap" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CalculateImageOverlap_getOverlap" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)(arg1)->getOverlap(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateImageOverlap_limitToImages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateImageOverlap *arg1 = (HuginBase::CalculateImageOverlap *) 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalculateImageOverlap_limitToImages",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateImageOverlap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateImageOverlap_limitToImages" "', argument " "1"" of type '" "HuginBase::CalculateImageOverlap *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateImageOverlap * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CalculateImageOverlap_limitToImages" "', argument " "2"" of type '" "HuginBase::UIntSet""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->limitToImages(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateImageOverlap_getOverlapForImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateImageOverlap *arg1 = (HuginBase::CalculateImageOverlap *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CalculateImageOverlap_getOverlapForImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateImageOverlap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateImageOverlap_getOverlapForImage" "', argument " "1"" of type '" "HuginBase::CalculateImageOverlap *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateImageOverlap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CalculateImageOverlap_getOverlapForImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->getOverlapForImage(arg2);
  resultobj = swig::from(static_cast< std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculateImageOverlap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CalculateImageOverlap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RotatePanorama__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  Matrix3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::RotatePanorama *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RotatePanorama",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotatePanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotatePanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Matrix3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RotatePanorama" "', argument " "2"" of type '" "Matrix3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotatePanorama" "', argument " "2"" of type '" "Matrix3 const &""'"); 
  }
  arg2 = reinterpret_cast< Matrix3 * >(argp2);
  result = (HuginBase::RotatePanorama *)new HuginBase::RotatePanorama(*arg1,(Matrix3 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__RotatePanorama, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RotatePanorama__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HuginBase::RotatePanorama *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RotatePanorama",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotatePanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotatePanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotatePanorama" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotatePanorama" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RotatePanorama" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (HuginBase::RotatePanorama *)new HuginBase::RotatePanorama(*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__RotatePanorama, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RotatePanorama(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Matrix3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RotatePanorama__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RotatePanorama__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RotatePanorama'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::RotatePanorama(HuginBase::PanoramaData &,Matrix3 const &)\n"
    "    HuginBase::RotatePanorama(HuginBase::PanoramaData &,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RotatePanorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::RotatePanorama *arg1 = (HuginBase::RotatePanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RotatePanorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__RotatePanorama, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotatePanorama" "', argument " "1"" of type '" "HuginBase::RotatePanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::RotatePanorama * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RotatePanorama_rotatePano(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  Matrix3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RotatePanorama_rotatePano",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotatePanorama_rotatePano" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotatePanorama_rotatePano" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Matrix3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotatePanorama_rotatePano" "', argument " "2"" of type '" "Matrix3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotatePanorama_rotatePano" "', argument " "2"" of type '" "Matrix3 const &""'"); 
  }
  arg2 = reinterpret_cast< Matrix3 * >(argp2);
  HuginBase::RotatePanorama::rotatePano(*arg1,(Matrix3 const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RotatePanorama_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::RotatePanorama *arg1 = (HuginBase::RotatePanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RotatePanorama_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__RotatePanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotatePanorama_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::RotatePanorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::RotatePanorama * >(argp1);
  result = (bool)((HuginBase::RotatePanorama const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RotatePanorama_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::RotatePanorama *arg1 = (HuginBase::RotatePanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RotatePanorama_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__RotatePanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotatePanorama_runAlgorithm" "', argument " "1"" of type '" "HuginBase::RotatePanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::RotatePanorama * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RotatePanorama_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__RotatePanorama, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StraightenPanorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::StraightenPanorama *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StraightenPanorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StraightenPanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StraightenPanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::StraightenPanorama *)new HuginBase::StraightenPanorama(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__StraightenPanorama, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StraightenPanorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::StraightenPanorama *arg1 = (HuginBase::StraightenPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StraightenPanorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__StraightenPanorama, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StraightenPanorama" "', argument " "1"" of type '" "HuginBase::StraightenPanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::StraightenPanorama * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StraightenPanorama_calcStraighteningRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Matrix3 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StraightenPanorama_calcStraighteningRotation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StraightenPanorama_calcStraighteningRotation" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StraightenPanorama_calcStraighteningRotation" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = HuginBase::StraightenPanorama::calcStraighteningRotation((HuginBase::PanoramaData const &)*arg1);
  resultobj = SWIG_NewPointerObj((new Matrix3(static_cast< const Matrix3& >(result))), SWIGTYPE_p_Matrix3, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StraightenPanorama_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::StraightenPanorama *arg1 = (HuginBase::StraightenPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StraightenPanorama_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__StraightenPanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StraightenPanorama_runAlgorithm" "', argument " "1"" of type '" "HuginBase::StraightenPanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::StraightenPanorama * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StraightenPanorama_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__StraightenPanorama, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TranslatePanorama__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HuginBase::TranslatePanorama *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_TranslatePanorama",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TranslatePanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TranslatePanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TranslatePanorama" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TranslatePanorama" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TranslatePanorama" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (HuginBase::TranslatePanorama *)new HuginBase::TranslatePanorama(*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__TranslatePanorama, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TranslatePanorama__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::TranslatePanorama *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TranslatePanorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TranslatePanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TranslatePanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::TranslatePanorama *)new HuginBase::TranslatePanorama(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__TranslatePanorama, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TranslatePanorama(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TranslatePanorama__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_TranslatePanorama__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TranslatePanorama'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::TranslatePanorama(HuginBase::PanoramaData &,double const,double const,double const)\n"
    "    HuginBase::TranslatePanorama(HuginBase::PanoramaData &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TranslatePanorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::TranslatePanorama *arg1 = (HuginBase::TranslatePanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TranslatePanorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__TranslatePanorama, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TranslatePanorama" "', argument " "1"" of type '" "HuginBase::TranslatePanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::TranslatePanorama * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranslatePanorama_translatePano(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TranslatePanorama_translatePano",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranslatePanorama_translatePano" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TranslatePanorama_translatePano" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TranslatePanorama_translatePano" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TranslatePanorama_translatePano" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TranslatePanorama_translatePano" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  HuginBase::TranslatePanorama::translatePano(*arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranslatePanorama_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::TranslatePanorama *arg1 = (HuginBase::TranslatePanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TranslatePanorama_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__TranslatePanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranslatePanorama_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::TranslatePanorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::TranslatePanorama * >(argp1);
  result = (bool)((HuginBase::TranslatePanorama const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranslatePanorama_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::TranslatePanorama *arg1 = (HuginBase::TranslatePanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TranslatePanorama_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__TranslatePanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranslatePanorama_runAlgorithm" "', argument " "1"" of type '" "HuginBase::TranslatePanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::TranslatePanorama * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TranslatePanorama_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__TranslatePanorama, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getCPoutsideLimit_pair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama arg1 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getCPoutsideLimit_pair",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__Panorama,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPoutsideLimit_pair" "', argument " "1"" of type '" "HuginBase::Panorama""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getCPoutsideLimit_pair" "', argument " "1"" of type '" "HuginBase::Panorama""'");
    } else {
      HuginBase::Panorama * temp = reinterpret_cast< HuginBase::Panorama * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getCPoutsideLimit_pair" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = HuginBase::getCPoutsideLimit_pair(arg1,arg2);
  resultobj = swig::from(static_cast< std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getCPoutsideLimit_pair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getCPoutsideLimit_pair",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__Panorama,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPoutsideLimit_pair" "', argument " "1"" of type '" "HuginBase::Panorama""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getCPoutsideLimit_pair" "', argument " "1"" of type '" "HuginBase::Panorama""'");
    } else {
      HuginBase::Panorama * temp = reinterpret_cast< HuginBase::Panorama * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = HuginBase::getCPoutsideLimit_pair(arg1);
  resultobj = swig::from(static_cast< std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getCPoutsideLimit_pair(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_getCPoutsideLimit_pair__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_getCPoutsideLimit_pair__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getCPoutsideLimit_pair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::getCPoutsideLimit_pair(HuginBase::Panorama,double)\n"
    "    HuginBase::getCPoutsideLimit_pair(HuginBase::Panorama)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_getCPoutsideLimit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama arg1 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getCPoutsideLimit",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__Panorama,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPoutsideLimit" "', argument " "1"" of type '" "HuginBase::Panorama""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getCPoutsideLimit" "', argument " "1"" of type '" "HuginBase::Panorama""'");
    } else {
      HuginBase::Panorama * temp = reinterpret_cast< HuginBase::Panorama * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getCPoutsideLimit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = HuginBase::getCPoutsideLimit(arg1,arg2);
  resultobj = swig::from(static_cast< std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getCPoutsideLimit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getCPoutsideLimit",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__Panorama,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPoutsideLimit" "', argument " "1"" of type '" "HuginBase::Panorama""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getCPoutsideLimit" "', argument " "1"" of type '" "HuginBase::Panorama""'");
    } else {
      HuginBase::Panorama * temp = reinterpret_cast< HuginBase::Panorama * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = HuginBase::getCPoutsideLimit(arg1);
  resultobj = swig::from(static_cast< std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getCPoutsideLimit(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_getCPoutsideLimit__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__Panorama, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_getCPoutsideLimit__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getCPoutsideLimit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HuginBase::getCPoutsideLimit(HuginBase::Panorama,double)\n"
    "    HuginBase::getCPoutsideLimit(HuginBase::Panorama)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_getCPinMasks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getCPinMasks",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__Panorama,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPinMasks" "', argument " "1"" of type '" "HuginBase::Panorama""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getCPinMasks" "', argument " "1"" of type '" "HuginBase::Panorama""'");
    } else {
      HuginBase::Panorama * temp = reinterpret_cast< HuginBase::Panorama * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = HuginBase::getCPinMasks(arg1);
  resultobj = swig::from(static_cast< std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CalculateFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CalculateFOV *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalculateFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateFOV" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculateFOV" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::CalculateFOV *)new HuginBase::CalculateFOV(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateFOV, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalculateFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFOV *arg1 = (HuginBase::CalculateFOV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculateFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFOV, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculateFOV" "', argument " "1"" of type '" "HuginBase::CalculateFOV *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFOV * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFOV_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFOV *arg1 = (HuginBase::CalculateFOV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFOV_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFOV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFOV_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::CalculateFOV const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFOV * >(argp1);
  result = (bool)((HuginBase::CalculateFOV const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFOV_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFOV *arg1 = (HuginBase::CalculateFOV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFOV_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFOV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFOV_runAlgorithm" "', argument " "1"" of type '" "HuginBase::CalculateFOV *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFOV * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFOV_calcFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< hugin_utils::FDiff2D > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFOV_calcFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFOV_calcFOV" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateFOV_calcFOV" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = HuginBase::CalculateFOV::calcFOV((HuginBase::PanoramaData const &)*arg1);
  resultobj = SWIG_NewPointerObj((new hugin_utils::FDiff2D(static_cast< const hugin_utils::FDiff2D& >(result))), SWIGTYPE_p_hugin_utils__FDiff2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFOV_getResultHorizontalFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFOV *arg1 = (HuginBase::CalculateFOV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFOV_getResultHorizontalFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFOV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFOV_getResultHorizontalFOV" "', argument " "1"" of type '" "HuginBase::CalculateFOV *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFOV * >(argp1);
  result = (double)(arg1)->getResultHorizontalFOV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFOV_getResultVerticalFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFOV *arg1 = (HuginBase::CalculateFOV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFOV_getResultVerticalFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFOV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFOV_getResultVerticalFOV" "', argument " "1"" of type '" "HuginBase::CalculateFOV *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFOV * >(argp1);
  result = (double)(arg1)->getResultVerticalFOV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFOV_getResultFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFOV *arg1 = (HuginBase::CalculateFOV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< hugin_utils::FDiff2D > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFOV_getResultFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFOV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFOV_getResultFOV" "', argument " "1"" of type '" "HuginBase::CalculateFOV *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFOV * >(argp1);
  result = (arg1)->getResultFOV();
  resultobj = SWIG_NewPointerObj((new hugin_utils::FDiff2D(static_cast< const hugin_utils::FDiff2D& >(result))), SWIGTYPE_p_hugin_utils__FDiff2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculateFOV_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CalculateFOV, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CenterHorizontally(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CenterHorizontally *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CenterHorizontally",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CenterHorizontally" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CenterHorizontally" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::CenterHorizontally *)new HuginBase::CenterHorizontally(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CenterHorizontally, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CenterHorizontally(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CenterHorizontally *arg1 = (HuginBase::CenterHorizontally *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CenterHorizontally",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CenterHorizontally, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CenterHorizontally" "', argument " "1"" of type '" "HuginBase::CenterHorizontally *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CenterHorizontally * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CenterHorizontally_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CenterHorizontally *arg1 = (HuginBase::CenterHorizontally *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CenterHorizontally_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CenterHorizontally, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CenterHorizontally_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::CenterHorizontally const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CenterHorizontally * >(argp1);
  result = (bool)((HuginBase::CenterHorizontally const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CenterHorizontally_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CenterHorizontally *arg1 = (HuginBase::CenterHorizontally *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CenterHorizontally_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CenterHorizontally, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CenterHorizontally_runAlgorithm" "', argument " "1"" of type '" "HuginBase::CenterHorizontally *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CenterHorizontally * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CenterHorizontally_centerHorizontically(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CenterHorizontally_centerHorizontically",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CenterHorizontally_centerHorizontically" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CenterHorizontally_centerHorizontically" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  HuginBase::CenterHorizontally::centerHorizontically(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CenterHorizontally_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CenterHorizontally, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_estimateOutputROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  HuginBase::PanoramaOptions *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vigra::Rect2D result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:estimateOutputROI",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateOutputROI" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateOutputROI" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateOutputROI" "', argument " "2"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateOutputROI" "', argument " "2"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "estimateOutputROI" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = HuginBase::estimateOutputROI((HuginBase::PanoramaData const &)*arg1,(HuginBase::PanoramaOptions const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new vigra::Rect2D(static_cast< const vigra::Rect2D& >(result))), SWIGTYPE_p_vigra__Rect2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComputeImageROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::ComputeImageROI *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ComputeImageROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComputeImageROI" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ComputeImageROI" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ComputeImageROI" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ComputeImageROI" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg2 = ptr;
  }
  result = (HuginBase::ComputeImageROI *)new HuginBase::ComputeImageROI(*arg1,(HuginBase::UIntSet const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__ComputeImageROI, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComputeImageROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ComputeImageROI *arg1 = (HuginBase::ComputeImageROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComputeImageROI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ComputeImageROI, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComputeImageROI" "', argument " "1"" of type '" "HuginBase::ComputeImageROI *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ComputeImageROI * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeImageROI_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ComputeImageROI *arg1 = (HuginBase::ComputeImageROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComputeImageROI_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ComputeImageROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeImageROI_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::ComputeImageROI const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ComputeImageROI * >(argp1);
  result = (bool)((HuginBase::ComputeImageROI const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeImageROI_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ComputeImageROI *arg1 = (HuginBase::ComputeImageROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComputeImageROI_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ComputeImageROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeImageROI_runAlgorithm" "', argument " "1"" of type '" "HuginBase::ComputeImageROI *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ComputeImageROI * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeImageROI_getROIS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::ComputeImageROI *arg1 = (HuginBase::ComputeImageROI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< vigra::Rect2D,std::allocator< vigra::Rect2D > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComputeImageROI_getROIS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__ComputeImageROI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeImageROI_getROIS" "', argument " "1"" of type '" "HuginBase::ComputeImageROI *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::ComputeImageROI * >(argp1);
  result = (arg1)->getROIS();
  resultobj = SWIG_NewPointerObj((new std::vector< vigra::Rect2D,std::allocator< vigra::Rect2D > >(static_cast< const std::vector< vigra::Rect2D,std::allocator< vigra::Rect2D > >& >(result))), SWIGTYPE_p_std__vectorT_vigra__Rect2D_std__allocatorT_vigra__Rect2D_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeImageROI_computeROIS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  HuginBase::PanoramaOptions *arg2 = 0 ;
  HuginBase::UIntSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< vigra::Rect2D,std::allocator< vigra::Rect2D > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ComputeImageROI_computeROIS",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeImageROI_computeROIS" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeImageROI_computeROIS" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeImageROI_computeROIS" "', argument " "2"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeImageROI_computeROIS" "', argument " "2"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg2 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp2);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComputeImageROI_computeROIS" "', argument " "3"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeImageROI_computeROIS" "', argument " "3"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = HuginBase::ComputeImageROI::computeROIS((HuginBase::PanoramaData const &)*arg1,(HuginBase::PanoramaOptions const &)*arg2,(std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new std::vector< vigra::Rect2D,std::allocator< vigra::Rect2D > >(static_cast< const std::vector< vigra::Rect2D,std::allocator< vigra::Rect2D > >& >(result))), SWIGTYPE_p_std__vectorT_vigra__Rect2D_std__allocatorT_vigra__Rect2D_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *ComputeImageROI_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__ComputeImageROI, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CalculateFitPanorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::CalculateFitPanorama *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CalculateFitPanorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CalculateFitPanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CalculateFitPanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::CalculateFitPanorama *)new HuginBase::CalculateFitPanorama(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__CalculateFitPanorama, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CalculateFitPanorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFitPanorama *arg1 = (HuginBase::CalculateFitPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CalculateFitPanorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFitPanorama, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CalculateFitPanorama" "', argument " "1"" of type '" "HuginBase::CalculateFitPanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFitPanorama * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFitPanorama_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFitPanorama *arg1 = (HuginBase::CalculateFitPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFitPanorama_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFitPanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFitPanorama_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::CalculateFitPanorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFitPanorama * >(argp1);
  result = (bool)((HuginBase::CalculateFitPanorama const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFitPanorama_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFitPanorama *arg1 = (HuginBase::CalculateFitPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFitPanorama_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFitPanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFitPanorama_runAlgorithm" "', argument " "1"" of type '" "HuginBase::CalculateFitPanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFitPanorama * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFitPanorama_fitPano(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CalculateFitPanorama_fitPano",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFitPanorama_fitPano" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateFitPanorama_fitPano" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalculateFitPanorama_fitPano" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateFitPanorama_fitPano" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CalculateFitPanorama_fitPano" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalculateFitPanorama_fitPano" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  HuginBase::CalculateFitPanorama::fitPano(*arg1,*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFitPanorama_getResultHorizontalFOV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFitPanorama *arg1 = (HuginBase::CalculateFitPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFitPanorama_getResultHorizontalFOV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFitPanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFitPanorama_getResultHorizontalFOV" "', argument " "1"" of type '" "HuginBase::CalculateFitPanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFitPanorama * >(argp1);
  result = (double)(arg1)->getResultHorizontalFOV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalculateFitPanorama_getResultHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::CalculateFitPanorama *arg1 = (HuginBase::CalculateFitPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CalculateFitPanorama_getResultHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__CalculateFitPanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalculateFitPanorama_getResultHeight" "', argument " "1"" of type '" "HuginBase::CalculateFitPanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::CalculateFitPanorama * >(argp1);
  result = (double)(arg1)->getResultHeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CalculateFitPanorama_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__CalculateFitPanorama, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FitPanorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::FitPanorama *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FitPanorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FitPanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FitPanorama" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::FitPanorama *)new HuginBase::FitPanorama(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__FitPanorama, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FitPanorama(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::FitPanorama *arg1 = (HuginBase::FitPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FitPanorama",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__FitPanorama, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FitPanorama" "', argument " "1"" of type '" "HuginBase::FitPanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::FitPanorama * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitPanorama_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::FitPanorama *arg1 = (HuginBase::FitPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitPanorama_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__FitPanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitPanorama_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::FitPanorama const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::FitPanorama * >(argp1);
  result = (bool)((HuginBase::FitPanorama const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FitPanorama_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::FitPanorama *arg1 = (HuginBase::FitPanorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FitPanorama_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__FitPanorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FitPanorama_runAlgorithm" "', argument " "1"" of type '" "HuginBase::FitPanorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::FitPanorama * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FitPanorama_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__FitPanorama, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NonaFileOutputStitcher(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  AppBase::ProgressDisplay *arg2 = (AppBase::ProgressDisplay *) 0 ;
  HuginBase::PanoramaOptions *arg3 = 0 ;
  HuginBase::UIntSet *arg4 = 0 ;
  HuginBase::FileOutputStitcherAlgorithm::String *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HuginBase::NonaFileOutputStitcher *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_NonaFileOutputStitcher",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NonaFileOutputStitcher" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NonaFileOutputStitcher" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AppBase__ProgressDisplay, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NonaFileOutputStitcher" "', argument " "2"" of type '" "AppBase::ProgressDisplay *""'"); 
  }
  arg2 = reinterpret_cast< AppBase::ProgressDisplay * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_HuginBase__PanoramaOptions,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NonaFileOutputStitcher" "', argument " "3"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NonaFileOutputStitcher" "', argument " "3"" of type '" "HuginBase::PanoramaOptions const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::PanoramaOptions * >(argp3);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NonaFileOutputStitcher" "', argument " "4"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NonaFileOutputStitcher" "', argument " "4"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_NonaFileOutputStitcher" "', argument " "5"" of type '" "HuginBase::FileOutputStitcherAlgorithm::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NonaFileOutputStitcher" "', argument " "5"" of type '" "HuginBase::FileOutputStitcherAlgorithm::String const &""'"); 
    }
    arg5 = ptr;
  }
  result = (HuginBase::NonaFileOutputStitcher *)new HuginBase::NonaFileOutputStitcher(*arg1,arg2,(HuginBase::PanoramaOptions const &)*arg3,(HuginBase::UIntSet const &)*arg4,(HuginBase::FileOutputStitcherAlgorithm::String const &)*arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__NonaFileOutputStitcher, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NonaFileOutputStitcher(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::NonaFileOutputStitcher *arg1 = (HuginBase::NonaFileOutputStitcher *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NonaFileOutputStitcher",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__NonaFileOutputStitcher, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NonaFileOutputStitcher" "', argument " "1"" of type '" "HuginBase::NonaFileOutputStitcher *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::NonaFileOutputStitcher * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NonaFileOutputStitcher_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__NonaFileOutputStitcher, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PhotometricOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  AppBase::ProgressDisplay *arg2 = (AppBase::ProgressDisplay *) 0 ;
  HuginBase::OptimizeVector *arg3 = 0 ;
  HuginBase::PhotometricOptimizer::PointPairs *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HuginBase::PhotometricOptimizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_PhotometricOptimizer",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PhotometricOptimizer" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PhotometricOptimizer" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AppBase__ProgressDisplay, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PhotometricOptimizer" "', argument " "2"" of type '" "AppBase::ProgressDisplay *""'"); 
  }
  arg2 = reinterpret_cast< AppBase::ProgressDisplay * >(argp2);
  {
    std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *ptr = (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PhotometricOptimizer" "', argument " "3"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PhotometricOptimizer" "', argument " "3"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_PhotometricOptimizer" "', argument " "4"" of type '" "HuginBase::PhotometricOptimizer::PointPairs const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PhotometricOptimizer" "', argument " "4"" of type '" "HuginBase::PhotometricOptimizer::PointPairs const &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::PhotometricOptimizer::PointPairs * >(argp4);
  result = (HuginBase::PhotometricOptimizer *)new HuginBase::PhotometricOptimizer(*arg1,arg2,(HuginBase::OptimizeVector const &)*arg3,(HuginBase::PhotometricOptimizer::PointPairs const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PhotometricOptimizer, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PhotometricOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PhotometricOptimizer *arg1 = (HuginBase::PhotometricOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PhotometricOptimizer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PhotometricOptimizer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PhotometricOptimizer" "', argument " "1"" of type '" "HuginBase::PhotometricOptimizer *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PhotometricOptimizer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PhotometricOptimizer_optimizePhotometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  HuginBase::OptimizeVector *arg2 = 0 ;
  HuginBase::PhotometricOptimizer::PointPairs *arg3 = 0 ;
  AppBase::ProgressReporter *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PhotometricOptimizer_optimizePhotometric",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  {
    std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *ptr = (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "2"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "2"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "3"" of type '" "HuginBase::PhotometricOptimizer::PointPairs const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "3"" of type '" "HuginBase::PhotometricOptimizer::PointPairs const &""'"); 
  }
  arg3 = reinterpret_cast< HuginBase::PhotometricOptimizer::PointPairs * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_AppBase__ProgressReporter,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "4"" of type '" "AppBase::ProgressReporter &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "4"" of type '" "AppBase::ProgressReporter &""'"); 
  }
  arg4 = reinterpret_cast< AppBase::ProgressReporter * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhotometricOptimizer_optimizePhotometric" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  HuginBase::PhotometricOptimizer::optimizePhotometric(*arg1,(std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > const &)*arg2,(std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > const &)*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PhotometricOptimizer_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PhotometricOptimizer *arg1 = (HuginBase::PhotometricOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PhotometricOptimizer_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PhotometricOptimizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhotometricOptimizer_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::PhotometricOptimizer const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PhotometricOptimizer * >(argp1);
  result = (bool)((HuginBase::PhotometricOptimizer const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PhotometricOptimizer_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PhotometricOptimizer *arg1 = (HuginBase::PhotometricOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PhotometricOptimizer_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PhotometricOptimizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhotometricOptimizer_runAlgorithm" "', argument " "1"" of type '" "HuginBase::PhotometricOptimizer *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PhotometricOptimizer * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PhotometricOptimizer_getResultError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PhotometricOptimizer *arg1 = (HuginBase::PhotometricOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PhotometricOptimizer_getResultError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PhotometricOptimizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhotometricOptimizer_getResultError" "', argument " "1"" of type '" "HuginBase::PhotometricOptimizer const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PhotometricOptimizer * >(argp1);
  result = (double)((HuginBase::PhotometricOptimizer const *)arg1)->getResultError();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PhotometricOptimizer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PhotometricOptimizer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SmartPhotometricOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  AppBase::ProgressDisplay *arg2 = (AppBase::ProgressDisplay *) 0 ;
  HuginBase::OptimizeVector *arg3 = 0 ;
  HuginBase::PhotometricOptimizer::PointPairs *arg4 = 0 ;
  HuginBase::SmartPhotometricOptimizer::PhotometricOptimizeMode arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HuginBase::SmartPhotometricOptimizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_SmartPhotometricOptimizer",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SmartPhotometricOptimizer" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SmartPhotometricOptimizer" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AppBase__ProgressDisplay, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SmartPhotometricOptimizer" "', argument " "2"" of type '" "AppBase::ProgressDisplay *""'"); 
  }
  arg2 = reinterpret_cast< AppBase::ProgressDisplay * >(argp2);
  {
    std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *ptr = (std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SmartPhotometricOptimizer" "', argument " "3"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SmartPhotometricOptimizer" "', argument " "3"" of type '" "HuginBase::OptimizeVector const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SmartPhotometricOptimizer" "', argument " "4"" of type '" "HuginBase::PhotometricOptimizer::PointPairs const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SmartPhotometricOptimizer" "', argument " "4"" of type '" "HuginBase::PhotometricOptimizer::PointPairs const &""'"); 
  }
  arg4 = reinterpret_cast< HuginBase::PhotometricOptimizer::PointPairs * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SmartPhotometricOptimizer" "', argument " "5"" of type '" "HuginBase::SmartPhotometricOptimizer::PhotometricOptimizeMode""'");
  } 
  arg5 = static_cast< HuginBase::SmartPhotometricOptimizer::PhotometricOptimizeMode >(val5);
  result = (HuginBase::SmartPhotometricOptimizer *)new HuginBase::SmartPhotometricOptimizer(*arg1,arg2,(HuginBase::OptimizeVector const &)*arg3,(HuginBase::PhotometricOptimizer::PointPairs const &)*arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__SmartPhotometricOptimizer, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SmartPhotometricOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SmartPhotometricOptimizer *arg1 = (HuginBase::SmartPhotometricOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SmartPhotometricOptimizer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SmartPhotometricOptimizer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmartPhotometricOptimizer" "', argument " "1"" of type '" "HuginBase::SmartPhotometricOptimizer *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SmartPhotometricOptimizer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartPhotometricOptimizer_smartOptimizePhotometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  HuginBase::SmartPhotometricOptimizer::PhotometricOptimizeMode arg2 ;
  std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > *arg3 = 0 ;
  AppBase::ProgressReporter *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:SmartPhotometricOptimizer_smartOptimizePhotometric",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartPhotometricOptimizer_smartOptimizePhotometric" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmartPhotometricOptimizer_smartOptimizePhotometric" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmartPhotometricOptimizer_smartOptimizePhotometric" "', argument " "2"" of type '" "HuginBase::SmartPhotometricOptimizer::PhotometricOptimizeMode""'");
  } 
  arg2 = static_cast< HuginBase::SmartPhotometricOptimizer::PhotometricOptimizeMode >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SmartPhotometricOptimizer_smartOptimizePhotometric" "', argument " "3"" of type '" "std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmartPhotometricOptimizer_smartOptimizePhotometric" "', argument " "3"" of type '" "std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_AppBase__ProgressReporter,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SmartPhotometricOptimizer_smartOptimizePhotometric" "', argument " "4"" of type '" "AppBase::ProgressReporter &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmartPhotometricOptimizer_smartOptimizePhotometric" "', argument " "4"" of type '" "AppBase::ProgressReporter &""'"); 
  }
  arg4 = reinterpret_cast< AppBase::ProgressReporter * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SmartPhotometricOptimizer_smartOptimizePhotometric" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmartPhotometricOptimizer_smartOptimizePhotometric" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  HuginBase::SmartPhotometricOptimizer::smartOptimizePhotometric(*arg1,arg2,(std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > const &)*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartPhotometricOptimizer_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SmartPhotometricOptimizer *arg1 = (HuginBase::SmartPhotometricOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SmartPhotometricOptimizer_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SmartPhotometricOptimizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartPhotometricOptimizer_runAlgorithm" "', argument " "1"" of type '" "HuginBase::SmartPhotometricOptimizer *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SmartPhotometricOptimizer * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SmartPhotometricOptimizer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__SmartPhotometricOptimizer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PTOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PTOptimizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PTOptimizer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PTOptimizer" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PTOptimizer" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::PTOptimizer *)new HuginBase::PTOptimizer(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PTOptimizer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PTOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTOptimizer *arg1 = (HuginBase::PTOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PTOptimizer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTOptimizer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PTOptimizer" "', argument " "1"" of type '" "HuginBase::PTOptimizer *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTOptimizer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTOptimizer_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTOptimizer *arg1 = (HuginBase::PTOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PTOptimizer_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTOptimizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTOptimizer_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::PTOptimizer const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTOptimizer * >(argp1);
  result = (bool)((HuginBase::PTOptimizer const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTOptimizer_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PTOptimizer *arg1 = (HuginBase::PTOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PTOptimizer_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PTOptimizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PTOptimizer_runAlgorithm" "', argument " "1"" of type '" "HuginBase::PTOptimizer *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PTOptimizer * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PTOptimizer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PTOptimizer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AutoOptimise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::AutoOptimise *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AutoOptimise",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AutoOptimise" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AutoOptimise" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::AutoOptimise *)new HuginBase::AutoOptimise(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__AutoOptimise, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AutoOptimise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::AutoOptimise *arg1 = (HuginBase::AutoOptimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AutoOptimise",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__AutoOptimise, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AutoOptimise" "', argument " "1"" of type '" "HuginBase::AutoOptimise *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::AutoOptimise * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AutoOptimise_autoOptimise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AutoOptimise_autoOptimise",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutoOptimise_autoOptimise" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutoOptimise_autoOptimise" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  HuginBase::AutoOptimise::autoOptimise(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AutoOptimise_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::AutoOptimise *arg1 = (HuginBase::AutoOptimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AutoOptimise_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__AutoOptimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutoOptimise_runAlgorithm" "', argument " "1"" of type '" "HuginBase::AutoOptimise *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::AutoOptimise * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AutoOptimise_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__AutoOptimise, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SmartOptimizerStub_createOptVars__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HuginBase::OptimizeVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SmartOptimizerStub_createOptVars",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartOptimizerStub_createOptVars" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmartOptimizerStub_createOptVars" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmartOptimizerStub_createOptVars" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SmartOptimizerStub_createOptVars" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = HuginBase::SmartOptimizerStub::createOptVars((HuginBase::PanoramaData const &)*arg1,arg2,arg3);
  resultobj = swig::from(static_cast< std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartOptimizerStub_createOptVars__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  HuginBase::OptimizeVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SmartOptimizerStub_createOptVars",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartOptimizerStub_createOptVars" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmartOptimizerStub_createOptVars" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmartOptimizerStub_createOptVars" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = HuginBase::SmartOptimizerStub::createOptVars((HuginBase::PanoramaData const &)*arg1,arg2);
  resultobj = swig::from(static_cast< std::vector<std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartOptimizerStub_createOptVars(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SmartOptimizerStub_createOptVars__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_HuginBase__PanoramaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SmartOptimizerStub_createOptVars__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SmartOptimizerStub_createOptVars'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    createOptVars(HuginBase::PanoramaData const &,int,unsigned int)\n"
    "    HuginBase::SmartOptimizerStub::createOptVars(HuginBase::PanoramaData const &,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SmartOptimizerStub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SmartOptimizerStub *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SmartOptimizerStub")) SWIG_fail;
  result = (HuginBase::SmartOptimizerStub *)new HuginBase::SmartOptimizerStub();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__SmartOptimizerStub, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SmartOptimizerStub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SmartOptimizerStub *arg1 = (HuginBase::SmartOptimizerStub *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SmartOptimizerStub",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SmartOptimizerStub, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmartOptimizerStub" "', argument " "1"" of type '" "HuginBase::SmartOptimizerStub *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SmartOptimizerStub * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SmartOptimizerStub_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__SmartOptimizerStub, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SmartOptimise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::SmartOptimise *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SmartOptimise",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SmartOptimise" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SmartOptimise" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  result = (HuginBase::SmartOptimise *)new HuginBase::SmartOptimise(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__SmartOptimise, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SmartOptimise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SmartOptimise *arg1 = (HuginBase::SmartOptimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SmartOptimise",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SmartOptimise, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmartOptimise" "', argument " "1"" of type '" "HuginBase::SmartOptimise *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SmartOptimise * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartOptimise_smartOptimize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SmartOptimise_smartOptimize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartOptimise_smartOptimize" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SmartOptimise_smartOptimize" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  HuginBase::SmartOptimise::smartOptimize(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmartOptimise_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::SmartOptimise *arg1 = (HuginBase::SmartOptimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SmartOptimise_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__SmartOptimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmartOptimise_runAlgorithm" "', argument " "1"" of type '" "HuginBase::SmartOptimise *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::SmartOptimise * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SmartOptimise_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__SmartOptimise, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getHDRStacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > >,std::allocator< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getHDRStacks",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getHDRStacks" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getHDRStacks" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getHDRStacks" "', argument " "2"" of type '" "HuginBase::UIntSet""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = HuginBase::getHDRStacks((HuginBase::PanoramaData const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< HuginBase::UIntSet,std::allocator< HuginBase::UIntSet > >(static_cast< const std::vector< HuginBase::UIntSet,std::allocator< HuginBase::UIntSet > >& >(result))), SWIGTYPE_p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getExposureLayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > >,std::allocator< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getExposureLayers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getExposureLayers" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getExposureLayers" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getExposureLayers" "', argument " "2"" of type '" "HuginBase::UIntSet""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = HuginBase::getExposureLayers((HuginBase::PanoramaData const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< HuginBase::UIntSet,std::allocator< HuginBase::UIntSet > >(static_cast< const std::vector< HuginBase::UIntSet,std::allocator< HuginBase::UIntSet > >& >(result))), SWIGTYPE_p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getImagesinROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getImagesinROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getImagesinROI" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getImagesinROI" "', argument " "1"" of type '" "HuginBase::PanoramaData const &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "getImagesinROI" "', argument " "2"" of type '" "HuginBase::UIntSet const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = HuginBase::getImagesinROI((HuginBase::PanoramaData const &)*arg1,arg2);
  resultobj = swig::from(static_cast< std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PanoramaMakefilelibExport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  HuginBase::PanoramaMakefilelibExport::PTPrograms *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg7 = 0 ;
  std::ostream *arg8 = 0 ;
  std::string *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int res9 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  HuginBase::PanoramaMakefilelibExport *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_PanoramaMakefilelibExport",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PanoramaMakefilelibExport" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMakefilelibExport" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PanoramaMakefilelibExport" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMakefilelibExport" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PanoramaMakefilelibExport" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMakefilelibExport" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_PanoramaMakefilelibExport" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMakefilelibExport" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_HuginBase__PanoramaMakefilelibExport__PTPrograms,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_PanoramaMakefilelibExport" "', argument " "5"" of type '" "HuginBase::PanoramaMakefilelibExport::PTPrograms const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMakefilelibExport" "', argument " "5"" of type '" "HuginBase::PanoramaMakefilelibExport::PTPrograms const &""'"); 
  }
  arg5 = reinterpret_cast< HuginBase::PanoramaMakefilelibExport::PTPrograms * >(argp5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_PanoramaMakefilelibExport" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMakefilelibExport" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_PanoramaMakefilelibExport" "', argument " "7"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMakefilelibExport" "', argument " "7"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg7 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_PanoramaMakefilelibExport" "', argument " "8"" of type '" "std::ostream &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMakefilelibExport" "', argument " "8"" of type '" "std::ostream &""'"); 
  }
  arg8 = reinterpret_cast< std::ostream * >(argp8);
  {
    std::string *ptr = (std::string *)0;
    res9 = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_PanoramaMakefilelibExport" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PanoramaMakefilelibExport" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    arg9 = ptr;
  }
  result = (HuginBase::PanoramaMakefilelibExport *)new HuginBase::PanoramaMakefilelibExport(*arg1,(HuginBase::UIntSet const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(HuginBase::PanoramaMakefilelibExport::PTPrograms const &)*arg5,(std::string const &)*arg6,*arg7,*arg8,(std::string const &)*arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PanoramaMakefilelibExport, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res9)) delete arg9;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res9)) delete arg9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaMakefilelibExport_createMakefile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  HuginBase::UIntSet *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  HuginBase::PanoramaMakefilelibExport::PTPrograms *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg7 = 0 ;
  std::ostream *arg8 = 0 ;
  std::string *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int res9 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:PanoramaMakefilelibExport_createMakefile",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  {
    std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *ptr = (std::set<unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "2"" of type '" "HuginBase::UIntSet const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_HuginBase__PanoramaMakefilelibExport__PTPrograms,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "5"" of type '" "HuginBase::PanoramaMakefilelibExport::PTPrograms const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "5"" of type '" "HuginBase::PanoramaMakefilelibExport::PTPrograms const &""'"); 
  }
  arg5 = reinterpret_cast< HuginBase::PanoramaMakefilelibExport::PTPrograms * >(argp5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "7"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "7"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg7 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "8"" of type '" "std::ostream &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "8"" of type '" "std::ostream &""'"); 
  }
  arg8 = reinterpret_cast< std::ostream * >(argp8);
  {
    std::string *ptr = (std::string *)0;
    res9 = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PanoramaMakefilelibExport_createMakefile" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    arg9 = ptr;
  }
  HuginBase::PanoramaMakefilelibExport::createMakefile(*arg1,(std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(HuginBase::PanoramaMakefilelibExport::PTPrograms const &)*arg5,(std::string const &)*arg6,*arg7,*arg8,(std::string const &)*arg9);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res9)) delete arg9;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res9)) delete arg9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaMakefilelibExport_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaMakefilelibExport *arg1 = (HuginBase::PanoramaMakefilelibExport *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaMakefilelibExport_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaMakefilelibExport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaMakefilelibExport_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::PanoramaMakefilelibExport const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaMakefilelibExport * >(argp1);
  result = (bool)((HuginBase::PanoramaMakefilelibExport const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PanoramaMakefilelibExport_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaMakefilelibExport *arg1 = (HuginBase::PanoramaMakefilelibExport *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PanoramaMakefilelibExport_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaMakefilelibExport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PanoramaMakefilelibExport_runAlgorithm" "', argument " "1"" of type '" "HuginBase::PanoramaMakefilelibExport *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaMakefilelibExport * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PanoramaMakefilelibExport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaMakefilelibExport *arg1 = (HuginBase::PanoramaMakefilelibExport *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PanoramaMakefilelibExport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PanoramaMakefilelibExport, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PanoramaMakefilelibExport" "', argument " "1"" of type '" "HuginBase::PanoramaMakefilelibExport *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaMakefilelibExport * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PanoramaMakefilelibExport_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PanoramaMakefilelibExport, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_printstacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HuginBase::UIntSet,std::allocator< HuginBase::UIntSet > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:printstacks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "printstacks" "', argument " "1"" of type '" "std::vector< HuginBase::UIntSet,std::allocator< HuginBase::UIntSet > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "printstacks" "', argument " "1"" of type '" "std::vector< HuginBase::UIntSet,std::allocator< HuginBase::UIntSet > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HuginBase::UIntSet,std::allocator< HuginBase::UIntSet > > * >(argp1);
  HuginBase::printstacks((std::vector< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > >,std::allocator< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > > const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PointSampler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PointSampler *arg1 = (HuginBase::PointSampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PointSampler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PointSampler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PointSampler" "', argument " "1"" of type '" "HuginBase::PointSampler *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PointSampler * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointSampler_extractPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  SwigValueWrapper< std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > > arg2 ;
  int arg3 ;
  bool arg4 ;
  AppBase::ProgressReporter *arg5 = 0 ;
  std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:PointSampler_extractPoints",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointSampler_extractPoints" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PointSampler_extractPoints" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PointSampler_extractPoints" "', argument " "2"" of type '" "std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PointSampler_extractPoints" "', argument " "2"" of type '" "std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > >""'");
    } else {
      std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > * temp = reinterpret_cast< std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PointSampler_extractPoints" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PointSampler_extractPoints" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_AppBase__ProgressReporter,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PointSampler_extractPoints" "', argument " "5"" of type '" "AppBase::ProgressReporter &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PointSampler_extractPoints" "', argument " "5"" of type '" "AppBase::ProgressReporter &""'"); 
  }
  arg5 = reinterpret_cast< AppBase::ProgressReporter * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PointSampler_extractPoints" "', argument " "6"" of type '" "std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PointSampler_extractPoints" "', argument " "6"" of type '" "std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > &""'"); 
  }
  arg6 = reinterpret_cast< std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > * >(argp6);
  HuginBase::PointSampler::extractPoints(*arg1,arg2,arg3,arg4,*arg5,*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointSampler_modifiesPanoramaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PointSampler *arg1 = (HuginBase::PointSampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PointSampler_modifiesPanoramaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PointSampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointSampler_modifiesPanoramaData" "', argument " "1"" of type '" "HuginBase::PointSampler const *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PointSampler * >(argp1);
  result = (bool)((HuginBase::PointSampler const *)arg1)->modifiesPanoramaData();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointSampler_runAlgorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PointSampler *arg1 = (HuginBase::PointSampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PointSampler_runAlgorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PointSampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointSampler_runAlgorithm" "', argument " "1"" of type '" "HuginBase::PointSampler *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PointSampler * >(argp1);
  result = (bool)(arg1)->runAlgorithm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointSampler_execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PointSampler *arg1 = (HuginBase::PointSampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::PointSampler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PointSampler_execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PointSampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointSampler_execute" "', argument " "1"" of type '" "HuginBase::PointSampler *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PointSampler * >(argp1);
  result = (HuginBase::PointSampler *) &(arg1)->execute();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__PointSampler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PointSampler_getResultPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PointSampler *arg1 = (HuginBase::PointSampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PointSampler_getResultPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__PointSampler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PointSampler_getResultPoints" "', argument " "1"" of type '" "HuginBase::PointSampler *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PointSampler * >(argp1);
  result = (arg1)->getResultPoints();
  resultobj = SWIG_NewPointerObj((new HuginBase::PointSampler::PointPairs(static_cast< const HuginBase::PointSampler::PointPairs& >(result))), SWIGTYPE_p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PointSampler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__PointSampler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AllPointSampler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  AppBase::ProgressDisplay *arg2 = (AppBase::ProgressDisplay *) 0 ;
  SwigValueWrapper< std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > > arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HuginBase::AllPointSampler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_AllPointSampler",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AllPointSampler" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AllPointSampler" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AppBase__ProgressDisplay, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AllPointSampler" "', argument " "2"" of type '" "AppBase::ProgressDisplay *""'"); 
  }
  arg2 = reinterpret_cast< AppBase::ProgressDisplay * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_AllPointSampler" "', argument " "3"" of type '" "std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AllPointSampler" "', argument " "3"" of type '" "std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > >""'");
    } else {
      std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > * temp = reinterpret_cast< std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AllPointSampler" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (HuginBase::AllPointSampler *)new HuginBase::AllPointSampler(*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__AllPointSampler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AllPointSampler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::AllPointSampler *arg1 = (HuginBase::AllPointSampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AllPointSampler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__AllPointSampler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AllPointSampler" "', argument " "1"" of type '" "HuginBase::AllPointSampler *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::AllPointSampler * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AllPointSampler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__AllPointSampler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RandomPointSampler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::PanoramaData *arg1 = 0 ;
  AppBase::ProgressDisplay *arg2 = (AppBase::ProgressDisplay *) 0 ;
  SwigValueWrapper< std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > > arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  HuginBase::RandomPointSampler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RandomPointSampler",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_HuginBase__PanoramaData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomPointSampler" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomPointSampler" "', argument " "1"" of type '" "HuginBase::PanoramaData &""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::PanoramaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AppBase__ProgressDisplay, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RandomPointSampler" "', argument " "2"" of type '" "AppBase::ProgressDisplay *""'"); 
  }
  arg2 = reinterpret_cast< AppBase::ProgressDisplay * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RandomPointSampler" "', argument " "3"" of type '" "std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomPointSampler" "', argument " "3"" of type '" "std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > >""'");
    } else {
      std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > * temp = reinterpret_cast< std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RandomPointSampler" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (HuginBase::RandomPointSampler *)new HuginBase::RandomPointSampler(*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__RandomPointSampler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RandomPointSampler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::RandomPointSampler *arg1 = (HuginBase::RandomPointSampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RandomPointSampler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__RandomPointSampler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RandomPointSampler" "', argument " "1"" of type '" "HuginBase::RandomPointSampler *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::RandomPointSampler * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RandomPointSampler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HuginBase__RandomPointSampler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pano_open(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  HuginBase::Panorama *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pano_open",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pano_open" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (HuginBase::Panorama *)pano_open((char const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pano_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pano_close",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pano_close" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  pano_close(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_std_ifstream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  std::istream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:make_std_ifstream",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_std_ifstream" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (std::istream *)make_std_ifstream((char const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_std_ofstream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:make_std_ofstream",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_std_ofstream" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (std::ostream *)make_std_ofstream((char const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_hello_python(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HuginBase::Panorama *arg1 = (HuginBase::Panorama *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:hello_python",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HuginBase__Panorama, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hello_python" "', argument " "1"" of type '" "HuginBase::Panorama *""'"); 
  }
  arg1 = reinterpret_cast< HuginBase::Panorama * >(argp1);
  hello_python(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_DocumentData", _wrap_delete_DocumentData, METH_VARARGS, (char *)"delete_DocumentData(DocumentData self)"},
	 { (char *)"DocumentData_readData", _wrap_DocumentData_readData, METH_VARARGS, (char *)"\n"
		"readData(std::istream dataInput, string documentType = \"\") -> ReadWriteError\n"
		"DocumentData_readData(DocumentData self, std::istream dataInput) -> ReadWriteError\n"
		""},
	 { (char *)"DocumentData_writeData", _wrap_DocumentData_writeData, METH_VARARGS, (char *)"\n"
		"writeData(std::ostream dataOutput, string documentType = \"\") -> ReadWriteError\n"
		"DocumentData_writeData(DocumentData self, std::ostream dataOutput) -> ReadWriteError\n"
		""},
	 { (char *)"DocumentData_isDirty", _wrap_DocumentData_isDirty, METH_VARARGS, (char *)"DocumentData_isDirty(DocumentData self) -> bool"},
	 { (char *)"DocumentData_clearDirty", _wrap_DocumentData_clearDirty, METH_VARARGS, (char *)"DocumentData_clearDirty(DocumentData self)"},
	 { (char *)"DocumentData_swigregister", DocumentData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_PanoramaData", _wrap_delete_PanoramaData, METH_VARARGS, (char *)"delete_PanoramaData(PanoramaData self)"},
	 { (char *)"PanoramaData_getNewSubset", _wrap_PanoramaData_getNewSubset, METH_VARARGS, (char *)"PanoramaData_getNewSubset(PanoramaData self, UIntSet imgs) -> PanoramaData"},
	 { (char *)"PanoramaData_getNewCopy", _wrap_PanoramaData_getNewCopy, METH_VARARGS, (char *)"PanoramaData_getNewCopy(PanoramaData self) -> PanoramaData"},
	 { (char *)"PanoramaData_getNrOfImages", _wrap_PanoramaData_getNrOfImages, METH_VARARGS, (char *)"PanoramaData_getNrOfImages(PanoramaData self) -> std::size_t"},
	 { (char *)"PanoramaData_getImage", _wrap_PanoramaData_getImage, METH_VARARGS, (char *)"PanoramaData_getImage(PanoramaData self, std::size_t nr) -> SrcPanoImage"},
	 { (char *)"PanoramaData_setImage", _wrap_PanoramaData_setImage, METH_VARARGS, (char *)"PanoramaData_setImage(PanoramaData self, std::size_t nr, SrcPanoImage img)"},
	 { (char *)"PanoramaData_addImage", _wrap_PanoramaData_addImage, METH_VARARGS, (char *)"PanoramaData_addImage(PanoramaData self, SrcPanoImage img) -> unsigned int"},
	 { (char *)"PanoramaData_removeImage", _wrap_PanoramaData_removeImage, METH_VARARGS, (char *)"PanoramaData_removeImage(PanoramaData self, unsigned int nr)"},
	 { (char *)"PanoramaData_swapImages", _wrap_PanoramaData_swapImages, METH_VARARGS, (char *)"PanoramaData_swapImages(PanoramaData self, unsigned int img1, unsigned int img2)"},
	 { (char *)"PanoramaData_getSrcImage", _wrap_PanoramaData_getSrcImage, METH_VARARGS, (char *)"PanoramaData_getSrcImage(PanoramaData self, unsigned int imgNr) -> SrcPanoImage"},
	 { (char *)"PanoramaData_setSrcImage", _wrap_PanoramaData_setSrcImage, METH_VARARGS, (char *)"PanoramaData_setSrcImage(PanoramaData self, unsigned int nr, SrcPanoImage img)"},
	 { (char *)"PanoramaData_setImageFilename", _wrap_PanoramaData_setImageFilename, METH_VARARGS, (char *)"PanoramaData_setImageFilename(PanoramaData self, unsigned int img, string fname)"},
	 { (char *)"PanoramaData_setImageOptions", _wrap_PanoramaData_setImageOptions, METH_VARARGS, (char *)"PanoramaData_setImageOptions(PanoramaData self, unsigned int i, ImageOptions opts)"},
	 { (char *)"PanoramaData_activateImage", _wrap_PanoramaData_activateImage, METH_VARARGS, (char *)"\n"
		"activateImage(unsigned int imgNr, bool active = True)\n"
		"PanoramaData_activateImage(PanoramaData self, unsigned int imgNr)\n"
		""},
	 { (char *)"PanoramaData_getActiveImages", _wrap_PanoramaData_getActiveImages, METH_VARARGS, (char *)"PanoramaData_getActiveImages(PanoramaData self) -> UIntSet"},
	 { (char *)"PanoramaData_getNrOfCtrlPoints", _wrap_PanoramaData_getNrOfCtrlPoints, METH_VARARGS, (char *)"PanoramaData_getNrOfCtrlPoints(PanoramaData self) -> std::size_t"},
	 { (char *)"PanoramaData_getCtrlPoint", _wrap_PanoramaData_getCtrlPoint, METH_VARARGS, (char *)"PanoramaData_getCtrlPoint(PanoramaData self, std::size_t nr) -> ControlPoint"},
	 { (char *)"PanoramaData_getCtrlPoints", _wrap_PanoramaData_getCtrlPoints, METH_VARARGS, (char *)"PanoramaData_getCtrlPoints(PanoramaData self) -> CPVector"},
	 { (char *)"PanoramaData_getCtrlPointsForImage", _wrap_PanoramaData_getCtrlPointsForImage, METH_VARARGS, (char *)"PanoramaData_getCtrlPointsForImage(PanoramaData self, unsigned int imgNr) -> std::vector<(unsigned int,std::allocator<(unsigned int)>)>"},
	 { (char *)"PanoramaData_setCtrlPoints", _wrap_PanoramaData_setCtrlPoints, METH_VARARGS, (char *)"PanoramaData_setCtrlPoints(PanoramaData self, CPVector points)"},
	 { (char *)"PanoramaData_addCtrlPoint", _wrap_PanoramaData_addCtrlPoint, METH_VARARGS, (char *)"PanoramaData_addCtrlPoint(PanoramaData self, ControlPoint point) -> unsigned int"},
	 { (char *)"PanoramaData_removeCtrlPoint", _wrap_PanoramaData_removeCtrlPoint, METH_VARARGS, (char *)"PanoramaData_removeCtrlPoint(PanoramaData self, unsigned int pNr)"},
	 { (char *)"PanoramaData_removeDuplicateCtrlPoints", _wrap_PanoramaData_removeDuplicateCtrlPoints, METH_VARARGS, (char *)"PanoramaData_removeDuplicateCtrlPoints(PanoramaData self)"},
	 { (char *)"PanoramaData_changeControlPoint", _wrap_PanoramaData_changeControlPoint, METH_VARARGS, (char *)"PanoramaData_changeControlPoint(PanoramaData self, unsigned int pNr, ControlPoint point)"},
	 { (char *)"PanoramaData_getNextCPTypeLineNumber", _wrap_PanoramaData_getNextCPTypeLineNumber, METH_VARARGS, (char *)"PanoramaData_getNextCPTypeLineNumber(PanoramaData self) -> int"},
	 { (char *)"PanoramaData_updateLineCtrlPoints", _wrap_PanoramaData_updateLineCtrlPoints, METH_VARARGS, (char *)"PanoramaData_updateLineCtrlPoints(PanoramaData self)"},
	 { (char *)"PanoramaData_updateCtrlPointErrors", _wrap_PanoramaData_updateCtrlPointErrors, METH_VARARGS, (char *)"\n"
		"updateCtrlPointErrors(CPVector controlPoints)\n"
		"PanoramaData_updateCtrlPointErrors(PanoramaData self, UIntSet imgs, CPVector cps)\n"
		""},
	 { (char *)"PanoramaData_getVariables", _wrap_PanoramaData_getVariables, METH_VARARGS, (char *)"PanoramaData_getVariables(PanoramaData self) -> VariableMapVector"},
	 { (char *)"PanoramaData_getImageVariables", _wrap_PanoramaData_getImageVariables, METH_VARARGS, (char *)"PanoramaData_getImageVariables(PanoramaData self, unsigned int imgNr) -> VariableMap"},
	 { (char *)"PanoramaData_updateVariables", _wrap_PanoramaData_updateVariables, METH_VARARGS, (char *)"\n"
		"updateVariables(VariableMapVector vars)\n"
		"updateVariables(UIntSet imgs, VariableMapVector var)\n"
		"PanoramaData_updateVariables(PanoramaData self, unsigned int imgNr, VariableMap var)\n"
		""},
	 { (char *)"PanoramaData_updateVariable", _wrap_PanoramaData_updateVariable, METH_VARARGS, (char *)"PanoramaData_updateVariable(PanoramaData self, unsigned int imgNr, Variable var)"},
	 { (char *)"PanoramaData_getOptimizeVector", _wrap_PanoramaData_getOptimizeVector, METH_VARARGS, (char *)"PanoramaData_getOptimizeVector(PanoramaData self) -> OptimizeVector"},
	 { (char *)"PanoramaData_setOptimizeVector", _wrap_PanoramaData_setOptimizeVector, METH_VARARGS, (char *)"PanoramaData_setOptimizeVector(PanoramaData self, OptimizeVector optvec)"},
	 { (char *)"PanoramaData_getOptions", _wrap_PanoramaData_getOptions, METH_VARARGS, (char *)"PanoramaData_getOptions(PanoramaData self) -> PanoramaOptions"},
	 { (char *)"PanoramaData_setOptions", _wrap_PanoramaData_setOptions, METH_VARARGS, (char *)"PanoramaData_setOptions(PanoramaData self, PanoramaOptions opt)"},
	 { (char *)"PanoramaData_parseOptimizerScript", _wrap_PanoramaData_parseOptimizerScript, METH_VARARGS, (char *)"\n"
		"PanoramaData_parseOptimizerScript(PanoramaData self, std::istream i, UIntSet imgs, VariableMapVector imgVars, \n"
		"    CPVector ctrlPoints)\n"
		""},
	 { (char *)"PanoramaData_printPanoramaScript", _wrap_PanoramaData_printPanoramaScript, METH_VARARGS, (char *)"\n"
		"printPanoramaScript(std::ostream o, OptimizeVector optvars, PanoramaOptions options, \n"
		"    UIntSet imgs, bool forPTOptimizer, \n"
		"    string stripPrefix = \"\")\n"
		"PanoramaData_printPanoramaScript(PanoramaData self, std::ostream o, OptimizeVector optvars, \n"
		"    PanoramaOptions options, UIntSet imgs, \n"
		"    bool forPTOptimizer)\n"
		""},
	 { (char *)"PanoramaData_printStitcherScript", _wrap_PanoramaData_printStitcherScript, METH_VARARGS, (char *)"\n"
		"PanoramaData_printStitcherScript(PanoramaData self, std::ostream o, PanoramaOptions target, \n"
		"    UIntSet imgs)\n"
		""},
	 { (char *)"PanoramaData_changeFinished", _wrap_PanoramaData_changeFinished, METH_VARARGS, (char *)"PanoramaData_changeFinished(PanoramaData self)"},
	 { (char *)"PanoramaData_imageChanged", _wrap_PanoramaData_imageChanged, METH_VARARGS, (char *)"PanoramaData_imageChanged(PanoramaData self, unsigned int imgNr)"},
	 { (char *)"PanoramaData_swigregister", PanoramaData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_PanoramaObserver", _wrap_delete_PanoramaObserver, METH_VARARGS, (char *)"delete_PanoramaObserver(PanoramaObserver self)"},
	 { (char *)"PanoramaObserver_panoramaChanged", _wrap_PanoramaObserver_panoramaChanged, METH_VARARGS, (char *)"PanoramaObserver_panoramaChanged(PanoramaObserver self, PanoramaData pano)"},
	 { (char *)"PanoramaObserver_panoramaImagesChanged", _wrap_PanoramaObserver_panoramaImagesChanged, METH_VARARGS, (char *)"PanoramaObserver_panoramaImagesChanged(PanoramaObserver self, PanoramaData pano, UIntSet changed)"},
	 { (char *)"PanoramaObserver_swigregister", PanoramaObserver_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_PanoramaDataMemento", _wrap_delete_PanoramaDataMemento, METH_VARARGS, (char *)"delete_PanoramaDataMemento(PanoramaDataMemento self)"},
	 { (char *)"PanoramaDataMemento_swigregister", PanoramaDataMemento_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ManagedPanoramaData", _wrap_delete_ManagedPanoramaData, METH_VARARGS, (char *)"delete_ManagedPanoramaData(ManagedPanoramaData self)"},
	 { (char *)"ManagedPanoramaData_addObserver", _wrap_ManagedPanoramaData_addObserver, METH_VARARGS, (char *)"ManagedPanoramaData_addObserver(ManagedPanoramaData self, PanoramaObserver o)"},
	 { (char *)"ManagedPanoramaData_removeObserver", _wrap_ManagedPanoramaData_removeObserver, METH_VARARGS, (char *)"ManagedPanoramaData_removeObserver(ManagedPanoramaData self, PanoramaObserver observer) -> bool"},
	 { (char *)"ManagedPanoramaData_clearObservers", _wrap_ManagedPanoramaData_clearObservers, METH_VARARGS, (char *)"ManagedPanoramaData_clearObservers(ManagedPanoramaData self)"},
	 { (char *)"ManagedPanoramaData_changeFinished", _wrap_ManagedPanoramaData_changeFinished, METH_VARARGS, (char *)"ManagedPanoramaData_changeFinished(ManagedPanoramaData self)"},
	 { (char *)"ManagedPanoramaData_imageChanged", _wrap_ManagedPanoramaData_imageChanged, METH_VARARGS, (char *)"ManagedPanoramaData_imageChanged(ManagedPanoramaData self, unsigned int imgNr)"},
	 { (char *)"ManagedPanoramaData_getNewMemento", _wrap_ManagedPanoramaData_getNewMemento, METH_VARARGS, (char *)"ManagedPanoramaData_getNewMemento(ManagedPanoramaData self) -> PanoramaDataMemento"},
	 { (char *)"ManagedPanoramaData_setMementoToCopyOf", _wrap_ManagedPanoramaData_setMementoToCopyOf, METH_VARARGS, (char *)"ManagedPanoramaData_setMementoToCopyOf(ManagedPanoramaData self, PanoramaDataMemento memento) -> bool"},
	 { (char *)"ManagedPanoramaData_needsOptimization", _wrap_ManagedPanoramaData_needsOptimization, METH_VARARGS, (char *)"ManagedPanoramaData_needsOptimization(ManagedPanoramaData self) -> bool"},
	 { (char *)"ManagedPanoramaData_markAsOptimized", _wrap_ManagedPanoramaData_markAsOptimized, METH_VARARGS, (char *)"\n"
		"markAsOptimized(bool optimized = True)\n"
		"ManagedPanoramaData_markAsOptimized(ManagedPanoramaData self)\n"
		""},
	 { (char *)"ManagedPanoramaData_swigregister", ManagedPanoramaData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n = 1) -> SwigPyIterator\n"
		"SwigPyIterator_incr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n = 1) -> SwigPyIterator\n"
		"SwigPyIterator_decr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"UIntVector_iterator", _wrap_UIntVector_iterator, METH_VARARGS, (char *)"UIntVector_iterator(UIntVector self) -> SwigPyIterator"},
	 { (char *)"UIntVector___nonzero__", _wrap_UIntVector___nonzero__, METH_VARARGS, (char *)"UIntVector___nonzero__(UIntVector self) -> bool"},
	 { (char *)"UIntVector___bool__", _wrap_UIntVector___bool__, METH_VARARGS, (char *)"UIntVector___bool__(UIntVector self) -> bool"},
	 { (char *)"UIntVector___len__", _wrap_UIntVector___len__, METH_VARARGS, (char *)"UIntVector___len__(UIntVector self) -> size_type"},
	 { (char *)"UIntVector_pop", _wrap_UIntVector_pop, METH_VARARGS, (char *)"UIntVector_pop(UIntVector self) -> value_type"},
	 { (char *)"UIntVector___getslice__", _wrap_UIntVector___getslice__, METH_VARARGS, (char *)"UIntVector___getslice__(UIntVector self, difference_type i, difference_type j) -> std::vector<(unsigned int,std::allocator<(unsigned int)>)>"},
	 { (char *)"UIntVector___setslice__", _wrap_UIntVector___setslice__, METH_VARARGS, (char *)"\n"
		"UIntVector___setslice__(UIntVector self, difference_type i, difference_type j, \n"
		"    std::vector<(unsigned int,std::allocator<(unsigned int)>)> v)\n"
		""},
	 { (char *)"UIntVector___delslice__", _wrap_UIntVector___delslice__, METH_VARARGS, (char *)"UIntVector___delslice__(UIntVector self, difference_type i, difference_type j)"},
	 { (char *)"UIntVector___delitem__", _wrap_UIntVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"UIntVector___delitem__(UIntVector self, PySliceObject slice)\n"
		""},
	 { (char *)"UIntVector___getitem__", _wrap_UIntVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> std::vector<(unsigned int,std::allocator<(unsigned int)>)>\n"
		"UIntVector___getitem__(UIntVector self, difference_type i) -> value_type\n"
		""},
	 { (char *)"UIntVector___setitem__", _wrap_UIntVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, std::vector<(unsigned int,std::allocator<(unsigned int)>)> v)\n"
		"UIntVector___setitem__(UIntVector self, difference_type i, value_type x)\n"
		""},
	 { (char *)"UIntVector_append", _wrap_UIntVector_append, METH_VARARGS, (char *)"UIntVector_append(UIntVector self, value_type x)"},
	 { (char *)"UIntVector_empty", _wrap_UIntVector_empty, METH_VARARGS, (char *)"UIntVector_empty(UIntVector self) -> bool"},
	 { (char *)"UIntVector_size", _wrap_UIntVector_size, METH_VARARGS, (char *)"UIntVector_size(UIntVector self) -> size_type"},
	 { (char *)"UIntVector_clear", _wrap_UIntVector_clear, METH_VARARGS, (char *)"UIntVector_clear(UIntVector self)"},
	 { (char *)"UIntVector_swap", _wrap_UIntVector_swap, METH_VARARGS, (char *)"UIntVector_swap(UIntVector self, std::vector<(unsigned int)> v)"},
	 { (char *)"UIntVector_get_allocator", _wrap_UIntVector_get_allocator, METH_VARARGS, (char *)"UIntVector_get_allocator(UIntVector self) -> allocator_type"},
	 { (char *)"UIntVector_begin", _wrap_UIntVector_begin, METH_VARARGS, (char *)"UIntVector_begin(UIntVector self) -> const_iterator"},
	 { (char *)"UIntVector_end", _wrap_UIntVector_end, METH_VARARGS, (char *)"UIntVector_end(UIntVector self) -> const_iterator"},
	 { (char *)"UIntVector_rbegin", _wrap_UIntVector_rbegin, METH_VARARGS, (char *)"UIntVector_rbegin(UIntVector self) -> const_reverse_iterator"},
	 { (char *)"UIntVector_rend", _wrap_UIntVector_rend, METH_VARARGS, (char *)"UIntVector_rend(UIntVector self) -> const_reverse_iterator"},
	 { (char *)"UIntVector_pop_back", _wrap_UIntVector_pop_back, METH_VARARGS, (char *)"UIntVector_pop_back(UIntVector self)"},
	 { (char *)"UIntVector_erase", _wrap_UIntVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"UIntVector_erase(UIntVector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_UIntVector", _wrap_new_UIntVector, METH_VARARGS, (char *)"\n"
		"UIntVector()\n"
		"UIntVector(std::vector<(unsigned int)> arg0)\n"
		"UIntVector(size_type size)\n"
		"new_UIntVector(size_type size, value_type value) -> UIntVector\n"
		""},
	 { (char *)"UIntVector_push_back", _wrap_UIntVector_push_back, METH_VARARGS, (char *)"UIntVector_push_back(UIntVector self, value_type x)"},
	 { (char *)"UIntVector_front", _wrap_UIntVector_front, METH_VARARGS, (char *)"UIntVector_front(UIntVector self) -> value_type"},
	 { (char *)"UIntVector_back", _wrap_UIntVector_back, METH_VARARGS, (char *)"UIntVector_back(UIntVector self) -> value_type"},
	 { (char *)"UIntVector_assign", _wrap_UIntVector_assign, METH_VARARGS, (char *)"UIntVector_assign(UIntVector self, size_type n, value_type x)"},
	 { (char *)"UIntVector_resize", _wrap_UIntVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"UIntVector_resize(UIntVector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"UIntVector_insert", _wrap_UIntVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"UIntVector_insert(UIntVector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"UIntVector_reserve", _wrap_UIntVector_reserve, METH_VARARGS, (char *)"UIntVector_reserve(UIntVector self, size_type n)"},
	 { (char *)"UIntVector_capacity", _wrap_UIntVector_capacity, METH_VARARGS, (char *)"UIntVector_capacity(UIntVector self) -> size_type"},
	 { (char *)"delete_UIntVector", _wrap_delete_UIntVector, METH_VARARGS, (char *)"delete_UIntVector(UIntVector self)"},
	 { (char *)"UIntVector_swigregister", UIntVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"UIntSet_iterator", _wrap_UIntSet_iterator, METH_VARARGS, (char *)"UIntSet_iterator(UIntSet self) -> SwigPyIterator"},
	 { (char *)"UIntSet___nonzero__", _wrap_UIntSet___nonzero__, METH_VARARGS, (char *)"UIntSet___nonzero__(UIntSet self) -> bool"},
	 { (char *)"UIntSet___bool__", _wrap_UIntSet___bool__, METH_VARARGS, (char *)"UIntSet___bool__(UIntSet self) -> bool"},
	 { (char *)"UIntSet___len__", _wrap_UIntSet___len__, METH_VARARGS, (char *)"UIntSet___len__(UIntSet self) -> size_type"},
	 { (char *)"UIntSet_append", _wrap_UIntSet_append, METH_VARARGS, (char *)"UIntSet_append(UIntSet self, value_type x)"},
	 { (char *)"UIntSet___contains__", _wrap_UIntSet___contains__, METH_VARARGS, (char *)"UIntSet___contains__(UIntSet self, value_type x) -> bool"},
	 { (char *)"UIntSet___getitem__", _wrap_UIntSet___getitem__, METH_VARARGS, (char *)"UIntSet___getitem__(UIntSet self, difference_type i) -> value_type"},
	 { (char *)"new_UIntSet", _wrap_new_UIntSet, METH_VARARGS, (char *)"\n"
		"UIntSet(std::less<(unsigned int)> arg0)\n"
		"UIntSet()\n"
		"new_UIntSet(std::set<(unsigned int)> arg0) -> UIntSet\n"
		""},
	 { (char *)"UIntSet_empty", _wrap_UIntSet_empty, METH_VARARGS, (char *)"UIntSet_empty(UIntSet self) -> bool"},
	 { (char *)"UIntSet_size", _wrap_UIntSet_size, METH_VARARGS, (char *)"UIntSet_size(UIntSet self) -> size_type"},
	 { (char *)"UIntSet_clear", _wrap_UIntSet_clear, METH_VARARGS, (char *)"UIntSet_clear(UIntSet self)"},
	 { (char *)"UIntSet_swap", _wrap_UIntSet_swap, METH_VARARGS, (char *)"UIntSet_swap(UIntSet self, std::set<(unsigned int)> v)"},
	 { (char *)"UIntSet_count", _wrap_UIntSet_count, METH_VARARGS, (char *)"UIntSet_count(UIntSet self, key_type x) -> size_type"},
	 { (char *)"UIntSet_begin", _wrap_UIntSet_begin, METH_VARARGS, (char *)"UIntSet_begin(UIntSet self) -> iterator"},
	 { (char *)"UIntSet_end", _wrap_UIntSet_end, METH_VARARGS, (char *)"UIntSet_end(UIntSet self) -> iterator"},
	 { (char *)"UIntSet_rbegin", _wrap_UIntSet_rbegin, METH_VARARGS, (char *)"UIntSet_rbegin(UIntSet self) -> reverse_iterator"},
	 { (char *)"UIntSet_rend", _wrap_UIntSet_rend, METH_VARARGS, (char *)"UIntSet_rend(UIntSet self) -> reverse_iterator"},
	 { (char *)"UIntSet_erase", _wrap_UIntSet_erase, METH_VARARGS, (char *)"\n"
		"erase(key_type x) -> size_type\n"
		"erase(iterator pos)\n"
		"UIntSet_erase(UIntSet self, iterator first, iterator last)\n"
		""},
	 { (char *)"UIntSet_find", _wrap_UIntSet_find, METH_VARARGS, (char *)"UIntSet_find(UIntSet self, key_type x) -> iterator"},
	 { (char *)"UIntSet_lower_bound", _wrap_UIntSet_lower_bound, METH_VARARGS, (char *)"UIntSet_lower_bound(UIntSet self, key_type x) -> iterator"},
	 { (char *)"UIntSet_upper_bound", _wrap_UIntSet_upper_bound, METH_VARARGS, (char *)"UIntSet_upper_bound(UIntSet self, key_type x) -> iterator"},
	 { (char *)"UIntSet_equal_range", _wrap_UIntSet_equal_range, METH_VARARGS, (char *)"UIntSet_equal_range(UIntSet self, key_type x) -> std::pair<(set<(unsigned int)>::iterator,set<(unsigned int)>::iterator)>"},
	 { (char *)"UIntSet_insert", _wrap_UIntSet_insert, METH_VARARGS, (char *)"UIntSet_insert(UIntSet self, value_type __x) -> std::pair<(set<(unsigned int)>::iterator,bool)>"},
	 { (char *)"delete_UIntSet", _wrap_delete_UIntSet, METH_VARARGS, (char *)"delete_UIntSet(UIntSet self)"},
	 { (char *)"UIntSet_swigregister", UIntSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"Size2D_x_set", _wrap_Size2D_x_set, METH_VARARGS, (char *)"Size2D_x_set(Size2D self, int x)"},
	 { (char *)"Size2D_x_get", _wrap_Size2D_x_get, METH_VARARGS, (char *)"Size2D_x_get(Size2D self) -> int"},
	 { (char *)"Size2D_y_set", _wrap_Size2D_y_set, METH_VARARGS, (char *)"Size2D_y_set(Size2D self, int y)"},
	 { (char *)"Size2D_y_get", _wrap_Size2D_y_get, METH_VARARGS, (char *)"Size2D_y_get(Size2D self) -> int"},
	 { (char *)"new_Size2D", _wrap_new_Size2D, METH_VARARGS, (char *)"new_Size2D(int ix, int iy) -> Size2D"},
	 { (char *)"delete_Size2D", _wrap_delete_Size2D, METH_VARARGS, (char *)"delete_Size2D(Size2D self)"},
	 { (char *)"Size2D_swigregister", Size2D_swigregister, METH_VARARGS, NULL},
	 { (char *)"Point2D_x_set", _wrap_Point2D_x_set, METH_VARARGS, (char *)"Point2D_x_set(Point2D self, int x)"},
	 { (char *)"Point2D_x_get", _wrap_Point2D_x_get, METH_VARARGS, (char *)"Point2D_x_get(Point2D self) -> int"},
	 { (char *)"Point2D_y_set", _wrap_Point2D_y_set, METH_VARARGS, (char *)"Point2D_y_set(Point2D self, int y)"},
	 { (char *)"Point2D_y_get", _wrap_Point2D_y_get, METH_VARARGS, (char *)"Point2D_y_get(Point2D self) -> int"},
	 { (char *)"new_Point2D", _wrap_new_Point2D, METH_VARARGS, (char *)"new_Point2D(int ix, int iy) -> Point2D"},
	 { (char *)"delete_Point2D", _wrap_delete_Point2D, METH_VARARGS, (char *)"delete_Point2D(Point2D self)"},
	 { (char *)"Point2D_swigregister", Point2D_swigregister, METH_VARARGS, NULL},
	 { (char *)"FDiff2D_x_set", _wrap_FDiff2D_x_set, METH_VARARGS, (char *)"FDiff2D_x_set(FDiff2D self, double x)"},
	 { (char *)"FDiff2D_x_get", _wrap_FDiff2D_x_get, METH_VARARGS, (char *)"FDiff2D_x_get(FDiff2D self) -> double"},
	 { (char *)"FDiff2D_y_set", _wrap_FDiff2D_y_set, METH_VARARGS, (char *)"FDiff2D_y_set(FDiff2D self, double y)"},
	 { (char *)"FDiff2D_y_get", _wrap_FDiff2D_y_get, METH_VARARGS, (char *)"FDiff2D_y_get(FDiff2D self) -> double"},
	 { (char *)"new_FDiff2D", _wrap_new_FDiff2D, METH_VARARGS, (char *)"new_FDiff2D(double ix, double iy) -> FDiff2D"},
	 { (char *)"delete_FDiff2D", _wrap_delete_FDiff2D, METH_VARARGS, (char *)"delete_FDiff2D(FDiff2D self)"},
	 { (char *)"FDiff2D_swigregister", FDiff2D_swigregister, METH_VARARGS, NULL},
	 { (char *)"tm_tm_sec_set", _wrap_tm_tm_sec_set, METH_VARARGS, (char *)"tm_tm_sec_set(tm self, int tm_sec)"},
	 { (char *)"tm_tm_sec_get", _wrap_tm_tm_sec_get, METH_VARARGS, (char *)"tm_tm_sec_get(tm self) -> int"},
	 { (char *)"tm_tm_min_set", _wrap_tm_tm_min_set, METH_VARARGS, (char *)"tm_tm_min_set(tm self, int tm_min)"},
	 { (char *)"tm_tm_min_get", _wrap_tm_tm_min_get, METH_VARARGS, (char *)"tm_tm_min_get(tm self) -> int"},
	 { (char *)"tm_tm_hour_set", _wrap_tm_tm_hour_set, METH_VARARGS, (char *)"tm_tm_hour_set(tm self, int tm_hour)"},
	 { (char *)"tm_tm_hour_get", _wrap_tm_tm_hour_get, METH_VARARGS, (char *)"tm_tm_hour_get(tm self) -> int"},
	 { (char *)"tm_tm_mday_set", _wrap_tm_tm_mday_set, METH_VARARGS, (char *)"tm_tm_mday_set(tm self, int tm_mday)"},
	 { (char *)"tm_tm_mday_get", _wrap_tm_tm_mday_get, METH_VARARGS, (char *)"tm_tm_mday_get(tm self) -> int"},
	 { (char *)"tm_tm_mon_set", _wrap_tm_tm_mon_set, METH_VARARGS, (char *)"tm_tm_mon_set(tm self, int tm_mon)"},
	 { (char *)"tm_tm_mon_get", _wrap_tm_tm_mon_get, METH_VARARGS, (char *)"tm_tm_mon_get(tm self) -> int"},
	 { (char *)"tm_tm_year_set", _wrap_tm_tm_year_set, METH_VARARGS, (char *)"tm_tm_year_set(tm self, int tm_year)"},
	 { (char *)"tm_tm_year_get", _wrap_tm_tm_year_get, METH_VARARGS, (char *)"tm_tm_year_get(tm self) -> int"},
	 { (char *)"tm_tm_wday_set", _wrap_tm_tm_wday_set, METH_VARARGS, (char *)"tm_tm_wday_set(tm self, int tm_wday)"},
	 { (char *)"tm_tm_wday_get", _wrap_tm_tm_wday_get, METH_VARARGS, (char *)"tm_tm_wday_get(tm self) -> int"},
	 { (char *)"tm_tm_yday_set", _wrap_tm_tm_yday_set, METH_VARARGS, (char *)"tm_tm_yday_set(tm self, int tm_yday)"},
	 { (char *)"tm_tm_yday_get", _wrap_tm_tm_yday_get, METH_VARARGS, (char *)"tm_tm_yday_get(tm self) -> int"},
	 { (char *)"tm_tm_isdst_set", _wrap_tm_tm_isdst_set, METH_VARARGS, (char *)"tm_tm_isdst_set(tm self, int tm_isdst)"},
	 { (char *)"tm_tm_isdst_get", _wrap_tm_tm_isdst_get, METH_VARARGS, (char *)"tm_tm_isdst_get(tm self) -> int"},
	 { (char *)"new_tm", _wrap_new_tm, METH_VARARGS, (char *)"new_tm() -> tm"},
	 { (char *)"delete_tm", _wrap_delete_tm, METH_VARARGS, (char *)"delete_tm(tm self)"},
	 { (char *)"tm_swigregister", tm_swigregister, METH_VARARGS, NULL},
	 { (char *)"ImageVector_iterator", _wrap_ImageVector_iterator, METH_VARARGS, (char *)"ImageVector_iterator(ImageVector self) -> SwigPyIterator"},
	 { (char *)"ImageVector___nonzero__", _wrap_ImageVector___nonzero__, METH_VARARGS, (char *)"ImageVector___nonzero__(ImageVector self) -> bool"},
	 { (char *)"ImageVector___bool__", _wrap_ImageVector___bool__, METH_VARARGS, (char *)"ImageVector___bool__(ImageVector self) -> bool"},
	 { (char *)"ImageVector___len__", _wrap_ImageVector___len__, METH_VARARGS, (char *)"ImageVector___len__(ImageVector self) -> size_type"},
	 { (char *)"ImageVector_pop", _wrap_ImageVector_pop, METH_VARARGS, (char *)"ImageVector_pop(ImageVector self) -> value_type"},
	 { (char *)"ImageVector___getslice__", _wrap_ImageVector___getslice__, METH_VARARGS, (char *)"ImageVector___getslice__(ImageVector self, difference_type i, difference_type j) -> std::vector<(HuginBase::SrcPanoImage,std::allocator<(HuginBase::SrcPanoImage)>)>"},
	 { (char *)"ImageVector___setslice__", _wrap_ImageVector___setslice__, METH_VARARGS, (char *)"\n"
		"ImageVector___setslice__(ImageVector self, difference_type i, difference_type j, \n"
		"    std::vector<(HuginBase::SrcPanoImage,std::allocator<(HuginBase::SrcPanoImage)>)> v)\n"
		""},
	 { (char *)"ImageVector___delslice__", _wrap_ImageVector___delslice__, METH_VARARGS, (char *)"ImageVector___delslice__(ImageVector self, difference_type i, difference_type j)"},
	 { (char *)"ImageVector___delitem__", _wrap_ImageVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"ImageVector___delitem__(ImageVector self, PySliceObject slice)\n"
		""},
	 { (char *)"ImageVector___getitem__", _wrap_ImageVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> std::vector<(HuginBase::SrcPanoImage,std::allocator<(HuginBase::SrcPanoImage)>)>\n"
		"ImageVector___getitem__(ImageVector self, difference_type i) -> value_type\n"
		""},
	 { (char *)"ImageVector___setitem__", _wrap_ImageVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, std::vector<(HuginBase::SrcPanoImage,std::allocator<(HuginBase::SrcPanoImage)>)> v)\n"
		"ImageVector___setitem__(ImageVector self, difference_type i, value_type x)\n"
		""},
	 { (char *)"ImageVector_append", _wrap_ImageVector_append, METH_VARARGS, (char *)"ImageVector_append(ImageVector self, value_type x)"},
	 { (char *)"ImageVector_empty", _wrap_ImageVector_empty, METH_VARARGS, (char *)"ImageVector_empty(ImageVector self) -> bool"},
	 { (char *)"ImageVector_size", _wrap_ImageVector_size, METH_VARARGS, (char *)"ImageVector_size(ImageVector self) -> size_type"},
	 { (char *)"ImageVector_clear", _wrap_ImageVector_clear, METH_VARARGS, (char *)"ImageVector_clear(ImageVector self)"},
	 { (char *)"ImageVector_swap", _wrap_ImageVector_swap, METH_VARARGS, (char *)"ImageVector_swap(ImageVector self, ImageVector v)"},
	 { (char *)"ImageVector_get_allocator", _wrap_ImageVector_get_allocator, METH_VARARGS, (char *)"ImageVector_get_allocator(ImageVector self) -> allocator_type"},
	 { (char *)"ImageVector_begin", _wrap_ImageVector_begin, METH_VARARGS, (char *)"ImageVector_begin(ImageVector self) -> const_iterator"},
	 { (char *)"ImageVector_end", _wrap_ImageVector_end, METH_VARARGS, (char *)"ImageVector_end(ImageVector self) -> const_iterator"},
	 { (char *)"ImageVector_rbegin", _wrap_ImageVector_rbegin, METH_VARARGS, (char *)"ImageVector_rbegin(ImageVector self) -> const_reverse_iterator"},
	 { (char *)"ImageVector_rend", _wrap_ImageVector_rend, METH_VARARGS, (char *)"ImageVector_rend(ImageVector self) -> const_reverse_iterator"},
	 { (char *)"ImageVector_pop_back", _wrap_ImageVector_pop_back, METH_VARARGS, (char *)"ImageVector_pop_back(ImageVector self)"},
	 { (char *)"ImageVector_erase", _wrap_ImageVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"ImageVector_erase(ImageVector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_ImageVector", _wrap_new_ImageVector, METH_VARARGS, (char *)"\n"
		"ImageVector()\n"
		"ImageVector(ImageVector arg0)\n"
		"ImageVector(size_type size)\n"
		"new_ImageVector(size_type size, value_type value) -> ImageVector\n"
		""},
	 { (char *)"ImageVector_push_back", _wrap_ImageVector_push_back, METH_VARARGS, (char *)"ImageVector_push_back(ImageVector self, value_type x)"},
	 { (char *)"ImageVector_front", _wrap_ImageVector_front, METH_VARARGS, (char *)"ImageVector_front(ImageVector self) -> value_type"},
	 { (char *)"ImageVector_back", _wrap_ImageVector_back, METH_VARARGS, (char *)"ImageVector_back(ImageVector self) -> value_type"},
	 { (char *)"ImageVector_assign", _wrap_ImageVector_assign, METH_VARARGS, (char *)"ImageVector_assign(ImageVector self, size_type n, value_type x)"},
	 { (char *)"ImageVector_resize", _wrap_ImageVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"ImageVector_resize(ImageVector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"ImageVector_insert", _wrap_ImageVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"ImageVector_insert(ImageVector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"ImageVector_reserve", _wrap_ImageVector_reserve, METH_VARARGS, (char *)"ImageVector_reserve(ImageVector self, size_type n)"},
	 { (char *)"ImageVector_capacity", _wrap_ImageVector_capacity, METH_VARARGS, (char *)"ImageVector_capacity(ImageVector self) -> size_type"},
	 { (char *)"delete_ImageVector", _wrap_delete_ImageVector, METH_VARARGS, (char *)"delete_ImageVector(ImageVector self)"},
	 { (char *)"ImageVector_swigregister", ImageVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Lens", _wrap_new_Lens, METH_VARARGS, (char *)"new_Lens() -> Lens"},
	 { (char *)"Lens_getProjection", _wrap_Lens_getProjection, METH_VARARGS, (char *)"Lens_getProjection(Lens self) -> LensProjectionFormat"},
	 { (char *)"Lens_setProjection", _wrap_Lens_setProjection, METH_VARARGS, (char *)"Lens_setProjection(Lens self, LensProjectionFormat l)"},
	 { (char *)"Lens_getHFOV", _wrap_Lens_getHFOV, METH_VARARGS, (char *)"Lens_getHFOV(Lens self) -> double"},
	 { (char *)"Lens_setHFOV", _wrap_Lens_setHFOV, METH_VARARGS, (char *)"Lens_setHFOV(Lens self, double d)"},
	 { (char *)"Lens_getFocalLength", _wrap_Lens_getFocalLength, METH_VARARGS, (char *)"Lens_getFocalLength(Lens self) -> double"},
	 { (char *)"Lens_getCropFactor", _wrap_Lens_getCropFactor, METH_VARARGS, (char *)"Lens_getCropFactor(Lens self) -> double"},
	 { (char *)"Lens_setCropFactor", _wrap_Lens_setCropFactor, METH_VARARGS, (char *)"Lens_setCropFactor(Lens self, double newCropFactor)"},
	 { (char *)"Lens_getAspectRatio", _wrap_Lens_getAspectRatio, METH_VARARGS, (char *)"Lens_getAspectRatio(Lens self) -> double"},
	 { (char *)"Lens_isLandscape", _wrap_Lens_isLandscape, METH_VARARGS, (char *)"Lens_isLandscape(Lens self) -> bool"},
	 { (char *)"Lens_setEV", _wrap_Lens_setEV, METH_VARARGS, (char *)"Lens_setEV(Lens self, double ev)"},
	 { (char *)"Lens_getImageSize", _wrap_Lens_getImageSize, METH_VARARGS, (char *)"Lens_getImageSize(Lens self) -> Size2D"},
	 { (char *)"Lens_setImageSize", _wrap_Lens_setImageSize, METH_VARARGS, (char *)"Lens_setImageSize(Lens self, Size2D sz)"},
	 { (char *)"Lens_update", _wrap_Lens_update, METH_VARARGS, (char *)"Lens_update(Lens self, Lens l)"},
	 { (char *)"Lens_variables_set", _wrap_Lens_variables_set, METH_VARARGS, (char *)"Lens_variables_set(Lens self, LensVarMap variables)"},
	 { (char *)"Lens_variables_get", _wrap_Lens_variables_get, METH_VARARGS, (char *)"Lens_variables_get(Lens self) -> LensVarMap"},
	 { (char *)"Lens_variableNames_get", _wrap_Lens_variableNames_get, METH_VARARGS, NULL},
	 { (char *)"Lens_variableNames_set", _wrap_Lens_variableNames_set, METH_VARARGS, NULL},
	 { (char *)"Lens_m_hasExif_set", _wrap_Lens_m_hasExif_set, METH_VARARGS, (char *)"Lens_m_hasExif_set(Lens self, bool m_hasExif)"},
	 { (char *)"Lens_m_hasExif_get", _wrap_Lens_m_hasExif_get, METH_VARARGS, (char *)"Lens_m_hasExif_get(Lens self) -> bool"},
	 { (char *)"delete_Lens", _wrap_delete_Lens, METH_VARARGS, (char *)"delete_Lens(Lens self)"},
	 { (char *)"Lens_swigregister", Lens_swigregister, METH_VARARGS, NULL},
	 { (char *)"BaseSrcPanoImage___eq__", _wrap_BaseSrcPanoImage___eq__, METH_VARARGS, (char *)"BaseSrcPanoImage___eq__(BaseSrcPanoImage self, BaseSrcPanoImage other) -> bool"},
	 { (char *)"new_BaseSrcPanoImage", _wrap_new_BaseSrcPanoImage, METH_VARARGS, (char *)"new_BaseSrcPanoImage() -> BaseSrcPanoImage"},
	 { (char *)"delete_BaseSrcPanoImage", _wrap_delete_BaseSrcPanoImage, METH_VARARGS, (char *)"delete_BaseSrcPanoImage(BaseSrcPanoImage self)"},
	 { (char *)"BaseSrcPanoImage_swigregister", BaseSrcPanoImage_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_SrcPanoImage", _wrap_delete_SrcPanoImage, METH_VARARGS, (char *)"delete_SrcPanoImage(SrcPanoImage self)"},
	 { (char *)"new_SrcPanoImage", _wrap_new_SrcPanoImage, METH_VARARGS, (char *)"\n"
		"SrcPanoImage()\n"
		"new_SrcPanoImage(string filename) -> SrcPanoImage\n"
		""},
	 { (char *)"SrcPanoImage_hasEXIFread", _wrap_SrcPanoImage_hasEXIFread, METH_VARARGS, (char *)"SrcPanoImage_hasEXIFread(SrcPanoImage self) -> bool"},
	 { (char *)"SrcPanoImage_resize", _wrap_SrcPanoImage_resize, METH_VARARGS, (char *)"SrcPanoImage_resize(SrcPanoImage self, Size2D size)"},
	 { (char *)"SrcPanoImage_isInside", _wrap_SrcPanoImage_isInside, METH_VARARGS, (char *)"\n"
		"isInside(Point2D p, bool ignoreMasks = False) -> bool\n"
		"SrcPanoImage_isInside(SrcPanoImage self, Point2D p) -> bool\n"
		""},
	 { (char *)"SrcPanoImage_horizontalWarpNeeded", _wrap_SrcPanoImage_horizontalWarpNeeded, METH_VARARGS, (char *)"SrcPanoImage_horizontalWarpNeeded(SrcPanoImage self) -> bool"},
	 { (char *)"SrcPanoImage_getCorrectTCA", _wrap_SrcPanoImage_getCorrectTCA, METH_VARARGS, (char *)"SrcPanoImage_getCorrectTCA(SrcPanoImage self) -> bool"},
	 { (char *)"SrcPanoImage_setCropMode", _wrap_SrcPanoImage_setCropMode, METH_VARARGS, (char *)"SrcPanoImage_setCropMode(SrcPanoImage self, CropMode val)"},
	 { (char *)"SrcPanoImage_setSize", _wrap_SrcPanoImage_setSize, METH_VARARGS, (char *)"SrcPanoImage_setSize(SrcPanoImage self, Size2D val)"},
	 { (char *)"SrcPanoImage_getRadialDistortionCenter", _wrap_SrcPanoImage_getRadialDistortionCenter, METH_VARARGS, (char *)"SrcPanoImage_getRadialDistortionCenter(SrcPanoImage self) -> FDiff2D"},
	 { (char *)"SrcPanoImage_getRadialVigCorrCenter", _wrap_SrcPanoImage_getRadialVigCorrCenter, METH_VARARGS, (char *)"SrcPanoImage_getRadialVigCorrCenter(SrcPanoImage self) -> FDiff2D"},
	 { (char *)"SrcPanoImage_getExposure", _wrap_SrcPanoImage_getExposure, METH_VARARGS, (char *)"SrcPanoImage_getExposure(SrcPanoImage self) -> double"},
	 { (char *)"SrcPanoImage_setExposure", _wrap_SrcPanoImage_setExposure, METH_VARARGS, (char *)"SrcPanoImage_setExposure(SrcPanoImage self, double val)"},
	 { (char *)"SrcPanoImage_getWidth", _wrap_SrcPanoImage_getWidth, METH_VARARGS, (char *)"SrcPanoImage_getWidth(SrcPanoImage self) -> int"},
	 { (char *)"SrcPanoImage_getHeight", _wrap_SrcPanoImage_getHeight, METH_VARARGS, (char *)"SrcPanoImage_getHeight(SrcPanoImage self) -> int"},
	 { (char *)"SrcPanoImage_getVar", _wrap_SrcPanoImage_getVar, METH_VARARGS, (char *)"SrcPanoImage_getVar(SrcPanoImage self, string name) -> double"},
	 { (char *)"SrcPanoImage_setVar", _wrap_SrcPanoImage_setVar, METH_VARARGS, (char *)"SrcPanoImage_setVar(SrcPanoImage self, string name, double val)"},
	 { (char *)"SrcPanoImage_getVariableMap", _wrap_SrcPanoImage_getVariableMap, METH_VARARGS, (char *)"SrcPanoImage_getVariableMap(SrcPanoImage self) -> VariableMap"},
	 { (char *)"SrcPanoImage_getOptions", _wrap_SrcPanoImage_getOptions, METH_VARARGS, (char *)"SrcPanoImage_getOptions(SrcPanoImage self) -> ImageOptions"},
	 { (char *)"SrcPanoImage_setOptions", _wrap_SrcPanoImage_setOptions, METH_VARARGS, (char *)"SrcPanoImage_setOptions(SrcPanoImage self, ImageOptions opt)"},
	 { (char *)"SrcPanoImage_getExifDateTime", _wrap_SrcPanoImage_getExifDateTime, METH_VARARGS, (char *)"SrcPanoImage_getExifDateTime(SrcPanoImage self, tm datetime) -> int"},
	 { (char *)"SrcPanoImage_unlinkRadialVigCorrCoeff", _wrap_SrcPanoImage_unlinkRadialVigCorrCoeff, METH_VARARGS, (char *)"SrcPanoImage_unlinkRadialVigCorrCoeff(SrcPanoImage self)"},
	 { (char *)"SrcPanoImage_unlinkRadialVigCorrCenterShift", _wrap_SrcPanoImage_unlinkRadialVigCorrCenterShift, METH_VARARGS, (char *)"SrcPanoImage_unlinkRadialVigCorrCenterShift(SrcPanoImage self)"},
	 { (char *)"SrcPanoImage_unlinkEMoRParams", _wrap_SrcPanoImage_unlinkEMoRParams, METH_VARARGS, (char *)"SrcPanoImage_unlinkEMoRParams(SrcPanoImage self)"},
	 { (char *)"SrcPanoImage_linkRadialVigCorrCoeff", _wrap_SrcPanoImage_linkRadialVigCorrCoeff, METH_VARARGS, (char *)"SrcPanoImage_linkRadialVigCorrCoeff(SrcPanoImage self, SrcPanoImage target)"},
	 { (char *)"SrcPanoImage_linkRadialVigCorrCenterShift", _wrap_SrcPanoImage_linkRadialVigCorrCenterShift, METH_VARARGS, (char *)"SrcPanoImage_linkRadialVigCorrCenterShift(SrcPanoImage self, SrcPanoImage target)"},
	 { (char *)"SrcPanoImage_linkEMoRParams", _wrap_SrcPanoImage_linkEMoRParams, METH_VARARGS, (char *)"SrcPanoImage_linkEMoRParams(SrcPanoImage self, SrcPanoImage target)"},
	 { (char *)"SrcPanoImage_linkStack", _wrap_SrcPanoImage_linkStack, METH_VARARGS, (char *)"SrcPanoImage_linkStack(SrcPanoImage self, SrcPanoImage target)"},
	 { (char *)"SrcPanoImage_readEXIF", _wrap_SrcPanoImage_readEXIF, METH_VARARGS, (char *)"\n"
		"readEXIF(double focalLength, double cropFactor, bool applyEXIF, \n"
		"    bool applyExposureValue) -> bool\n"
		"SrcPanoImage_readEXIF(SrcPanoImage self, double focalLength, double cropFactor, \n"
		"    double eV, bool applyEXIF, bool applyExposureValue) -> bool\n"
		""},
	 { (char *)"SrcPanoImage_calcHFOV", _wrap_SrcPanoImage_calcHFOV, METH_VARARGS, (char *)"SrcPanoImage_calcHFOV(Projection proj, double fl, double crop, Size2D imageSize) -> double"},
	 { (char *)"SrcPanoImage_calcFocalLength", _wrap_SrcPanoImage_calcFocalLength, METH_VARARGS, (char *)"SrcPanoImage_calcFocalLength(Projection proj, double hfov, double crop, Size2D imageSize) -> double"},
	 { (char *)"SrcPanoImage_calcCropFactor", _wrap_SrcPanoImage_calcCropFactor, METH_VARARGS, (char *)"SrcPanoImage_calcCropFactor(Projection proj, double hfov, double focalLength, Size2D imageSize) -> double"},
	 { (char *)"SrcPanoImage_updateFocalLength", _wrap_SrcPanoImage_updateFocalLength, METH_VARARGS, (char *)"SrcPanoImage_updateFocalLength(SrcPanoImage self, double newFocalLength)"},
	 { (char *)"SrcPanoImage_updateCropFactor", _wrap_SrcPanoImage_updateCropFactor, METH_VARARGS, (char *)"SrcPanoImage_updateCropFactor(SrcPanoImage self, double focalLength, double newCropFactor)"},
	 { (char *)"SrcPanoImage_hasMasks", _wrap_SrcPanoImage_hasMasks, METH_VARARGS, (char *)"SrcPanoImage_hasMasks(SrcPanoImage self) -> bool"},
	 { (char *)"SrcPanoImage_hasPositiveMasks", _wrap_SrcPanoImage_hasPositiveMasks, METH_VARARGS, (char *)"SrcPanoImage_hasPositiveMasks(SrcPanoImage self) -> bool"},
	 { (char *)"SrcPanoImage_hasActiveMasks", _wrap_SrcPanoImage_hasActiveMasks, METH_VARARGS, (char *)"SrcPanoImage_hasActiveMasks(SrcPanoImage self) -> bool"},
	 { (char *)"SrcPanoImage_addMask", _wrap_SrcPanoImage_addMask, METH_VARARGS, (char *)"SrcPanoImage_addMask(SrcPanoImage self, MaskPolygon newMask)"},
	 { (char *)"SrcPanoImage_addActiveMask", _wrap_SrcPanoImage_addActiveMask, METH_VARARGS, (char *)"SrcPanoImage_addActiveMask(SrcPanoImage self, MaskPolygon newMask)"},
	 { (char *)"SrcPanoImage_clearActiveMasks", _wrap_SrcPanoImage_clearActiveMasks, METH_VARARGS, (char *)"SrcPanoImage_clearActiveMasks(SrcPanoImage self)"},
	 { (char *)"SrcPanoImage_changeMaskType", _wrap_SrcPanoImage_changeMaskType, METH_VARARGS, (char *)"SrcPanoImage_changeMaskType(SrcPanoImage self, unsigned int index, HuginBase::MaskPolygon::MaskType newType)"},
	 { (char *)"SrcPanoImage_deleteMask", _wrap_SrcPanoImage_deleteMask, METH_VARARGS, (char *)"SrcPanoImage_deleteMask(SrcPanoImage self, unsigned int index)"},
	 { (char *)"SrcPanoImage_printMaskLines", _wrap_SrcPanoImage_printMaskLines, METH_VARARGS, (char *)"SrcPanoImage_printMaskLines(SrcPanoImage self, std::ostream o, unsigned int newImgNr)"},
	 { (char *)"SrcPanoImage_isInsideMasks", _wrap_SrcPanoImage_isInsideMasks, METH_VARARGS, (char *)"SrcPanoImage_isInsideMasks(SrcPanoImage self, Point2D p) -> bool"},
	 { (char *)"SrcPanoImage_swigregister", SrcPanoImage_swigregister, METH_VARARGS, NULL},
	 { (char *)"VariableMap_iterator", _wrap_VariableMap_iterator, METH_VARARGS, (char *)"VariableMap_iterator(VariableMap self) -> SwigPyIterator"},
	 { (char *)"VariableMap___nonzero__", _wrap_VariableMap___nonzero__, METH_VARARGS, (char *)"VariableMap___nonzero__(VariableMap self) -> bool"},
	 { (char *)"VariableMap___bool__", _wrap_VariableMap___bool__, METH_VARARGS, (char *)"VariableMap___bool__(VariableMap self) -> bool"},
	 { (char *)"VariableMap___len__", _wrap_VariableMap___len__, METH_VARARGS, (char *)"VariableMap___len__(VariableMap self) -> size_type"},
	 { (char *)"VariableMap___getitem__", _wrap_VariableMap___getitem__, METH_VARARGS, (char *)"VariableMap___getitem__(VariableMap self, key_type key) -> mapped_type"},
	 { (char *)"VariableMap___delitem__", _wrap_VariableMap___delitem__, METH_VARARGS, (char *)"VariableMap___delitem__(VariableMap self, key_type key)"},
	 { (char *)"VariableMap_has_key", _wrap_VariableMap_has_key, METH_VARARGS, (char *)"VariableMap_has_key(VariableMap self, key_type key) -> bool"},
	 { (char *)"VariableMap_keys", _wrap_VariableMap_keys, METH_VARARGS, (char *)"VariableMap_keys(VariableMap self) -> PyObject"},
	 { (char *)"VariableMap_values", _wrap_VariableMap_values, METH_VARARGS, (char *)"VariableMap_values(VariableMap self) -> PyObject"},
	 { (char *)"VariableMap_items", _wrap_VariableMap_items, METH_VARARGS, (char *)"VariableMap_items(VariableMap self) -> PyObject"},
	 { (char *)"VariableMap___contains__", _wrap_VariableMap___contains__, METH_VARARGS, (char *)"VariableMap___contains__(VariableMap self, key_type key) -> bool"},
	 { (char *)"VariableMap_key_iterator", _wrap_VariableMap_key_iterator, METH_VARARGS, (char *)"VariableMap_key_iterator(VariableMap self) -> SwigPyIterator"},
	 { (char *)"VariableMap_value_iterator", _wrap_VariableMap_value_iterator, METH_VARARGS, (char *)"VariableMap_value_iterator(VariableMap self) -> SwigPyIterator"},
	 { (char *)"VariableMap___setitem__", _wrap_VariableMap___setitem__, METH_VARARGS, (char *)"VariableMap___setitem__(VariableMap self, key_type key, mapped_type x)"},
	 { (char *)"new_VariableMap", _wrap_new_VariableMap, METH_VARARGS, (char *)"\n"
		"VariableMap(std::less<(std::string)> arg0)\n"
		"VariableMap()\n"
		"new_VariableMap(VariableMap arg0) -> VariableMap\n"
		""},
	 { (char *)"VariableMap_empty", _wrap_VariableMap_empty, METH_VARARGS, (char *)"VariableMap_empty(VariableMap self) -> bool"},
	 { (char *)"VariableMap_size", _wrap_VariableMap_size, METH_VARARGS, (char *)"VariableMap_size(VariableMap self) -> size_type"},
	 { (char *)"VariableMap_clear", _wrap_VariableMap_clear, METH_VARARGS, (char *)"VariableMap_clear(VariableMap self)"},
	 { (char *)"VariableMap_swap", _wrap_VariableMap_swap, METH_VARARGS, (char *)"VariableMap_swap(VariableMap self, VariableMap v)"},
	 { (char *)"VariableMap_get_allocator", _wrap_VariableMap_get_allocator, METH_VARARGS, (char *)"VariableMap_get_allocator(VariableMap self) -> allocator_type"},
	 { (char *)"VariableMap_begin", _wrap_VariableMap_begin, METH_VARARGS, (char *)"VariableMap_begin(VariableMap self) -> const_iterator"},
	 { (char *)"VariableMap_end", _wrap_VariableMap_end, METH_VARARGS, (char *)"VariableMap_end(VariableMap self) -> const_iterator"},
	 { (char *)"VariableMap_rbegin", _wrap_VariableMap_rbegin, METH_VARARGS, (char *)"VariableMap_rbegin(VariableMap self) -> const_reverse_iterator"},
	 { (char *)"VariableMap_rend", _wrap_VariableMap_rend, METH_VARARGS, (char *)"VariableMap_rend(VariableMap self) -> const_reverse_iterator"},
	 { (char *)"VariableMap_count", _wrap_VariableMap_count, METH_VARARGS, (char *)"VariableMap_count(VariableMap self, key_type x) -> size_type"},
	 { (char *)"VariableMap_erase", _wrap_VariableMap_erase, METH_VARARGS, (char *)"\n"
		"erase(key_type x) -> size_type\n"
		"erase(iterator position)\n"
		"VariableMap_erase(VariableMap self, iterator first, iterator last)\n"
		""},
	 { (char *)"VariableMap_find", _wrap_VariableMap_find, METH_VARARGS, (char *)"VariableMap_find(VariableMap self, key_type x) -> iterator"},
	 { (char *)"VariableMap_lower_bound", _wrap_VariableMap_lower_bound, METH_VARARGS, (char *)"VariableMap_lower_bound(VariableMap self, key_type x) -> iterator"},
	 { (char *)"VariableMap_upper_bound", _wrap_VariableMap_upper_bound, METH_VARARGS, (char *)"VariableMap_upper_bound(VariableMap self, key_type x) -> iterator"},
	 { (char *)"delete_VariableMap", _wrap_delete_VariableMap, METH_VARARGS, (char *)"delete_VariableMap(VariableMap self)"},
	 { (char *)"VariableMap_swigregister", VariableMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"VariableMapVector_iterator", _wrap_VariableMapVector_iterator, METH_VARARGS, (char *)"VariableMapVector_iterator(VariableMapVector self) -> SwigPyIterator"},
	 { (char *)"VariableMapVector___nonzero__", _wrap_VariableMapVector___nonzero__, METH_VARARGS, (char *)"VariableMapVector___nonzero__(VariableMapVector self) -> bool"},
	 { (char *)"VariableMapVector___bool__", _wrap_VariableMapVector___bool__, METH_VARARGS, (char *)"VariableMapVector___bool__(VariableMapVector self) -> bool"},
	 { (char *)"VariableMapVector___len__", _wrap_VariableMapVector___len__, METH_VARARGS, (char *)"VariableMapVector___len__(VariableMapVector self) -> size_type"},
	 { (char *)"VariableMapVector_pop", _wrap_VariableMapVector_pop, METH_VARARGS, (char *)"VariableMapVector_pop(VariableMapVector self) -> value_type"},
	 { (char *)"VariableMapVector___getslice__", _wrap_VariableMapVector___getslice__, METH_VARARGS, (char *)"VariableMapVector___getslice__(VariableMapVector self, difference_type i, difference_type j) -> std::vector<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>,std::allocator<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>)>)>"},
	 { (char *)"VariableMapVector___setslice__", _wrap_VariableMapVector___setslice__, METH_VARARGS, (char *)"\n"
		"VariableMapVector___setslice__(VariableMapVector self, difference_type i, difference_type j, \n"
		"    std::vector<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>,std::allocator<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>)>)> v)\n"
		""},
	 { (char *)"VariableMapVector___delslice__", _wrap_VariableMapVector___delslice__, METH_VARARGS, (char *)"VariableMapVector___delslice__(VariableMapVector self, difference_type i, difference_type j)"},
	 { (char *)"VariableMapVector___delitem__", _wrap_VariableMapVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"VariableMapVector___delitem__(VariableMapVector self, PySliceObject slice)\n"
		""},
	 { (char *)"VariableMapVector___getitem__", _wrap_VariableMapVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> std::vector<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>,std::allocator<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>)>)>\n"
		"VariableMapVector___getitem__(VariableMapVector self, difference_type i) -> value_type\n"
		""},
	 { (char *)"VariableMapVector___setitem__", _wrap_VariableMapVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, std::vector<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>,std::allocator<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>)>)> v)\n"
		"VariableMapVector___setitem__(VariableMapVector self, difference_type i, value_type x)\n"
		""},
	 { (char *)"VariableMapVector_append", _wrap_VariableMapVector_append, METH_VARARGS, (char *)"VariableMapVector_append(VariableMapVector self, value_type x)"},
	 { (char *)"VariableMapVector_empty", _wrap_VariableMapVector_empty, METH_VARARGS, (char *)"VariableMapVector_empty(VariableMapVector self) -> bool"},
	 { (char *)"VariableMapVector_size", _wrap_VariableMapVector_size, METH_VARARGS, (char *)"VariableMapVector_size(VariableMapVector self) -> size_type"},
	 { (char *)"VariableMapVector_clear", _wrap_VariableMapVector_clear, METH_VARARGS, (char *)"VariableMapVector_clear(VariableMapVector self)"},
	 { (char *)"VariableMapVector_swap", _wrap_VariableMapVector_swap, METH_VARARGS, (char *)"VariableMapVector_swap(VariableMapVector self, std::vector<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>)> v)"},
	 { (char *)"VariableMapVector_get_allocator", _wrap_VariableMapVector_get_allocator, METH_VARARGS, (char *)"VariableMapVector_get_allocator(VariableMapVector self) -> allocator_type"},
	 { (char *)"VariableMapVector_begin", _wrap_VariableMapVector_begin, METH_VARARGS, (char *)"VariableMapVector_begin(VariableMapVector self) -> const_iterator"},
	 { (char *)"VariableMapVector_end", _wrap_VariableMapVector_end, METH_VARARGS, (char *)"VariableMapVector_end(VariableMapVector self) -> const_iterator"},
	 { (char *)"VariableMapVector_rbegin", _wrap_VariableMapVector_rbegin, METH_VARARGS, (char *)"VariableMapVector_rbegin(VariableMapVector self) -> const_reverse_iterator"},
	 { (char *)"VariableMapVector_rend", _wrap_VariableMapVector_rend, METH_VARARGS, (char *)"VariableMapVector_rend(VariableMapVector self) -> const_reverse_iterator"},
	 { (char *)"VariableMapVector_pop_back", _wrap_VariableMapVector_pop_back, METH_VARARGS, (char *)"VariableMapVector_pop_back(VariableMapVector self)"},
	 { (char *)"VariableMapVector_erase", _wrap_VariableMapVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VariableMapVector_erase(VariableMapVector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_VariableMapVector", _wrap_new_VariableMapVector, METH_VARARGS, (char *)"\n"
		"VariableMapVector()\n"
		"VariableMapVector(std::vector<(std::map<(std::string,HuginBase::Variable,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,HuginBase::Variable)>)>)>)> arg0)\n"
		"VariableMapVector(size_type size)\n"
		"new_VariableMapVector(size_type size, value_type value) -> VariableMapVector\n"
		""},
	 { (char *)"VariableMapVector_push_back", _wrap_VariableMapVector_push_back, METH_VARARGS, (char *)"VariableMapVector_push_back(VariableMapVector self, value_type x)"},
	 { (char *)"VariableMapVector_front", _wrap_VariableMapVector_front, METH_VARARGS, (char *)"VariableMapVector_front(VariableMapVector self) -> value_type"},
	 { (char *)"VariableMapVector_back", _wrap_VariableMapVector_back, METH_VARARGS, (char *)"VariableMapVector_back(VariableMapVector self) -> value_type"},
	 { (char *)"VariableMapVector_assign", _wrap_VariableMapVector_assign, METH_VARARGS, (char *)"VariableMapVector_assign(VariableMapVector self, size_type n, value_type x)"},
	 { (char *)"VariableMapVector_resize", _wrap_VariableMapVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VariableMapVector_resize(VariableMapVector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"VariableMapVector_insert", _wrap_VariableMapVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VariableMapVector_insert(VariableMapVector self, iterator pos, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VariableMapVector_reserve", _wrap_VariableMapVector_reserve, METH_VARARGS, (char *)"VariableMapVector_reserve(VariableMapVector self, size_type n)"},
	 { (char *)"VariableMapVector_capacity", _wrap_VariableMapVector_capacity, METH_VARARGS, (char *)"VariableMapVector_capacity(VariableMapVector self) -> size_type"},
	 { (char *)"delete_VariableMapVector", _wrap_delete_VariableMapVector, METH_VARARGS, (char *)"delete_VariableMapVector(VariableMapVector self)"},
	 { (char *)"VariableMapVector_swigregister", VariableMapVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"LensVarMap_iterator", _wrap_LensVarMap_iterator, METH_VARARGS, (char *)"LensVarMap_iterator(LensVarMap self) -> SwigPyIterator"},
	 { (char *)"LensVarMap___nonzero__", _wrap_LensVarMap___nonzero__, METH_VARARGS, (char *)"LensVarMap___nonzero__(LensVarMap self) -> bool"},
	 { (char *)"LensVarMap___bool__", _wrap_LensVarMap___bool__, METH_VARARGS, (char *)"LensVarMap___bool__(LensVarMap self) -> bool"},
	 { (char *)"LensVarMap___len__", _wrap_LensVarMap___len__, METH_VARARGS, (char *)"LensVarMap___len__(LensVarMap self) -> size_type"},
	 { (char *)"LensVarMap___getitem__", _wrap_LensVarMap___getitem__, METH_VARARGS, (char *)"LensVarMap___getitem__(LensVarMap self, key_type key) -> mapped_type"},
	 { (char *)"LensVarMap___delitem__", _wrap_LensVarMap___delitem__, METH_VARARGS, (char *)"LensVarMap___delitem__(LensVarMap self, key_type key)"},
	 { (char *)"LensVarMap_has_key", _wrap_LensVarMap_has_key, METH_VARARGS, (char *)"LensVarMap_has_key(LensVarMap self, key_type key) -> bool"},
	 { (char *)"LensVarMap_keys", _wrap_LensVarMap_keys, METH_VARARGS, (char *)"LensVarMap_keys(LensVarMap self) -> PyObject"},
	 { (char *)"LensVarMap_values", _wrap_LensVarMap_values, METH_VARARGS, (char *)"LensVarMap_values(LensVarMap self) -> PyObject"},
	 { (char *)"LensVarMap_items", _wrap_LensVarMap_items, METH_VARARGS, (char *)"LensVarMap_items(LensVarMap self) -> PyObject"},
	 { (char *)"LensVarMap___contains__", _wrap_LensVarMap___contains__, METH_VARARGS, (char *)"LensVarMap___contains__(LensVarMap self, key_type key) -> bool"},
	 { (char *)"LensVarMap_key_iterator", _wrap_LensVarMap_key_iterator, METH_VARARGS, (char *)"LensVarMap_key_iterator(LensVarMap self) -> SwigPyIterator"},
	 { (char *)"LensVarMap_value_iterator", _wrap_LensVarMap_value_iterator, METH_VARARGS, (char *)"LensVarMap_value_iterator(LensVarMap self) -> SwigPyIterator"},
	 { (char *)"LensVarMap___setitem__", _wrap_LensVarMap___setitem__, METH_VARARGS, (char *)"LensVarMap___setitem__(LensVarMap self, key_type key, mapped_type x)"},
	 { (char *)"new_LensVarMap", _wrap_new_LensVarMap, METH_VARARGS, (char *)"\n"
		"LensVarMap(std::less<(std::string)> arg0)\n"
		"LensVarMap()\n"
		"new_LensVarMap(LensVarMap arg0) -> LensVarMap\n"
		""},
	 { (char *)"LensVarMap_empty", _wrap_LensVarMap_empty, METH_VARARGS, (char *)"LensVarMap_empty(LensVarMap self) -> bool"},
	 { (char *)"LensVarMap_size", _wrap_LensVarMap_size, METH_VARARGS, (char *)"LensVarMap_size(LensVarMap self) -> size_type"},
	 { (char *)"LensVarMap_clear", _wrap_LensVarMap_clear, METH_VARARGS, (char *)"LensVarMap_clear(LensVarMap self)"},
	 { (char *)"LensVarMap_swap", _wrap_LensVarMap_swap, METH_VARARGS, (char *)"LensVarMap_swap(LensVarMap self, LensVarMap v)"},
	 { (char *)"LensVarMap_get_allocator", _wrap_LensVarMap_get_allocator, METH_VARARGS, (char *)"LensVarMap_get_allocator(LensVarMap self) -> allocator_type"},
	 { (char *)"LensVarMap_begin", _wrap_LensVarMap_begin, METH_VARARGS, (char *)"LensVarMap_begin(LensVarMap self) -> const_iterator"},
	 { (char *)"LensVarMap_end", _wrap_LensVarMap_end, METH_VARARGS, (char *)"LensVarMap_end(LensVarMap self) -> const_iterator"},
	 { (char *)"LensVarMap_rbegin", _wrap_LensVarMap_rbegin, METH_VARARGS, (char *)"LensVarMap_rbegin(LensVarMap self) -> const_reverse_iterator"},
	 { (char *)"LensVarMap_rend", _wrap_LensVarMap_rend, METH_VARARGS, (char *)"LensVarMap_rend(LensVarMap self) -> const_reverse_iterator"},
	 { (char *)"LensVarMap_count", _wrap_LensVarMap_count, METH_VARARGS, (char *)"LensVarMap_count(LensVarMap self, key_type x) -> size_type"},
	 { (char *)"LensVarMap_erase", _wrap_LensVarMap_erase, METH_VARARGS, (char *)"\n"
		"erase(key_type x) -> size_type\n"
		"erase(iterator position)\n"
		"LensVarMap_erase(LensVarMap self, iterator first, iterator last)\n"
		""},
	 { (char *)"LensVarMap_find", _wrap_LensVarMap_find, METH_VARARGS, (char *)"LensVarMap_find(LensVarMap self, key_type x) -> iterator"},
	 { (char *)"LensVarMap_lower_bound", _wrap_LensVarMap_lower_bound, METH_VARARGS, (char *)"LensVarMap_lower_bound(LensVarMap self, key_type x) -> iterator"},
	 { (char *)"LensVarMap_upper_bound", _wrap_LensVarMap_upper_bound, METH_VARARGS, (char *)"LensVarMap_upper_bound(LensVarMap self, key_type x) -> iterator"},
	 { (char *)"delete_LensVarMap", _wrap_delete_LensVarMap, METH_VARARGS, (char *)"delete_LensVarMap(LensVarMap self)"},
	 { (char *)"LensVarMap_swigregister", LensVarMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"OptimizeVector_iterator", _wrap_OptimizeVector_iterator, METH_VARARGS, (char *)"OptimizeVector_iterator(OptimizeVector self) -> SwigPyIterator"},
	 { (char *)"OptimizeVector___nonzero__", _wrap_OptimizeVector___nonzero__, METH_VARARGS, (char *)"OptimizeVector___nonzero__(OptimizeVector self) -> bool"},
	 { (char *)"OptimizeVector___bool__", _wrap_OptimizeVector___bool__, METH_VARARGS, (char *)"OptimizeVector___bool__(OptimizeVector self) -> bool"},
	 { (char *)"OptimizeVector___len__", _wrap_OptimizeVector___len__, METH_VARARGS, (char *)"OptimizeVector___len__(OptimizeVector self) -> size_type"},
	 { (char *)"OptimizeVector_pop", _wrap_OptimizeVector_pop, METH_VARARGS, (char *)"OptimizeVector_pop(OptimizeVector self) -> value_type"},
	 { (char *)"OptimizeVector___getslice__", _wrap_OptimizeVector___getslice__, METH_VARARGS, (char *)"OptimizeVector___getslice__(OptimizeVector self, difference_type i, difference_type j) -> OptimizeVector"},
	 { (char *)"OptimizeVector___setslice__", _wrap_OptimizeVector___setslice__, METH_VARARGS, (char *)"\n"
		"OptimizeVector___setslice__(OptimizeVector self, difference_type i, difference_type j, \n"
		"    OptimizeVector v)\n"
		""},
	 { (char *)"OptimizeVector___delslice__", _wrap_OptimizeVector___delslice__, METH_VARARGS, (char *)"OptimizeVector___delslice__(OptimizeVector self, difference_type i, difference_type j)"},
	 { (char *)"OptimizeVector___delitem__", _wrap_OptimizeVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"OptimizeVector___delitem__(OptimizeVector self, PySliceObject slice)\n"
		""},
	 { (char *)"OptimizeVector___getitem__", _wrap_OptimizeVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> OptimizeVector\n"
		"OptimizeVector___getitem__(OptimizeVector self, difference_type i) -> value_type\n"
		""},
	 { (char *)"OptimizeVector___setitem__", _wrap_OptimizeVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, OptimizeVector v)\n"
		"OptimizeVector___setitem__(OptimizeVector self, difference_type i, value_type x)\n"
		""},
	 { (char *)"OptimizeVector_append", _wrap_OptimizeVector_append, METH_VARARGS, (char *)"OptimizeVector_append(OptimizeVector self, value_type x)"},
	 { (char *)"OptimizeVector_empty", _wrap_OptimizeVector_empty, METH_VARARGS, (char *)"OptimizeVector_empty(OptimizeVector self) -> bool"},
	 { (char *)"OptimizeVector_size", _wrap_OptimizeVector_size, METH_VARARGS, (char *)"OptimizeVector_size(OptimizeVector self) -> size_type"},
	 { (char *)"OptimizeVector_clear", _wrap_OptimizeVector_clear, METH_VARARGS, (char *)"OptimizeVector_clear(OptimizeVector self)"},
	 { (char *)"OptimizeVector_swap", _wrap_OptimizeVector_swap, METH_VARARGS, (char *)"OptimizeVector_swap(OptimizeVector self, OptimizeVector v)"},
	 { (char *)"OptimizeVector_get_allocator", _wrap_OptimizeVector_get_allocator, METH_VARARGS, (char *)"OptimizeVector_get_allocator(OptimizeVector self) -> allocator_type"},
	 { (char *)"OptimizeVector_begin", _wrap_OptimizeVector_begin, METH_VARARGS, (char *)"OptimizeVector_begin(OptimizeVector self) -> const_iterator"},
	 { (char *)"OptimizeVector_end", _wrap_OptimizeVector_end, METH_VARARGS, (char *)"OptimizeVector_end(OptimizeVector self) -> const_iterator"},
	 { (char *)"OptimizeVector_rbegin", _wrap_OptimizeVector_rbegin, METH_VARARGS, (char *)"OptimizeVector_rbegin(OptimizeVector self) -> const_reverse_iterator"},
	 { (char *)"OptimizeVector_rend", _wrap_OptimizeVector_rend, METH_VARARGS, (char *)"OptimizeVector_rend(OptimizeVector self) -> const_reverse_iterator"},
	 { (char *)"OptimizeVector_pop_back", _wrap_OptimizeVector_pop_back, METH_VARARGS, (char *)"OptimizeVector_pop_back(OptimizeVector self)"},
	 { (char *)"OptimizeVector_erase", _wrap_OptimizeVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"OptimizeVector_erase(OptimizeVector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_OptimizeVector", _wrap_new_OptimizeVector, METH_VARARGS, (char *)"\n"
		"OptimizeVector()\n"
		"OptimizeVector(OptimizeVector arg0)\n"
		"OptimizeVector(size_type size)\n"
		"new_OptimizeVector(size_type size, value_type value) -> OptimizeVector\n"
		""},
	 { (char *)"OptimizeVector_push_back", _wrap_OptimizeVector_push_back, METH_VARARGS, (char *)"OptimizeVector_push_back(OptimizeVector self, value_type x)"},
	 { (char *)"OptimizeVector_front", _wrap_OptimizeVector_front, METH_VARARGS, (char *)"OptimizeVector_front(OptimizeVector self) -> value_type"},
	 { (char *)"OptimizeVector_back", _wrap_OptimizeVector_back, METH_VARARGS, (char *)"OptimizeVector_back(OptimizeVector self) -> value_type"},
	 { (char *)"OptimizeVector_assign", _wrap_OptimizeVector_assign, METH_VARARGS, (char *)"OptimizeVector_assign(OptimizeVector self, size_type n, value_type x)"},
	 { (char *)"OptimizeVector_resize", _wrap_OptimizeVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"OptimizeVector_resize(OptimizeVector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"OptimizeVector_insert", _wrap_OptimizeVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"OptimizeVector_insert(OptimizeVector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"OptimizeVector_reserve", _wrap_OptimizeVector_reserve, METH_VARARGS, (char *)"OptimizeVector_reserve(OptimizeVector self, size_type n)"},
	 { (char *)"OptimizeVector_capacity", _wrap_OptimizeVector_capacity, METH_VARARGS, (char *)"OptimizeVector_capacity(OptimizeVector self) -> size_type"},
	 { (char *)"delete_OptimizeVector", _wrap_delete_OptimizeVector, METH_VARARGS, (char *)"delete_OptimizeVector(OptimizeVector self)"},
	 { (char *)"OptimizeVector_swigregister", OptimizeVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Variable", _wrap_new_Variable, METH_VARARGS, (char *)"\n"
		"Variable()\n"
		"Variable(string name, double val = 0.0)\n"
		"new_Variable(string name) -> Variable\n"
		""},
	 { (char *)"delete_Variable", _wrap_delete_Variable, METH_VARARGS, (char *)"delete_Variable(Variable self)"},
	 { (char *)"Variable__print", _wrap_Variable__print, METH_VARARGS, (char *)"Variable__print(Variable self, std::ostream o) -> std::ostream"},
	 { (char *)"Variable_getName", _wrap_Variable_getName, METH_VARARGS, (char *)"Variable_getName(Variable self) -> string"},
	 { (char *)"Variable_setValue", _wrap_Variable_setValue, METH_VARARGS, (char *)"Variable_setValue(Variable self, double v)"},
	 { (char *)"Variable_getValue", _wrap_Variable_getValue, METH_VARARGS, (char *)"Variable_getValue(Variable self) -> double"},
	 { (char *)"Variable_swigregister", Variable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LinkedVariable", _wrap_new_LinkedVariable, METH_VARARGS, (char *)"\n"
		"LinkedVariable(string name, double val = 0.0, int link = -1)\n"
		"LinkedVariable(string name, double val = 0.0)\n"
		"new_LinkedVariable(string name) -> LinkedVariable\n"
		""},
	 { (char *)"LinkedVariable_isLinked", _wrap_LinkedVariable_isLinked, METH_VARARGS, (char *)"LinkedVariable_isLinked(LinkedVariable self) -> bool"},
	 { (char *)"LinkedVariable_getLink", _wrap_LinkedVariable_getLink, METH_VARARGS, (char *)"LinkedVariable_getLink(LinkedVariable self) -> int"},
	 { (char *)"LinkedVariable_setLink", _wrap_LinkedVariable_setLink, METH_VARARGS, (char *)"LinkedVariable_setLink(LinkedVariable self, int link)"},
	 { (char *)"delete_LinkedVariable", _wrap_delete_LinkedVariable, METH_VARARGS, (char *)"delete_LinkedVariable(LinkedVariable self)"},
	 { (char *)"LinkedVariable_swigregister", LinkedVariable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LensVariable", _wrap_new_LensVariable, METH_VARARGS, (char *)"\n"
		"LensVariable()\n"
		"LensVariable(string name, double value, bool link = False)\n"
		"new_LensVariable(string name, double value) -> LensVariable\n"
		""},
	 { (char *)"delete_LensVariable", _wrap_delete_LensVariable, METH_VARARGS, (char *)"delete_LensVariable(LensVariable self)"},
	 { (char *)"LensVariable_printLink", _wrap_LensVariable_printLink, METH_VARARGS, (char *)"LensVariable_printLink(LensVariable self, std::ostream o, unsigned int link) -> std::ostream"},
	 { (char *)"LensVariable_isLinked", _wrap_LensVariable_isLinked, METH_VARARGS, (char *)"LensVariable_isLinked(LensVariable self) -> bool"},
	 { (char *)"LensVariable_setLinked", _wrap_LensVariable_setLinked, METH_VARARGS, (char *)"\n"
		"setLinked(bool l = True)\n"
		"LensVariable_setLinked(LensVariable self)\n"
		""},
	 { (char *)"LensVariable_swigregister", LensVariable_swigregister, METH_VARARGS, NULL},
	 { (char *)"fillVariableMap", _wrap_fillVariableMap, METH_VARARGS, (char *)"fillVariableMap(VariableMap vars)"},
	 { (char *)"printVariableMap", _wrap_printVariableMap, METH_VARARGS, (char *)"printVariableMap(std::ostream o, VariableMap vars)"},
	 { (char *)"fillLensVarMap", _wrap_fillLensVarMap, METH_VARARGS, (char *)"fillLensVarMap(LensVarMap vars)"},
	 { (char *)"CPVector_iterator", _wrap_CPVector_iterator, METH_VARARGS, (char *)"CPVector_iterator(CPVector self) -> SwigPyIterator"},
	 { (char *)"CPVector___nonzero__", _wrap_CPVector___nonzero__, METH_VARARGS, (char *)"CPVector___nonzero__(CPVector self) -> bool"},
	 { (char *)"CPVector___bool__", _wrap_CPVector___bool__, METH_VARARGS, (char *)"CPVector___bool__(CPVector self) -> bool"},
	 { (char *)"CPVector___len__", _wrap_CPVector___len__, METH_VARARGS, (char *)"CPVector___len__(CPVector self) -> size_type"},
	 { (char *)"CPVector_pop", _wrap_CPVector_pop, METH_VARARGS, (char *)"CPVector_pop(CPVector self) -> value_type"},
	 { (char *)"CPVector___getslice__", _wrap_CPVector___getslice__, METH_VARARGS, (char *)"CPVector___getslice__(CPVector self, difference_type i, difference_type j) -> std::vector<(HuginBase::ControlPoint,std::allocator<(HuginBase::ControlPoint)>)>"},
	 { (char *)"CPVector___setslice__", _wrap_CPVector___setslice__, METH_VARARGS, (char *)"\n"
		"CPVector___setslice__(CPVector self, difference_type i, difference_type j, \n"
		"    std::vector<(HuginBase::ControlPoint,std::allocator<(HuginBase::ControlPoint)>)> v)\n"
		""},
	 { (char *)"CPVector___delslice__", _wrap_CPVector___delslice__, METH_VARARGS, (char *)"CPVector___delslice__(CPVector self, difference_type i, difference_type j)"},
	 { (char *)"CPVector___delitem__", _wrap_CPVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"CPVector___delitem__(CPVector self, PySliceObject slice)\n"
		""},
	 { (char *)"CPVector___getitem__", _wrap_CPVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> std::vector<(HuginBase::ControlPoint,std::allocator<(HuginBase::ControlPoint)>)>\n"
		"CPVector___getitem__(CPVector self, difference_type i) -> value_type\n"
		""},
	 { (char *)"CPVector___setitem__", _wrap_CPVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, std::vector<(HuginBase::ControlPoint,std::allocator<(HuginBase::ControlPoint)>)> v)\n"
		"CPVector___setitem__(CPVector self, difference_type i, value_type x)\n"
		""},
	 { (char *)"CPVector_append", _wrap_CPVector_append, METH_VARARGS, (char *)"CPVector_append(CPVector self, value_type x)"},
	 { (char *)"CPVector_empty", _wrap_CPVector_empty, METH_VARARGS, (char *)"CPVector_empty(CPVector self) -> bool"},
	 { (char *)"CPVector_size", _wrap_CPVector_size, METH_VARARGS, (char *)"CPVector_size(CPVector self) -> size_type"},
	 { (char *)"CPVector_clear", _wrap_CPVector_clear, METH_VARARGS, (char *)"CPVector_clear(CPVector self)"},
	 { (char *)"CPVector_swap", _wrap_CPVector_swap, METH_VARARGS, (char *)"CPVector_swap(CPVector self, CPVector v)"},
	 { (char *)"CPVector_get_allocator", _wrap_CPVector_get_allocator, METH_VARARGS, (char *)"CPVector_get_allocator(CPVector self) -> allocator_type"},
	 { (char *)"CPVector_begin", _wrap_CPVector_begin, METH_VARARGS, (char *)"CPVector_begin(CPVector self) -> const_iterator"},
	 { (char *)"CPVector_end", _wrap_CPVector_end, METH_VARARGS, (char *)"CPVector_end(CPVector self) -> const_iterator"},
	 { (char *)"CPVector_rbegin", _wrap_CPVector_rbegin, METH_VARARGS, (char *)"CPVector_rbegin(CPVector self) -> const_reverse_iterator"},
	 { (char *)"CPVector_rend", _wrap_CPVector_rend, METH_VARARGS, (char *)"CPVector_rend(CPVector self) -> const_reverse_iterator"},
	 { (char *)"CPVector_pop_back", _wrap_CPVector_pop_back, METH_VARARGS, (char *)"CPVector_pop_back(CPVector self)"},
	 { (char *)"CPVector_erase", _wrap_CPVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"CPVector_erase(CPVector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_CPVector", _wrap_new_CPVector, METH_VARARGS, (char *)"\n"
		"CPVector()\n"
		"CPVector(CPVector arg0)\n"
		"CPVector(size_type size)\n"
		"new_CPVector(size_type size, value_type value) -> CPVector\n"
		""},
	 { (char *)"CPVector_push_back", _wrap_CPVector_push_back, METH_VARARGS, (char *)"CPVector_push_back(CPVector self, value_type x)"},
	 { (char *)"CPVector_front", _wrap_CPVector_front, METH_VARARGS, (char *)"CPVector_front(CPVector self) -> value_type"},
	 { (char *)"CPVector_back", _wrap_CPVector_back, METH_VARARGS, (char *)"CPVector_back(CPVector self) -> value_type"},
	 { (char *)"CPVector_assign", _wrap_CPVector_assign, METH_VARARGS, (char *)"CPVector_assign(CPVector self, size_type n, value_type x)"},
	 { (char *)"CPVector_resize", _wrap_CPVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"CPVector_resize(CPVector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"CPVector_insert", _wrap_CPVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"CPVector_insert(CPVector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"CPVector_reserve", _wrap_CPVector_reserve, METH_VARARGS, (char *)"CPVector_reserve(CPVector self, size_type n)"},
	 { (char *)"CPVector_capacity", _wrap_CPVector_capacity, METH_VARARGS, (char *)"CPVector_capacity(CPVector self) -> size_type"},
	 { (char *)"delete_CPVector", _wrap_delete_CPVector, METH_VARARGS, (char *)"delete_CPVector(CPVector self)"},
	 { (char *)"CPVector_swigregister", CPVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CPoint", _wrap_new_CPoint, METH_VARARGS, (char *)"\n"
		"CPoint()\n"
		"CPoint(unsigned int first, ControlPoint second)\n"
		"new_CPoint(CPoint p) -> CPoint\n"
		""},
	 { (char *)"CPoint_first_set", _wrap_CPoint_first_set, METH_VARARGS, (char *)"CPoint_first_set(CPoint self, unsigned int first)"},
	 { (char *)"CPoint_first_get", _wrap_CPoint_first_get, METH_VARARGS, (char *)"CPoint_first_get(CPoint self) -> unsigned int"},
	 { (char *)"CPoint_second_set", _wrap_CPoint_second_set, METH_VARARGS, (char *)"CPoint_second_set(CPoint self, ControlPoint second)"},
	 { (char *)"CPoint_second_get", _wrap_CPoint_second_get, METH_VARARGS, (char *)"CPoint_second_get(CPoint self) -> ControlPoint"},
	 { (char *)"delete_CPoint", _wrap_delete_CPoint, METH_VARARGS, (char *)"delete_CPoint(CPoint self)"},
	 { (char *)"CPoint_swigregister", CPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"CPointVector_iterator", _wrap_CPointVector_iterator, METH_VARARGS, (char *)"CPointVector_iterator(CPointVector self) -> SwigPyIterator"},
	 { (char *)"CPointVector___nonzero__", _wrap_CPointVector___nonzero__, METH_VARARGS, (char *)"CPointVector___nonzero__(CPointVector self) -> bool"},
	 { (char *)"CPointVector___bool__", _wrap_CPointVector___bool__, METH_VARARGS, (char *)"CPointVector___bool__(CPointVector self) -> bool"},
	 { (char *)"CPointVector___len__", _wrap_CPointVector___len__, METH_VARARGS, (char *)"CPointVector___len__(CPointVector self) -> size_type"},
	 { (char *)"CPointVector_pop", _wrap_CPointVector_pop, METH_VARARGS, (char *)"CPointVector_pop(CPointVector self) -> value_type"},
	 { (char *)"CPointVector___getslice__", _wrap_CPointVector___getslice__, METH_VARARGS, (char *)"CPointVector___getslice__(CPointVector self, difference_type i, difference_type j) -> std::vector<(std::pair<(unsigned int,HuginBase::ControlPoint)>,std::allocator<(std::pair<(unsigned int,HuginBase::ControlPoint)>)>)>"},
	 { (char *)"CPointVector___setslice__", _wrap_CPointVector___setslice__, METH_VARARGS, (char *)"\n"
		"CPointVector___setslice__(CPointVector self, difference_type i, difference_type j, \n"
		"    std::vector<(std::pair<(unsigned int,HuginBase::ControlPoint)>,std::allocator<(std::pair<(unsigned int,HuginBase::ControlPoint)>)>)> v)\n"
		""},
	 { (char *)"CPointVector___delslice__", _wrap_CPointVector___delslice__, METH_VARARGS, (char *)"CPointVector___delslice__(CPointVector self, difference_type i, difference_type j)"},
	 { (char *)"CPointVector___delitem__", _wrap_CPointVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"CPointVector___delitem__(CPointVector self, PySliceObject slice)\n"
		""},
	 { (char *)"CPointVector___getitem__", _wrap_CPointVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> std::vector<(std::pair<(unsigned int,HuginBase::ControlPoint)>,std::allocator<(std::pair<(unsigned int,HuginBase::ControlPoint)>)>)>\n"
		"CPointVector___getitem__(CPointVector self, difference_type i) -> value_type\n"
		""},
	 { (char *)"CPointVector___setitem__", _wrap_CPointVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, std::vector<(std::pair<(unsigned int,HuginBase::ControlPoint)>,std::allocator<(std::pair<(unsigned int,HuginBase::ControlPoint)>)>)> v)\n"
		"CPointVector___setitem__(CPointVector self, difference_type i, value_type x)\n"
		""},
	 { (char *)"CPointVector_append", _wrap_CPointVector_append, METH_VARARGS, (char *)"CPointVector_append(CPointVector self, value_type x)"},
	 { (char *)"CPointVector_empty", _wrap_CPointVector_empty, METH_VARARGS, (char *)"CPointVector_empty(CPointVector self) -> bool"},
	 { (char *)"CPointVector_size", _wrap_CPointVector_size, METH_VARARGS, (char *)"CPointVector_size(CPointVector self) -> size_type"},
	 { (char *)"CPointVector_clear", _wrap_CPointVector_clear, METH_VARARGS, (char *)"CPointVector_clear(CPointVector self)"},
	 { (char *)"CPointVector_swap", _wrap_CPointVector_swap, METH_VARARGS, (char *)"CPointVector_swap(CPointVector self, std::vector<(std::pair<(unsigned int,HuginBase::ControlPoint)>)> v)"},
	 { (char *)"CPointVector_get_allocator", _wrap_CPointVector_get_allocator, METH_VARARGS, (char *)"CPointVector_get_allocator(CPointVector self) -> allocator_type"},
	 { (char *)"CPointVector_begin", _wrap_CPointVector_begin, METH_VARARGS, (char *)"CPointVector_begin(CPointVector self) -> const_iterator"},
	 { (char *)"CPointVector_end", _wrap_CPointVector_end, METH_VARARGS, (char *)"CPointVector_end(CPointVector self) -> const_iterator"},
	 { (char *)"CPointVector_rbegin", _wrap_CPointVector_rbegin, METH_VARARGS, (char *)"CPointVector_rbegin(CPointVector self) -> const_reverse_iterator"},
	 { (char *)"CPointVector_rend", _wrap_CPointVector_rend, METH_VARARGS, (char *)"CPointVector_rend(CPointVector self) -> const_reverse_iterator"},
	 { (char *)"CPointVector_pop_back", _wrap_CPointVector_pop_back, METH_VARARGS, (char *)"CPointVector_pop_back(CPointVector self)"},
	 { (char *)"CPointVector_erase", _wrap_CPointVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"CPointVector_erase(CPointVector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_CPointVector", _wrap_new_CPointVector, METH_VARARGS, (char *)"\n"
		"CPointVector()\n"
		"CPointVector(std::vector<(std::pair<(unsigned int,HuginBase::ControlPoint)>)> arg0)\n"
		"CPointVector(size_type size)\n"
		"new_CPointVector(size_type size, value_type value) -> CPointVector\n"
		""},
	 { (char *)"CPointVector_push_back", _wrap_CPointVector_push_back, METH_VARARGS, (char *)"CPointVector_push_back(CPointVector self, value_type x)"},
	 { (char *)"CPointVector_front", _wrap_CPointVector_front, METH_VARARGS, (char *)"CPointVector_front(CPointVector self) -> value_type"},
	 { (char *)"CPointVector_back", _wrap_CPointVector_back, METH_VARARGS, (char *)"CPointVector_back(CPointVector self) -> value_type"},
	 { (char *)"CPointVector_assign", _wrap_CPointVector_assign, METH_VARARGS, (char *)"CPointVector_assign(CPointVector self, size_type n, value_type x)"},
	 { (char *)"CPointVector_resize", _wrap_CPointVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"CPointVector_resize(CPointVector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"CPointVector_insert", _wrap_CPointVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"CPointVector_insert(CPointVector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"CPointVector_reserve", _wrap_CPointVector_reserve, METH_VARARGS, (char *)"CPointVector_reserve(CPointVector self, size_type n)"},
	 { (char *)"CPointVector_capacity", _wrap_CPointVector_capacity, METH_VARARGS, (char *)"CPointVector_capacity(CPointVector self) -> size_type"},
	 { (char *)"delete_CPointVector", _wrap_delete_CPointVector, METH_VARARGS, (char *)"delete_CPointVector(CPointVector self)"},
	 { (char *)"CPointVector_swigregister", CPointVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ControlPoint", _wrap_new_ControlPoint, METH_VARARGS, (char *)"\n"
		"ControlPoint()\n"
		"ControlPoint(unsigned int img1, double sX, double sY, unsigned int img2, \n"
		"    double dX, double dY, int mode = X_Y)\n"
		"new_ControlPoint(unsigned int img1, double sX, double sY, unsigned int img2, \n"
		"    double dX, double dY) -> ControlPoint\n"
		""},
	 { (char *)"ControlPoint___eq__", _wrap_ControlPoint___eq__, METH_VARARGS, (char *)"ControlPoint___eq__(ControlPoint self, ControlPoint o) -> bool"},
	 { (char *)"ControlPoint_getModeName", _wrap_ControlPoint_getModeName, METH_VARARGS, (char *)"ControlPoint_getModeName(ControlPoint self, OptimizeMode mode) -> string"},
	 { (char *)"ControlPoint_getCPString", _wrap_ControlPoint_getCPString, METH_VARARGS, (char *)"ControlPoint_getCPString(ControlPoint self) -> string"},
	 { (char *)"ControlPoint_mirror", _wrap_ControlPoint_mirror, METH_VARARGS, (char *)"ControlPoint_mirror(ControlPoint self)"},
	 { (char *)"ControlPoint_image1Nr_set", _wrap_ControlPoint_image1Nr_set, METH_VARARGS, (char *)"ControlPoint_image1Nr_set(ControlPoint self, unsigned int image1Nr)"},
	 { (char *)"ControlPoint_image1Nr_get", _wrap_ControlPoint_image1Nr_get, METH_VARARGS, (char *)"ControlPoint_image1Nr_get(ControlPoint self) -> unsigned int"},
	 { (char *)"ControlPoint_image2Nr_set", _wrap_ControlPoint_image2Nr_set, METH_VARARGS, (char *)"ControlPoint_image2Nr_set(ControlPoint self, unsigned int image2Nr)"},
	 { (char *)"ControlPoint_image2Nr_get", _wrap_ControlPoint_image2Nr_get, METH_VARARGS, (char *)"ControlPoint_image2Nr_get(ControlPoint self) -> unsigned int"},
	 { (char *)"ControlPoint_x1_set", _wrap_ControlPoint_x1_set, METH_VARARGS, (char *)"ControlPoint_x1_set(ControlPoint self, double x1)"},
	 { (char *)"ControlPoint_x1_get", _wrap_ControlPoint_x1_get, METH_VARARGS, (char *)"ControlPoint_x1_get(ControlPoint self) -> double"},
	 { (char *)"ControlPoint_y1_set", _wrap_ControlPoint_y1_set, METH_VARARGS, (char *)"ControlPoint_y1_set(ControlPoint self, double y1)"},
	 { (char *)"ControlPoint_y1_get", _wrap_ControlPoint_y1_get, METH_VARARGS, (char *)"ControlPoint_y1_get(ControlPoint self) -> double"},
	 { (char *)"ControlPoint_x2_set", _wrap_ControlPoint_x2_set, METH_VARARGS, (char *)"ControlPoint_x2_set(ControlPoint self, double x2)"},
	 { (char *)"ControlPoint_x2_get", _wrap_ControlPoint_x2_get, METH_VARARGS, (char *)"ControlPoint_x2_get(ControlPoint self) -> double"},
	 { (char *)"ControlPoint_y2_set", _wrap_ControlPoint_y2_set, METH_VARARGS, (char *)"ControlPoint_y2_set(ControlPoint self, double y2)"},
	 { (char *)"ControlPoint_y2_get", _wrap_ControlPoint_y2_get, METH_VARARGS, (char *)"ControlPoint_y2_get(ControlPoint self) -> double"},
	 { (char *)"ControlPoint_error_set", _wrap_ControlPoint_error_set, METH_VARARGS, (char *)"ControlPoint_error_set(ControlPoint self, double error)"},
	 { (char *)"ControlPoint_error_get", _wrap_ControlPoint_error_get, METH_VARARGS, (char *)"ControlPoint_error_get(ControlPoint self) -> double"},
	 { (char *)"ControlPoint_mode_set", _wrap_ControlPoint_mode_set, METH_VARARGS, (char *)"ControlPoint_mode_set(ControlPoint self, int mode)"},
	 { (char *)"ControlPoint_mode_get", _wrap_ControlPoint_mode_get, METH_VARARGS, (char *)"ControlPoint_mode_get(ControlPoint self) -> int"},
	 { (char *)"ControlPoint_modeNames_get", _wrap_ControlPoint_modeNames_get, METH_VARARGS, NULL},
	 { (char *)"ControlPoint_modeNames_set", _wrap_ControlPoint_modeNames_set, METH_VARARGS, NULL},
	 { (char *)"delete_ControlPoint", _wrap_delete_ControlPoint, METH_VARARGS, (char *)"delete_ControlPoint(ControlPoint self)"},
	 { (char *)"ControlPoint_swigregister", ControlPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DestPanoImage", _wrap_new_DestPanoImage, METH_VARARGS, (char *)"\n"
		"DestPanoImage()\n"
		"new_DestPanoImage(Projection proj, double hfov, Size2D sz) -> DestPanoImage\n"
		""},
	 { (char *)"DestPanoImage_horizontalWarpNeeded", _wrap_DestPanoImage_horizontalWarpNeeded, METH_VARARGS, (char *)"DestPanoImage_horizontalWarpNeeded(DestPanoImage self) -> bool"},
	 { (char *)"DestPanoImage_getProjection", _wrap_DestPanoImage_getProjection, METH_VARARGS, (char *)"DestPanoImage_getProjection(DestPanoImage self) -> Projection"},
	 { (char *)"DestPanoImage_setProjection", _wrap_DestPanoImage_setProjection, METH_VARARGS, (char *)"DestPanoImage_setProjection(DestPanoImage self, Projection val)"},
	 { (char *)"DestPanoImage_getHFOV", _wrap_DestPanoImage_getHFOV, METH_VARARGS, (char *)"DestPanoImage_getHFOV(DestPanoImage self) -> double"},
	 { (char *)"DestPanoImage_setHFOV", _wrap_DestPanoImage_setHFOV, METH_VARARGS, (char *)"DestPanoImage_setHFOV(DestPanoImage self, double val)"},
	 { (char *)"DestPanoImage_getSize", _wrap_DestPanoImage_getSize, METH_VARARGS, (char *)"DestPanoImage_getSize(DestPanoImage self) -> Size2D"},
	 { (char *)"DestPanoImage_setSize", _wrap_DestPanoImage_setSize, METH_VARARGS, (char *)"DestPanoImage_setSize(DestPanoImage self, Size2D val)"},
	 { (char *)"DestPanoImage_getROI", _wrap_DestPanoImage_getROI, METH_VARARGS, (char *)"DestPanoImage_getROI(DestPanoImage self) -> vigra::Rect2D"},
	 { (char *)"DestPanoImage_setROI", _wrap_DestPanoImage_setROI, METH_VARARGS, (char *)"DestPanoImage_setROI(DestPanoImage self, vigra::Rect2D val)"},
	 { (char *)"delete_DestPanoImage", _wrap_delete_DestPanoImage, METH_VARARGS, (char *)"delete_DestPanoImage(DestPanoImage self)"},
	 { (char *)"DestPanoImage_swigregister", DestPanoImage_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PanoramaOptions", _wrap_new_PanoramaOptions, METH_VARARGS, (char *)"new_PanoramaOptions() -> PanoramaOptions"},
	 { (char *)"delete_PanoramaOptions", _wrap_delete_PanoramaOptions, METH_VARARGS, (char *)"delete_PanoramaOptions(PanoramaOptions self)"},
	 { (char *)"PanoramaOptions_reset", _wrap_PanoramaOptions_reset, METH_VARARGS, (char *)"PanoramaOptions_reset(PanoramaOptions self)"},
	 { (char *)"PanoramaOptions_printScriptLine", _wrap_PanoramaOptions_printScriptLine, METH_VARARGS, (char *)"\n"
		"printScriptLine(std::ostream o, bool forPTOptimizer = False)\n"
		"PanoramaOptions_printScriptLine(PanoramaOptions self, std::ostream o)\n"
		""},
	 { (char *)"PanoramaOptions_getFormatName", _wrap_PanoramaOptions_getFormatName, METH_VARARGS, (char *)"PanoramaOptions_getFormatName(FileFormat f) -> string"},
	 { (char *)"PanoramaOptions_getFormatFromName", _wrap_PanoramaOptions_getFormatFromName, METH_VARARGS, (char *)"PanoramaOptions_getFormatFromName(string name) -> FileFormat"},
	 { (char *)"PanoramaOptions_getOutputExtension", _wrap_PanoramaOptions_getOutputExtension, METH_VARARGS, (char *)"PanoramaOptions_getOutputExtension(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_setWidth", _wrap_PanoramaOptions_setWidth, METH_VARARGS, (char *)"\n"
		"setWidth(unsigned int w, bool keepView = True)\n"
		"PanoramaOptions_setWidth(PanoramaOptions self, unsigned int w)\n"
		""},
	 { (char *)"PanoramaOptions_setHeight", _wrap_PanoramaOptions_setHeight, METH_VARARGS, (char *)"PanoramaOptions_setHeight(PanoramaOptions self, unsigned int h)"},
	 { (char *)"PanoramaOptions_getWidth", _wrap_PanoramaOptions_getWidth, METH_VARARGS, (char *)"PanoramaOptions_getWidth(PanoramaOptions self) -> unsigned int"},
	 { (char *)"PanoramaOptions_getHeight", _wrap_PanoramaOptions_getHeight, METH_VARARGS, (char *)"PanoramaOptions_getHeight(PanoramaOptions self) -> unsigned int"},
	 { (char *)"PanoramaOptions_getSize", _wrap_PanoramaOptions_getSize, METH_VARARGS, (char *)"PanoramaOptions_getSize(PanoramaOptions self) -> Size2D"},
	 { (char *)"PanoramaOptions_getROI", _wrap_PanoramaOptions_getROI, METH_VARARGS, (char *)"PanoramaOptions_getROI(PanoramaOptions self) -> vigra::Rect2D"},
	 { (char *)"PanoramaOptions_setROI", _wrap_PanoramaOptions_setROI, METH_VARARGS, (char *)"PanoramaOptions_setROI(PanoramaOptions self, vigra::Rect2D val)"},
	 { (char *)"PanoramaOptions_setProjection", _wrap_PanoramaOptions_setProjection, METH_VARARGS, (char *)"PanoramaOptions_setProjection(PanoramaOptions self, ProjectionFormat f)"},
	 { (char *)"PanoramaOptions_resetProjectionParameters", _wrap_PanoramaOptions_resetProjectionParameters, METH_VARARGS, (char *)"PanoramaOptions_resetProjectionParameters(PanoramaOptions self)"},
	 { (char *)"PanoramaOptions_getProjection", _wrap_PanoramaOptions_getProjection, METH_VARARGS, (char *)"PanoramaOptions_getProjection(PanoramaOptions self) -> ProjectionFormat"},
	 { (char *)"PanoramaOptions_getProjectionParameters", _wrap_PanoramaOptions_getProjectionParameters, METH_VARARGS, (char *)"PanoramaOptions_getProjectionParameters(PanoramaOptions self) -> std::vector<(double,std::allocator<(double)>)>"},
	 { (char *)"PanoramaOptions_setProjectionParameters", _wrap_PanoramaOptions_setProjectionParameters, METH_VARARGS, (char *)"PanoramaOptions_setProjectionParameters(PanoramaOptions self, std::vector<(double,std::allocator<(double)>)> params)"},
	 { (char *)"PanoramaOptions_fovCalcSupported", _wrap_PanoramaOptions_fovCalcSupported, METH_VARARGS, (char *)"PanoramaOptions_fovCalcSupported(PanoramaOptions self, ProjectionFormat f) -> bool"},
	 { (char *)"PanoramaOptions_setHFOV", _wrap_PanoramaOptions_setHFOV, METH_VARARGS, (char *)"\n"
		"setHFOV(double h, bool keepView = True)\n"
		"PanoramaOptions_setHFOV(PanoramaOptions self, double h)\n"
		""},
	 { (char *)"PanoramaOptions_getHFOV", _wrap_PanoramaOptions_getHFOV, METH_VARARGS, (char *)"PanoramaOptions_getHFOV(PanoramaOptions self) -> double"},
	 { (char *)"PanoramaOptions_setVFOV", _wrap_PanoramaOptions_setVFOV, METH_VARARGS, (char *)"PanoramaOptions_setVFOV(PanoramaOptions self, double v)"},
	 { (char *)"PanoramaOptions_getVFOV", _wrap_PanoramaOptions_getVFOV, METH_VARARGS, (char *)"PanoramaOptions_getVFOV(PanoramaOptions self) -> double"},
	 { (char *)"PanoramaOptions_getMaxHFOV", _wrap_PanoramaOptions_getMaxHFOV, METH_VARARGS, (char *)"PanoramaOptions_getMaxHFOV(PanoramaOptions self) -> double"},
	 { (char *)"PanoramaOptions_getMaxVFOV", _wrap_PanoramaOptions_getMaxVFOV, METH_VARARGS, (char *)"PanoramaOptions_getMaxVFOV(PanoramaOptions self) -> double"},
	 { (char *)"PanoramaOptions_getDestImage", _wrap_PanoramaOptions_getDestImage, METH_VARARGS, (char *)"PanoramaOptions_getDestImage(PanoramaOptions self) -> DestPanoImage"},
	 { (char *)"PanoramaOptions_outfile_set", _wrap_PanoramaOptions_outfile_set, METH_VARARGS, (char *)"PanoramaOptions_outfile_set(PanoramaOptions self, string outfile)"},
	 { (char *)"PanoramaOptions_outfile_get", _wrap_PanoramaOptions_outfile_get, METH_VARARGS, (char *)"PanoramaOptions_outfile_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_outputFormat_set", _wrap_PanoramaOptions_outputFormat_set, METH_VARARGS, (char *)"PanoramaOptions_outputFormat_set(PanoramaOptions self, FileFormat outputFormat)"},
	 { (char *)"PanoramaOptions_outputFormat_get", _wrap_PanoramaOptions_outputFormat_get, METH_VARARGS, (char *)"PanoramaOptions_outputFormat_get(PanoramaOptions self) -> FileFormat"},
	 { (char *)"PanoramaOptions_quality_set", _wrap_PanoramaOptions_quality_set, METH_VARARGS, (char *)"PanoramaOptions_quality_set(PanoramaOptions self, int quality)"},
	 { (char *)"PanoramaOptions_quality_get", _wrap_PanoramaOptions_quality_get, METH_VARARGS, (char *)"PanoramaOptions_quality_get(PanoramaOptions self) -> int"},
	 { (char *)"PanoramaOptions_tiffCompression_set", _wrap_PanoramaOptions_tiffCompression_set, METH_VARARGS, (char *)"PanoramaOptions_tiffCompression_set(PanoramaOptions self, string tiffCompression)"},
	 { (char *)"PanoramaOptions_tiffCompression_get", _wrap_PanoramaOptions_tiffCompression_get, METH_VARARGS, (char *)"PanoramaOptions_tiffCompression_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_tiff_saveROI_set", _wrap_PanoramaOptions_tiff_saveROI_set, METH_VARARGS, (char *)"PanoramaOptions_tiff_saveROI_set(PanoramaOptions self, bool tiff_saveROI)"},
	 { (char *)"PanoramaOptions_tiff_saveROI_get", _wrap_PanoramaOptions_tiff_saveROI_get, METH_VARARGS, (char *)"PanoramaOptions_tiff_saveROI_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_colorCorrection_set", _wrap_PanoramaOptions_colorCorrection_set, METH_VARARGS, (char *)"PanoramaOptions_colorCorrection_set(PanoramaOptions self, ColorCorrection colorCorrection)"},
	 { (char *)"PanoramaOptions_colorCorrection_get", _wrap_PanoramaOptions_colorCorrection_get, METH_VARARGS, (char *)"PanoramaOptions_colorCorrection_get(PanoramaOptions self) -> ColorCorrection"},
	 { (char *)"PanoramaOptions_colorReferenceImage_set", _wrap_PanoramaOptions_colorReferenceImage_set, METH_VARARGS, (char *)"PanoramaOptions_colorReferenceImage_set(PanoramaOptions self, unsigned int colorReferenceImage)"},
	 { (char *)"PanoramaOptions_colorReferenceImage_get", _wrap_PanoramaOptions_colorReferenceImage_get, METH_VARARGS, (char *)"PanoramaOptions_colorReferenceImage_get(PanoramaOptions self) -> unsigned int"},
	 { (char *)"PanoramaOptions_gamma_set", _wrap_PanoramaOptions_gamma_set, METH_VARARGS, (char *)"PanoramaOptions_gamma_set(PanoramaOptions self, double gamma)"},
	 { (char *)"PanoramaOptions_gamma_get", _wrap_PanoramaOptions_gamma_get, METH_VARARGS, (char *)"PanoramaOptions_gamma_get(PanoramaOptions self) -> double"},
	 { (char *)"PanoramaOptions_interpolator_set", _wrap_PanoramaOptions_interpolator_set, METH_VARARGS, (char *)"PanoramaOptions_interpolator_set(PanoramaOptions self, vigra_ext::Interpolator interpolator)"},
	 { (char *)"PanoramaOptions_interpolator_get", _wrap_PanoramaOptions_interpolator_get, METH_VARARGS, (char *)"PanoramaOptions_interpolator_get(PanoramaOptions self) -> vigra_ext::Interpolator"},
	 { (char *)"PanoramaOptions_optimizeReferenceImage_set", _wrap_PanoramaOptions_optimizeReferenceImage_set, METH_VARARGS, (char *)"PanoramaOptions_optimizeReferenceImage_set(PanoramaOptions self, unsigned int optimizeReferenceImage)"},
	 { (char *)"PanoramaOptions_optimizeReferenceImage_get", _wrap_PanoramaOptions_optimizeReferenceImage_get, METH_VARARGS, (char *)"PanoramaOptions_optimizeReferenceImage_get(PanoramaOptions self) -> unsigned int"},
	 { (char *)"PanoramaOptions_featherWidth_set", _wrap_PanoramaOptions_featherWidth_set, METH_VARARGS, (char *)"PanoramaOptions_featherWidth_set(PanoramaOptions self, unsigned int featherWidth)"},
	 { (char *)"PanoramaOptions_featherWidth_get", _wrap_PanoramaOptions_featherWidth_get, METH_VARARGS, (char *)"PanoramaOptions_featherWidth_get(PanoramaOptions self) -> unsigned int"},
	 { (char *)"PanoramaOptions_remapAcceleration_set", _wrap_PanoramaOptions_remapAcceleration_set, METH_VARARGS, (char *)"PanoramaOptions_remapAcceleration_set(PanoramaOptions self, PTStitcherAcceleration remapAcceleration)"},
	 { (char *)"PanoramaOptions_remapAcceleration_get", _wrap_PanoramaOptions_remapAcceleration_get, METH_VARARGS, (char *)"PanoramaOptions_remapAcceleration_get(PanoramaOptions self) -> PTStitcherAcceleration"},
	 { (char *)"PanoramaOptions_blendMode_set", _wrap_PanoramaOptions_blendMode_set, METH_VARARGS, (char *)"PanoramaOptions_blendMode_set(PanoramaOptions self, BlendingMechanism blendMode)"},
	 { (char *)"PanoramaOptions_blendMode_get", _wrap_PanoramaOptions_blendMode_get, METH_VARARGS, (char *)"PanoramaOptions_blendMode_get(PanoramaOptions self) -> BlendingMechanism"},
	 { (char *)"PanoramaOptions_hdrMergeMode_set", _wrap_PanoramaOptions_hdrMergeMode_set, METH_VARARGS, (char *)"PanoramaOptions_hdrMergeMode_set(PanoramaOptions self, HDRMergeType hdrMergeMode)"},
	 { (char *)"PanoramaOptions_hdrMergeMode_get", _wrap_PanoramaOptions_hdrMergeMode_get, METH_VARARGS, (char *)"PanoramaOptions_hdrMergeMode_get(PanoramaOptions self) -> HDRMergeType"},
	 { (char *)"PanoramaOptions_remapper_set", _wrap_PanoramaOptions_remapper_set, METH_VARARGS, (char *)"PanoramaOptions_remapper_set(PanoramaOptions self, Remapper remapper)"},
	 { (char *)"PanoramaOptions_remapper_get", _wrap_PanoramaOptions_remapper_get, METH_VARARGS, (char *)"PanoramaOptions_remapper_get(PanoramaOptions self) -> Remapper"},
	 { (char *)"PanoramaOptions_remapUsingGPU_set", _wrap_PanoramaOptions_remapUsingGPU_set, METH_VARARGS, (char *)"PanoramaOptions_remapUsingGPU_set(PanoramaOptions self, bool remapUsingGPU)"},
	 { (char *)"PanoramaOptions_remapUsingGPU_get", _wrap_PanoramaOptions_remapUsingGPU_get, METH_VARARGS, (char *)"PanoramaOptions_remapUsingGPU_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_saveCoordImgs_set", _wrap_PanoramaOptions_saveCoordImgs_set, METH_VARARGS, (char *)"PanoramaOptions_saveCoordImgs_set(PanoramaOptions self, bool saveCoordImgs)"},
	 { (char *)"PanoramaOptions_saveCoordImgs_get", _wrap_PanoramaOptions_saveCoordImgs_get, METH_VARARGS, (char *)"PanoramaOptions_saveCoordImgs_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_huberSigma_set", _wrap_PanoramaOptions_huberSigma_set, METH_VARARGS, (char *)"PanoramaOptions_huberSigma_set(PanoramaOptions self, double huberSigma)"},
	 { (char *)"PanoramaOptions_huberSigma_get", _wrap_PanoramaOptions_huberSigma_get, METH_VARARGS, (char *)"PanoramaOptions_huberSigma_get(PanoramaOptions self) -> double"},
	 { (char *)"PanoramaOptions_photometricHuberSigma_set", _wrap_PanoramaOptions_photometricHuberSigma_set, METH_VARARGS, (char *)"PanoramaOptions_photometricHuberSigma_set(PanoramaOptions self, double photometricHuberSigma)"},
	 { (char *)"PanoramaOptions_photometricHuberSigma_get", _wrap_PanoramaOptions_photometricHuberSigma_get, METH_VARARGS, (char *)"PanoramaOptions_photometricHuberSigma_get(PanoramaOptions self) -> double"},
	 { (char *)"PanoramaOptions_photometricSymmetricError_set", _wrap_PanoramaOptions_photometricSymmetricError_set, METH_VARARGS, (char *)"PanoramaOptions_photometricSymmetricError_set(PanoramaOptions self, double photometricSymmetricError)"},
	 { (char *)"PanoramaOptions_photometricSymmetricError_get", _wrap_PanoramaOptions_photometricSymmetricError_get, METH_VARARGS, (char *)"PanoramaOptions_photometricSymmetricError_get(PanoramaOptions self) -> double"},
	 { (char *)"PanoramaOptions_outputMode_set", _wrap_PanoramaOptions_outputMode_set, METH_VARARGS, (char *)"PanoramaOptions_outputMode_set(PanoramaOptions self, OutputMode outputMode)"},
	 { (char *)"PanoramaOptions_outputMode_get", _wrap_PanoramaOptions_outputMode_get, METH_VARARGS, (char *)"PanoramaOptions_outputMode_get(PanoramaOptions self) -> OutputMode"},
	 { (char *)"PanoramaOptions_outputLDRBlended_set", _wrap_PanoramaOptions_outputLDRBlended_set, METH_VARARGS, (char *)"PanoramaOptions_outputLDRBlended_set(PanoramaOptions self, bool outputLDRBlended)"},
	 { (char *)"PanoramaOptions_outputLDRBlended_get", _wrap_PanoramaOptions_outputLDRBlended_get, METH_VARARGS, (char *)"PanoramaOptions_outputLDRBlended_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_outputLDRLayers_set", _wrap_PanoramaOptions_outputLDRLayers_set, METH_VARARGS, (char *)"PanoramaOptions_outputLDRLayers_set(PanoramaOptions self, bool outputLDRLayers)"},
	 { (char *)"PanoramaOptions_outputLDRLayers_get", _wrap_PanoramaOptions_outputLDRLayers_get, METH_VARARGS, (char *)"PanoramaOptions_outputLDRLayers_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_outputLDRExposureRemapped_set", _wrap_PanoramaOptions_outputLDRExposureRemapped_set, METH_VARARGS, (char *)"PanoramaOptions_outputLDRExposureRemapped_set(PanoramaOptions self, bool outputLDRExposureRemapped)"},
	 { (char *)"PanoramaOptions_outputLDRExposureRemapped_get", _wrap_PanoramaOptions_outputLDRExposureRemapped_get, METH_VARARGS, (char *)"PanoramaOptions_outputLDRExposureRemapped_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_outputLDRExposureLayers_set", _wrap_PanoramaOptions_outputLDRExposureLayers_set, METH_VARARGS, (char *)"PanoramaOptions_outputLDRExposureLayers_set(PanoramaOptions self, bool outputLDRExposureLayers)"},
	 { (char *)"PanoramaOptions_outputLDRExposureLayers_get", _wrap_PanoramaOptions_outputLDRExposureLayers_get, METH_VARARGS, (char *)"PanoramaOptions_outputLDRExposureLayers_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_outputLDRExposureLayersFused_set", _wrap_PanoramaOptions_outputLDRExposureLayersFused_set, METH_VARARGS, (char *)"PanoramaOptions_outputLDRExposureLayersFused_set(PanoramaOptions self, bool outputLDRExposureLayersFused)"},
	 { (char *)"PanoramaOptions_outputLDRExposureLayersFused_get", _wrap_PanoramaOptions_outputLDRExposureLayersFused_get, METH_VARARGS, (char *)"PanoramaOptions_outputLDRExposureLayersFused_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_outputLDRExposureBlended_set", _wrap_PanoramaOptions_outputLDRExposureBlended_set, METH_VARARGS, (char *)"PanoramaOptions_outputLDRExposureBlended_set(PanoramaOptions self, bool outputLDRExposureBlended)"},
	 { (char *)"PanoramaOptions_outputLDRExposureBlended_get", _wrap_PanoramaOptions_outputLDRExposureBlended_get, METH_VARARGS, (char *)"PanoramaOptions_outputLDRExposureBlended_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_outputHDRBlended_set", _wrap_PanoramaOptions_outputHDRBlended_set, METH_VARARGS, (char *)"PanoramaOptions_outputHDRBlended_set(PanoramaOptions self, bool outputHDRBlended)"},
	 { (char *)"PanoramaOptions_outputHDRBlended_get", _wrap_PanoramaOptions_outputHDRBlended_get, METH_VARARGS, (char *)"PanoramaOptions_outputHDRBlended_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_outputHDRLayers_set", _wrap_PanoramaOptions_outputHDRLayers_set, METH_VARARGS, (char *)"PanoramaOptions_outputHDRLayers_set(PanoramaOptions self, bool outputHDRLayers)"},
	 { (char *)"PanoramaOptions_outputHDRLayers_get", _wrap_PanoramaOptions_outputHDRLayers_get, METH_VARARGS, (char *)"PanoramaOptions_outputHDRLayers_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_outputHDRStacks_set", _wrap_PanoramaOptions_outputHDRStacks_set, METH_VARARGS, (char *)"PanoramaOptions_outputHDRStacks_set(PanoramaOptions self, bool outputHDRStacks)"},
	 { (char *)"PanoramaOptions_outputHDRStacks_get", _wrap_PanoramaOptions_outputHDRStacks_get, METH_VARARGS, (char *)"PanoramaOptions_outputHDRStacks_get(PanoramaOptions self) -> bool"},
	 { (char *)"PanoramaOptions_outputLayersCompression_set", _wrap_PanoramaOptions_outputLayersCompression_set, METH_VARARGS, (char *)"PanoramaOptions_outputLayersCompression_set(PanoramaOptions self, string outputLayersCompression)"},
	 { (char *)"PanoramaOptions_outputLayersCompression_get", _wrap_PanoramaOptions_outputLayersCompression_get, METH_VARARGS, (char *)"PanoramaOptions_outputLayersCompression_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_outputImageType_set", _wrap_PanoramaOptions_outputImageType_set, METH_VARARGS, (char *)"PanoramaOptions_outputImageType_set(PanoramaOptions self, string outputImageType)"},
	 { (char *)"PanoramaOptions_outputImageType_get", _wrap_PanoramaOptions_outputImageType_get, METH_VARARGS, (char *)"PanoramaOptions_outputImageType_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_outputImageTypeCompression_set", _wrap_PanoramaOptions_outputImageTypeCompression_set, METH_VARARGS, (char *)"PanoramaOptions_outputImageTypeCompression_set(PanoramaOptions self, string outputImageTypeCompression)"},
	 { (char *)"PanoramaOptions_outputImageTypeCompression_get", _wrap_PanoramaOptions_outputImageTypeCompression_get, METH_VARARGS, (char *)"PanoramaOptions_outputImageTypeCompression_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_outputImageTypeHDR_set", _wrap_PanoramaOptions_outputImageTypeHDR_set, METH_VARARGS, (char *)"PanoramaOptions_outputImageTypeHDR_set(PanoramaOptions self, string outputImageTypeHDR)"},
	 { (char *)"PanoramaOptions_outputImageTypeHDR_get", _wrap_PanoramaOptions_outputImageTypeHDR_get, METH_VARARGS, (char *)"PanoramaOptions_outputImageTypeHDR_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_outputImageTypeHDRCompression_set", _wrap_PanoramaOptions_outputImageTypeHDRCompression_set, METH_VARARGS, (char *)"PanoramaOptions_outputImageTypeHDRCompression_set(PanoramaOptions self, string outputImageTypeHDRCompression)"},
	 { (char *)"PanoramaOptions_outputImageTypeHDRCompression_get", _wrap_PanoramaOptions_outputImageTypeHDRCompression_get, METH_VARARGS, (char *)"PanoramaOptions_outputImageTypeHDRCompression_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_enblendOptions_set", _wrap_PanoramaOptions_enblendOptions_set, METH_VARARGS, (char *)"PanoramaOptions_enblendOptions_set(PanoramaOptions self, string enblendOptions)"},
	 { (char *)"PanoramaOptions_enblendOptions_get", _wrap_PanoramaOptions_enblendOptions_get, METH_VARARGS, (char *)"PanoramaOptions_enblendOptions_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_enfuseOptions_set", _wrap_PanoramaOptions_enfuseOptions_set, METH_VARARGS, (char *)"PanoramaOptions_enfuseOptions_set(PanoramaOptions self, string enfuseOptions)"},
	 { (char *)"PanoramaOptions_enfuseOptions_get", _wrap_PanoramaOptions_enfuseOptions_get, METH_VARARGS, (char *)"PanoramaOptions_enfuseOptions_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_hdrmergeOptions_set", _wrap_PanoramaOptions_hdrmergeOptions_set, METH_VARARGS, (char *)"PanoramaOptions_hdrmergeOptions_set(PanoramaOptions self, string hdrmergeOptions)"},
	 { (char *)"PanoramaOptions_hdrmergeOptions_get", _wrap_PanoramaOptions_hdrmergeOptions_get, METH_VARARGS, (char *)"PanoramaOptions_hdrmergeOptions_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_outputExposureValue_set", _wrap_PanoramaOptions_outputExposureValue_set, METH_VARARGS, (char *)"PanoramaOptions_outputExposureValue_set(PanoramaOptions self, double outputExposureValue)"},
	 { (char *)"PanoramaOptions_outputExposureValue_get", _wrap_PanoramaOptions_outputExposureValue_get, METH_VARARGS, (char *)"PanoramaOptions_outputExposureValue_get(PanoramaOptions self) -> double"},
	 { (char *)"PanoramaOptions_outputEMoRParams_set", _wrap_PanoramaOptions_outputEMoRParams_set, METH_VARARGS, (char *)"PanoramaOptions_outputEMoRParams_set(PanoramaOptions self, std::vector<(float,std::allocator<(float)>)> outputEMoRParams)"},
	 { (char *)"PanoramaOptions_outputEMoRParams_get", _wrap_PanoramaOptions_outputEMoRParams_get, METH_VARARGS, (char *)"PanoramaOptions_outputEMoRParams_get(PanoramaOptions self) -> std::vector<(float,std::allocator<(float)>)>"},
	 { (char *)"PanoramaOptions_outputPixelType_set", _wrap_PanoramaOptions_outputPixelType_set, METH_VARARGS, (char *)"PanoramaOptions_outputPixelType_set(PanoramaOptions self, string outputPixelType)"},
	 { (char *)"PanoramaOptions_outputPixelType_get", _wrap_PanoramaOptions_outputPixelType_get, METH_VARARGS, (char *)"PanoramaOptions_outputPixelType_get(PanoramaOptions self) -> string"},
	 { (char *)"PanoramaOptions_m_projFeatures_set", _wrap_PanoramaOptions_m_projFeatures_set, METH_VARARGS, (char *)"PanoramaOptions_m_projFeatures_set(PanoramaOptions self, pano_projection_features m_projFeatures)"},
	 { (char *)"PanoramaOptions_m_projFeatures_get", _wrap_PanoramaOptions_m_projFeatures_get, METH_VARARGS, (char *)"PanoramaOptions_m_projFeatures_get(PanoramaOptions self) -> pano_projection_features"},
	 { (char *)"PanoramaOptions_swigregister", PanoramaOptions_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PanoramaMemento", _wrap_new_PanoramaMemento, METH_VARARGS, (char *)"\n"
		"PanoramaMemento()\n"
		"new_PanoramaMemento(PanoramaMemento o) -> PanoramaMemento\n"
		""},
	 { (char *)"delete_PanoramaMemento", _wrap_delete_PanoramaMemento, METH_VARARGS, (char *)"delete_PanoramaMemento(PanoramaMemento self)"},
	 { (char *)"PanoramaMemento_swigregister", PanoramaMemento_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Panorama", _wrap_new_Panorama, METH_VARARGS, (char *)"new_Panorama() -> Panorama"},
	 { (char *)"delete_Panorama", _wrap_delete_Panorama, METH_VARARGS, (char *)"delete_Panorama(Panorama self)"},
	 { (char *)"Panorama_getSubset", _wrap_Panorama_getSubset, METH_VARARGS, (char *)"Panorama_getSubset(Panorama self, UIntSet imgs) -> Panorama"},
	 { (char *)"Panorama_duplicate", _wrap_Panorama_duplicate, METH_VARARGS, (char *)"Panorama_duplicate(Panorama self) -> Panorama"},
	 { (char *)"Panorama_getNewSubset", _wrap_Panorama_getNewSubset, METH_VARARGS, (char *)"Panorama_getNewSubset(Panorama self, UIntSet imgs) -> PanoramaData"},
	 { (char *)"Panorama_getNewCopy", _wrap_Panorama_getNewCopy, METH_VARARGS, (char *)"Panorama_getNewCopy(Panorama self) -> PanoramaData"},
	 { (char *)"Panorama_getNrOfImages", _wrap_Panorama_getNrOfImages, METH_VARARGS, (char *)"Panorama_getNrOfImages(Panorama self) -> std::size_t"},
	 { (char *)"Panorama_getImage", _wrap_Panorama_getImage, METH_VARARGS, (char *)"Panorama_getImage(Panorama self, std::size_t nr) -> SrcPanoImage"},
	 { (char *)"Panorama_setImage", _wrap_Panorama_setImage, METH_VARARGS, (char *)"Panorama_setImage(Panorama self, std::size_t nr, SrcPanoImage img)"},
	 { (char *)"Panorama_addImage", _wrap_Panorama_addImage, METH_VARARGS, (char *)"Panorama_addImage(Panorama self, SrcPanoImage img) -> unsigned int"},
	 { (char *)"Panorama_mergePanorama", _wrap_Panorama_mergePanorama, METH_VARARGS, (char *)"Panorama_mergePanorama(Panorama self, Panorama newPano)"},
	 { (char *)"Panorama_removeImage", _wrap_Panorama_removeImage, METH_VARARGS, (char *)"Panorama_removeImage(Panorama self, unsigned int nr)"},
	 { (char *)"Panorama_swapImages", _wrap_Panorama_swapImages, METH_VARARGS, (char *)"Panorama_swapImages(Panorama self, unsigned int img1, unsigned int img2)"},
	 { (char *)"Panorama_getSrcImage", _wrap_Panorama_getSrcImage, METH_VARARGS, (char *)"Panorama_getSrcImage(Panorama self, unsigned int imgNr) -> SrcPanoImage"},
	 { (char *)"Panorama_setSrcImage", _wrap_Panorama_setSrcImage, METH_VARARGS, (char *)"Panorama_setSrcImage(Panorama self, unsigned int nr, SrcPanoImage img)"},
	 { (char *)"Panorama_setImageFilename", _wrap_Panorama_setImageFilename, METH_VARARGS, (char *)"Panorama_setImageFilename(Panorama self, unsigned int img, string fname)"},
	 { (char *)"Panorama_setImageOptions", _wrap_Panorama_setImageOptions, METH_VARARGS, (char *)"Panorama_setImageOptions(Panorama self, unsigned int i, ImageOptions opts)"},
	 { (char *)"Panorama_activateImage", _wrap_Panorama_activateImage, METH_VARARGS, (char *)"\n"
		"activateImage(unsigned int imgNr, bool active = True)\n"
		"Panorama_activateImage(Panorama self, unsigned int imgNr)\n"
		""},
	 { (char *)"Panorama_getActiveImages", _wrap_Panorama_getActiveImages, METH_VARARGS, (char *)"Panorama_getActiveImages(Panorama self) -> UIntSet"},
	 { (char *)"Panorama_getNrOfCtrlPoints", _wrap_Panorama_getNrOfCtrlPoints, METH_VARARGS, (char *)"Panorama_getNrOfCtrlPoints(Panorama self) -> std::size_t"},
	 { (char *)"Panorama_getCtrlPoint", _wrap_Panorama_getCtrlPoint, METH_VARARGS, (char *)"Panorama_getCtrlPoint(Panorama self, std::size_t nr) -> ControlPoint"},
	 { (char *)"Panorama_getCtrlPoints", _wrap_Panorama_getCtrlPoints, METH_VARARGS, (char *)"Panorama_getCtrlPoints(Panorama self) -> CPVector"},
	 { (char *)"Panorama_getCtrlPointsForImage", _wrap_Panorama_getCtrlPointsForImage, METH_VARARGS, (char *)"Panorama_getCtrlPointsForImage(Panorama self, unsigned int imgNr) -> std::vector<(unsigned int,std::allocator<(unsigned int)>)>"},
	 { (char *)"Panorama_getCtrlPointsVectorForImage", _wrap_Panorama_getCtrlPointsVectorForImage, METH_VARARGS, (char *)"Panorama_getCtrlPointsVectorForImage(Panorama self, unsigned int imgNr) -> CPointVector"},
	 { (char *)"Panorama_setCtrlPoints", _wrap_Panorama_setCtrlPoints, METH_VARARGS, (char *)"Panorama_setCtrlPoints(Panorama self, CPVector points)"},
	 { (char *)"Panorama_addCtrlPoint", _wrap_Panorama_addCtrlPoint, METH_VARARGS, (char *)"Panorama_addCtrlPoint(Panorama self, ControlPoint point) -> unsigned int"},
	 { (char *)"Panorama_removeCtrlPoint", _wrap_Panorama_removeCtrlPoint, METH_VARARGS, (char *)"Panorama_removeCtrlPoint(Panorama self, unsigned int pNr)"},
	 { (char *)"Panorama_removeDuplicateCtrlPoints", _wrap_Panorama_removeDuplicateCtrlPoints, METH_VARARGS, (char *)"Panorama_removeDuplicateCtrlPoints(Panorama self)"},
	 { (char *)"Panorama_changeControlPoint", _wrap_Panorama_changeControlPoint, METH_VARARGS, (char *)"Panorama_changeControlPoint(Panorama self, unsigned int pNr, ControlPoint point)"},
	 { (char *)"Panorama_getNextCPTypeLineNumber", _wrap_Panorama_getNextCPTypeLineNumber, METH_VARARGS, (char *)"Panorama_getNextCPTypeLineNumber(Panorama self) -> int"},
	 { (char *)"Panorama_updateLineCtrlPoints", _wrap_Panorama_updateLineCtrlPoints, METH_VARARGS, (char *)"Panorama_updateLineCtrlPoints(Panorama self)"},
	 { (char *)"Panorama_updateCtrlPointErrors", _wrap_Panorama_updateCtrlPointErrors, METH_VARARGS, (char *)"\n"
		"updateCtrlPointErrors(CPVector controlPoints)\n"
		"Panorama_updateCtrlPointErrors(Panorama self, UIntSet imgs, CPVector cps)\n"
		""},
	 { (char *)"Panorama_getVariables", _wrap_Panorama_getVariables, METH_VARARGS, (char *)"Panorama_getVariables(Panorama self) -> VariableMapVector"},
	 { (char *)"Panorama_getImageVariables", _wrap_Panorama_getImageVariables, METH_VARARGS, (char *)"Panorama_getImageVariables(Panorama self, unsigned int imgNr) -> VariableMap"},
	 { (char *)"Panorama_updateVariables", _wrap_Panorama_updateVariables, METH_VARARGS, (char *)"\n"
		"updateVariables(VariableMapVector vars)\n"
		"updateVariables(UIntSet imgs, VariableMapVector var)\n"
		"Panorama_updateVariables(Panorama self, unsigned int imgNr, VariableMap var)\n"
		""},
	 { (char *)"Panorama_updateVariable", _wrap_Panorama_updateVariable, METH_VARARGS, (char *)"Panorama_updateVariable(Panorama self, unsigned int imgNr, Variable var)"},
	 { (char *)"Panorama_UpdateFocalLength", _wrap_Panorama_UpdateFocalLength, METH_VARARGS, (char *)"Panorama_UpdateFocalLength(Panorama self, UIntSet imgs, double newFocalLength)"},
	 { (char *)"Panorama_UpdateCropFactor", _wrap_Panorama_UpdateCropFactor, METH_VARARGS, (char *)"Panorama_UpdateCropFactor(Panorama self, UIntSet imgs, double newCropFactor)"},
	 { (char *)"Panorama_getOptimizeVector", _wrap_Panorama_getOptimizeVector, METH_VARARGS, (char *)"Panorama_getOptimizeVector(Panorama self) -> OptimizeVector"},
	 { (char *)"Panorama_setOptimizeVector", _wrap_Panorama_setOptimizeVector, METH_VARARGS, (char *)"Panorama_setOptimizeVector(Panorama self, OptimizeVector optvec)"},
	 { (char *)"Panorama_getOptions", _wrap_Panorama_getOptions, METH_VARARGS, (char *)"Panorama_getOptions(Panorama self) -> PanoramaOptions"},
	 { (char *)"Panorama_setOptions", _wrap_Panorama_setOptions, METH_VARARGS, (char *)"Panorama_setOptions(Panorama self, PanoramaOptions opt)"},
	 { (char *)"Panorama_parseOptimizerScript", _wrap_Panorama_parseOptimizerScript, METH_VARARGS, (char *)"\n"
		"Panorama_parseOptimizerScript(Panorama self, std::istream i, UIntSet imgs, VariableMapVector imgVars, \n"
		"    CPVector ctrlPoints)\n"
		""},
	 { (char *)"Panorama_printPanoramaScript", _wrap_Panorama_printPanoramaScript, METH_VARARGS, (char *)"\n"
		"printPanoramaScript(std::ostream o, OptimizeVector optvars, PanoramaOptions options, \n"
		"    UIntSet imgs, bool forPTOptimizer, \n"
		"    string stripPrefix = \"\")\n"
		"Panorama_printPanoramaScript(Panorama self, std::ostream o, OptimizeVector optvars, \n"
		"    PanoramaOptions options, UIntSet imgs, bool forPTOptimizer)\n"
		""},
	 { (char *)"Panorama_printStitcherScript", _wrap_Panorama_printStitcherScript, METH_VARARGS, (char *)"\n"
		"Panorama_printStitcherScript(Panorama self, std::ostream o, PanoramaOptions target, \n"
		"    UIntSet imgs)\n"
		""},
	 { (char *)"Panorama_addObserver", _wrap_Panorama_addObserver, METH_VARARGS, (char *)"Panorama_addObserver(Panorama self, PanoramaObserver o)"},
	 { (char *)"Panorama_removeObserver", _wrap_Panorama_removeObserver, METH_VARARGS, (char *)"Panorama_removeObserver(Panorama self, PanoramaObserver observer) -> bool"},
	 { (char *)"Panorama_clearObservers", _wrap_Panorama_clearObservers, METH_VARARGS, (char *)"Panorama_clearObservers(Panorama self)"},
	 { (char *)"Panorama_changeFinished", _wrap_Panorama_changeFinished, METH_VARARGS, (char *)"\n"
		"changeFinished(bool keepDirty)\n"
		"Panorama_changeFinished(Panorama self)\n"
		""},
	 { (char *)"Panorama_imageChanged", _wrap_Panorama_imageChanged, METH_VARARGS, (char *)"Panorama_imageChanged(Panorama self, unsigned int imgNr)"},
	 { (char *)"Panorama_updateMasksForImage", _wrap_Panorama_updateMasksForImage, METH_VARARGS, (char *)"Panorama_updateMasksForImage(Panorama self, unsigned int imgNr, MaskPolygonVector newMasks)"},
	 { (char *)"Panorama_updateMasks", _wrap_Panorama_updateMasks, METH_VARARGS, (char *)"\n"
		"updateMasks(bool convertPosMaskToNeg = False)\n"
		"Panorama_updateMasks(Panorama self)\n"
		""},
	 { (char *)"Panorama_transferMask", _wrap_Panorama_transferMask, METH_VARARGS, (char *)"\n"
		"Panorama_transferMask(Panorama self, MaskPolygon mask, unsigned int imgNr, \n"
		"    UIntSet targetImgs)\n"
		""},
	 { (char *)"Panorama_getNewMemento", _wrap_Panorama_getNewMemento, METH_VARARGS, (char *)"Panorama_getNewMemento(Panorama self) -> PanoramaDataMemento"},
	 { (char *)"Panorama_setMementoToCopyOf", _wrap_Panorama_setMementoToCopyOf, METH_VARARGS, (char *)"Panorama_setMementoToCopyOf(Panorama self, PanoramaDataMemento memento) -> bool"},
	 { (char *)"Panorama_getMemento", _wrap_Panorama_getMemento, METH_VARARGS, (char *)"Panorama_getMemento(Panorama self) -> PanoramaMemento"},
	 { (char *)"Panorama_setMemento", _wrap_Panorama_setMemento, METH_VARARGS, (char *)"Panorama_setMemento(Panorama self, PanoramaMemento memento)"},
	 { (char *)"Panorama_needsOptimization", _wrap_Panorama_needsOptimization, METH_VARARGS, (char *)"Panorama_needsOptimization(Panorama self) -> bool"},
	 { (char *)"Panorama_markAsOptimized", _wrap_Panorama_markAsOptimized, METH_VARARGS, (char *)"\n"
		"markAsOptimized(bool optimized = True)\n"
		"Panorama_markAsOptimized(Panorama self)\n"
		""},
	 { (char *)"Panorama_readData", _wrap_Panorama_readData, METH_VARARGS, (char *)"\n"
		"readData(std::istream dataInput, string documentType = \"\") -> ReadWriteError\n"
		"Panorama_readData(Panorama self, std::istream dataInput) -> ReadWriteError\n"
		""},
	 { (char *)"Panorama_writeData", _wrap_Panorama_writeData, METH_VARARGS, (char *)"\n"
		"writeData(std::ostream dataOutput, string documentType = \"\") -> ReadWriteError\n"
		"Panorama_writeData(Panorama self, std::ostream dataOutput) -> ReadWriteError\n"
		""},
	 { (char *)"Panorama_isDirty", _wrap_Panorama_isDirty, METH_VARARGS, (char *)"Panorama_isDirty(Panorama self) -> bool"},
	 { (char *)"Panorama_clearDirty", _wrap_Panorama_clearDirty, METH_VARARGS, (char *)"Panorama_clearDirty(Panorama self)"},
	 { (char *)"Panorama_setFilePrefix", _wrap_Panorama_setFilePrefix, METH_VARARGS, (char *)"Panorama_setFilePrefix(Panorama self, string prefix)"},
	 { (char *)"Panorama_reset", _wrap_Panorama_reset, METH_VARARGS, (char *)"Panorama_reset(Panorama self)"},
	 { (char *)"Panorama_swigregister", Panorama_swigregister, METH_VARARGS, NULL},
	 { (char *)"calcCtrlPointErrors", _wrap_calcCtrlPointErrors, METH_VARARGS, (char *)"calcCtrlPointErrors(PanoramaData pano)"},
	 { (char *)"new_Transform", _wrap_new_Transform, METH_VARARGS, (char *)"new_Transform() -> Transform"},
	 { (char *)"delete_Transform", _wrap_delete_Transform, METH_VARARGS, (char *)"delete_Transform(Transform self)"},
	 { (char *)"Transform_createTransform", _wrap_Transform_createTransform, METH_VARARGS, (char *)"\n"
		"createTransform(Diff2D srcSize, VariableMap srcVars, LensProjectionFormat srcProj, \n"
		"    Diff2D destSize, ProjectionFormat destProj, \n"
		"    std::vector<(double,std::allocator<(double)>)> destProjParam, \n"
		"    double destHFOV, \n"
		"    Diff2D origSrcSize)\n"
		"createTransform(PanoramaData pano, unsigned int imgNr, PanoramaOptions dest, \n"
		"    Diff2D srcSize = vigra::Diff2D(0,0))\n"
		"createTransform(PanoramaData pano, unsigned int imgNr, PanoramaOptions dest)\n"
		"Transform_createTransform(Transform self, SrcPanoImage src, PanoramaOptions dest)\n"
		""},
	 { (char *)"Transform_createInvTransform", _wrap_Transform_createInvTransform, METH_VARARGS, (char *)"\n"
		"createInvTransform(Diff2D srcSize, VariableMap srcVars, LensProjectionFormat srcProj, \n"
		"    Diff2D destSize, ProjectionFormat destProj, \n"
		"    std::vector<(double,std::allocator<(double)>)> destProjParam, \n"
		"    double destHFOV, \n"
		"    Diff2D origSrcSize)\n"
		"createInvTransform(PanoramaData pano, unsigned int imgNr, PanoramaOptions dest, \n"
		"    Diff2D srcSize = vigra::Diff2D(0,0))\n"
		"createInvTransform(PanoramaData pano, unsigned int imgNr, PanoramaOptions dest)\n"
		"Transform_createInvTransform(Transform self, SrcPanoImage src, PanoramaOptions dest)\n"
		""},
	 { (char *)"Transform_transform", _wrap_Transform_transform, METH_VARARGS, (char *)"\n"
		"transform(double x_dest, double y_dest, double x_src, double y_src) -> bool\n"
		"Transform_transform(Transform self, FDiff2D dest, FDiff2D src) -> bool\n"
		""},
	 { (char *)"Transform_transformImgCoordPartial", _wrap_Transform_transformImgCoordPartial, METH_VARARGS, (char *)"\n"
		"Transform_transformImgCoordPartial(Transform self, double x_dest, double y_dest, double x_src, \n"
		"    double y_src) -> bool\n"
		""},
	 { (char *)"Transform_transformImgCoord", _wrap_Transform_transformImgCoord, METH_VARARGS, (char *)"\n"
		"transformImgCoord(double x_dest, double y_dest, double x_src, double y_src) -> bool\n"
		"Transform_transformImgCoord(Transform self, FDiff2D dest, FDiff2D src) -> bool\n"
		""},
	 { (char *)"Transform_emitGLSL", _wrap_Transform_emitGLSL, METH_VARARGS, (char *)"Transform_emitGLSL(Transform self, std::ostringstream oss) -> bool"},
	 { (char *)"Transform_swigregister", Transform_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AlignInfoWrap", _wrap_new_AlignInfoWrap, METH_VARARGS, (char *)"new_AlignInfoWrap() -> AlignInfoWrap"},
	 { (char *)"delete_AlignInfoWrap", _wrap_delete_AlignInfoWrap, METH_VARARGS, (char *)"delete_AlignInfoWrap(AlignInfoWrap self)"},
	 { (char *)"AlignInfoWrap_setInfo", _wrap_AlignInfoWrap_setInfo, METH_VARARGS, (char *)"AlignInfoWrap_setInfo(AlignInfoWrap self, PanoramaData pano) -> bool"},
	 { (char *)"AlignInfoWrap_setGlobal", _wrap_AlignInfoWrap_setGlobal, METH_VARARGS, (char *)"AlignInfoWrap_setGlobal(AlignInfoWrap self)"},
	 { (char *)"AlignInfoWrap_getVariables", _wrap_AlignInfoWrap_getVariables, METH_VARARGS, (char *)"AlignInfoWrap_getVariables(AlignInfoWrap self) -> VariableMapVector"},
	 { (char *)"AlignInfoWrap_getCtrlPoints", _wrap_AlignInfoWrap_getCtrlPoints, METH_VARARGS, (char *)"AlignInfoWrap_getCtrlPoints(AlignInfoWrap self) -> CPVector"},
	 { (char *)"AlignInfoWrap_swigregister", AlignInfoWrap_swigregister, METH_VARARGS, NULL},
	 { (char *)"setDestImage", _wrap_setDestImage, METH_VARARGS, (char *)"\n"
		"setDestImage(Image image, Diff2D size, unsigned char imageData, \n"
		"    ProjectionFormat format, std::vector<(double,std::allocator<(double)>)> projParams, \n"
		"    double destHFOV)\n"
		""},
	 { (char *)"setFullImage", _wrap_setFullImage, METH_VARARGS, (char *)"\n"
		"setFullImage(Image image, Diff2D size, unsigned char imageData, \n"
		"    VariableMap vars, LensProjectionFormat format, \n"
		"    bool correctDistortions)\n"
		""},
	 { (char *)"createAdjustPrefs", _wrap_createAdjustPrefs, METH_VARARGS, (char *)"createAdjustPrefs(aPrefs p, TrformStr transf)"},
	 { (char *)"setAdjustSrcImg", _wrap_setAdjustSrcImg, METH_VARARGS, (char *)"\n"
		"setAdjustSrcImg(TrformStr trf, aPrefs ap, int width, int height, unsigned char imageData, \n"
		"    VariableMap vars, LensProjectionFormat format, \n"
		"    bool correctDistortions)\n"
		""},
	 { (char *)"setAdjustDestImg", _wrap_setAdjustDestImg, METH_VARARGS, (char *)"\n"
		"setAdjustDestImg(TrformStr trf, aPrefs ap, int width, int height, unsigned char imageData, \n"
		"    PanoramaOptions opts)\n"
		""},
	 { (char *)"createAdjustTrform", _wrap_createAdjustTrform, METH_VARARGS, (char *)"createAdjustTrform(TrformStr trf)"},
	 { (char *)"freeTrform", _wrap_freeTrform, METH_VARARGS, (char *)"freeTrform(TrformStr trf)"},
	 { (char *)"freeImage", _wrap_freeImage, METH_VARARGS, (char *)"freeImage(Image img)"},
	 { (char *)"setOptVars", _wrap_setOptVars, METH_VARARGS, (char *)"setOptVars(optVars opt, std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)> optvars)"},
	 { (char *)"GetAlignInfoVariables", _wrap_GetAlignInfoVariables, METH_VARARGS, (char *)"GetAlignInfoVariables(AlignInfo gl) -> VariableMapVector"},
	 { (char *)"GetAlignInfoCtrlPoints", _wrap_GetAlignInfoCtrlPoints, METH_VARARGS, (char *)"GetAlignInfoCtrlPoints(AlignInfo gl) -> CPVector"},
	 { (char *)"optimize", _wrap_optimize, METH_VARARGS, (char *)"\n"
		"optimize(PanoramaData pano, char script = None) -> unsigned int\n"
		"optimize(PanoramaData pano) -> unsigned int\n"
		""},
	 { (char *)"delete_PanoramaAlgorithm", _wrap_delete_PanoramaAlgorithm, METH_VARARGS, (char *)"delete_PanoramaAlgorithm(PanoramaAlgorithm self)"},
	 { (char *)"PanoramaAlgorithm_modifiesPanoramaData", _wrap_PanoramaAlgorithm_modifiesPanoramaData, METH_VARARGS, (char *)"PanoramaAlgorithm_modifiesPanoramaData(PanoramaAlgorithm self) -> bool"},
	 { (char *)"PanoramaAlgorithm_hasRunSuccessfully", _wrap_PanoramaAlgorithm_hasRunSuccessfully, METH_VARARGS, (char *)"PanoramaAlgorithm_hasRunSuccessfully(PanoramaAlgorithm self) -> bool"},
	 { (char *)"PanoramaAlgorithm_run", _wrap_PanoramaAlgorithm_run, METH_VARARGS, (char *)"PanoramaAlgorithm_run(PanoramaAlgorithm self)"},
	 { (char *)"PanoramaAlgorithm_runAlgorithm", _wrap_PanoramaAlgorithm_runAlgorithm, METH_VARARGS, (char *)"PanoramaAlgorithm_runAlgorithm(PanoramaAlgorithm self) -> bool"},
	 { (char *)"PanoramaAlgorithm_swigregister", PanoramaAlgorithm_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_TimeConsumingPanoramaAlgorithm", _wrap_delete_TimeConsumingPanoramaAlgorithm, METH_VARARGS, (char *)"delete_TimeConsumingPanoramaAlgorithm(TimeConsumingPanoramaAlgorithm self)"},
	 { (char *)"TimeConsumingPanoramaAlgorithm_wasCancelled", _wrap_TimeConsumingPanoramaAlgorithm_wasCancelled, METH_VARARGS, (char *)"TimeConsumingPanoramaAlgorithm_wasCancelled(TimeConsumingPanoramaAlgorithm self) -> bool"},
	 { (char *)"TimeConsumingPanoramaAlgorithm_swigregister", TimeConsumingPanoramaAlgorithm_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_StitcherAlgorithm", _wrap_delete_StitcherAlgorithm, METH_VARARGS, (char *)"delete_StitcherAlgorithm(StitcherAlgorithm self)"},
	 { (char *)"StitcherAlgorithm_runAlgorithm", _wrap_StitcherAlgorithm_runAlgorithm, METH_VARARGS, (char *)"StitcherAlgorithm_runAlgorithm(StitcherAlgorithm self) -> bool"},
	 { (char *)"StitcherAlgorithm_modifiesPanoramaData", _wrap_StitcherAlgorithm_modifiesPanoramaData, METH_VARARGS, (char *)"StitcherAlgorithm_modifiesPanoramaData(StitcherAlgorithm self) -> bool"},
	 { (char *)"StitcherAlgorithm_swigregister", StitcherAlgorithm_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ImageStitcherAlgorithm", _wrap_delete_ImageStitcherAlgorithm, METH_VARARGS, (char *)"delete_ImageStitcherAlgorithm(ImageStitcherAlgorithm self)"},
	 { (char *)"ImageStitcherAlgorithm_swigregister", ImageStitcherAlgorithm_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_FileOutputStitcherAlgorithm", _wrap_delete_FileOutputStitcherAlgorithm, METH_VARARGS, (char *)"delete_FileOutputStitcherAlgorithm(FileOutputStitcherAlgorithm self)"},
	 { (char *)"FileOutputStitcherAlgorithm_swigregister", FileOutputStitcherAlgorithm_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AssistantMakefilelibExport", _wrap_new_AssistantMakefilelibExport, METH_VARARGS, (char *)"\n"
		"new_AssistantMakefilelibExport(PanoramaData pano_, AssistantPrograms progs_, bool runCeleste_, \n"
		"    double celesteThreshold_, bool celesteSmallRadius_, \n"
		"    bool runCPClean_, double scale_, \n"
		"    std::ostream makefile_, string projectFile_) -> AssistantMakefilelibExport\n"
		""},
	 { (char *)"AssistantMakefilelibExport_createMakefile", _wrap_AssistantMakefilelibExport_createMakefile, METH_VARARGS, (char *)"\n"
		"AssistantMakefilelibExport_createMakefile(PanoramaData pano_, AssistantPrograms progs_, bool runCeleste_, \n"
		"    double celesteThreshold_, bool celesteSmallRadius_, \n"
		"    bool runCPClean_, double scale_, \n"
		"    std::ostream makefile_, string projectFile_)\n"
		""},
	 { (char *)"AssistantMakefilelibExport_modifiesPanoramaData", _wrap_AssistantMakefilelibExport_modifiesPanoramaData, METH_VARARGS, (char *)"AssistantMakefilelibExport_modifiesPanoramaData(AssistantMakefilelibExport self) -> bool"},
	 { (char *)"AssistantMakefilelibExport_runAlgorithm", _wrap_AssistantMakefilelibExport_runAlgorithm, METH_VARARGS, (char *)"AssistantMakefilelibExport_runAlgorithm(AssistantMakefilelibExport self) -> bool"},
	 { (char *)"delete_AssistantMakefilelibExport", _wrap_delete_AssistantMakefilelibExport, METH_VARARGS, (char *)"delete_AssistantMakefilelibExport(AssistantMakefilelibExport self)"},
	 { (char *)"AssistantMakefilelibExport_swigregister", AssistantMakefilelibExport_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_CalculateCPStatistics", _wrap_delete_CalculateCPStatistics, METH_VARARGS, (char *)"delete_CalculateCPStatistics(CalculateCPStatistics self)"},
	 { (char *)"CalculateCPStatistics_modifiesPanoramaData", _wrap_CalculateCPStatistics_modifiesPanoramaData, METH_VARARGS, (char *)"CalculateCPStatistics_modifiesPanoramaData(CalculateCPStatistics self) -> bool"},
	 { (char *)"CalculateCPStatistics_runAlgorithm", _wrap_CalculateCPStatistics_runAlgorithm, METH_VARARGS, (char *)"CalculateCPStatistics_runAlgorithm(CalculateCPStatistics self) -> bool"},
	 { (char *)"CalculateCPStatistics_getResultMin", _wrap_CalculateCPStatistics_getResultMin, METH_VARARGS, (char *)"CalculateCPStatistics_getResultMin(CalculateCPStatistics self) -> double"},
	 { (char *)"CalculateCPStatistics_getResultMax", _wrap_CalculateCPStatistics_getResultMax, METH_VARARGS, (char *)"CalculateCPStatistics_getResultMax(CalculateCPStatistics self) -> double"},
	 { (char *)"CalculateCPStatistics_getResultMean", _wrap_CalculateCPStatistics_getResultMean, METH_VARARGS, (char *)"CalculateCPStatistics_getResultMean(CalculateCPStatistics self) -> double"},
	 { (char *)"CalculateCPStatistics_getResultVariance", _wrap_CalculateCPStatistics_getResultVariance, METH_VARARGS, (char *)"CalculateCPStatistics_getResultVariance(CalculateCPStatistics self) -> double"},
	 { (char *)"CalculateCPStatistics_swigregister", CalculateCPStatistics_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalculateCPStatisticsError", _wrap_new_CalculateCPStatisticsError, METH_VARARGS, (char *)"\n"
		"CalculateCPStatisticsError(PanoramaData panorama, int imgNr = -1)\n"
		"new_CalculateCPStatisticsError(PanoramaData panorama) -> CalculateCPStatisticsError\n"
		""},
	 { (char *)"delete_CalculateCPStatisticsError", _wrap_delete_CalculateCPStatisticsError, METH_VARARGS, (char *)"delete_CalculateCPStatisticsError(CalculateCPStatisticsError self)"},
	 { (char *)"CalculateCPStatisticsError_calcCtrlPntsErrorStats", _wrap_CalculateCPStatisticsError_calcCtrlPntsErrorStats, METH_VARARGS, (char *)"\n"
		"calcCtrlPntsErrorStats(PanoramaData pano, double min, double max, double mean, \n"
		"    double var, int imgNr = -1)\n"
		"CalculateCPStatisticsError_calcCtrlPntsErrorStats(PanoramaData pano, double min, double max, double mean, \n"
		"    double var)\n"
		""},
	 { (char *)"CalculateCPStatisticsError_runAlgorithm", _wrap_CalculateCPStatisticsError_runAlgorithm, METH_VARARGS, (char *)"CalculateCPStatisticsError_runAlgorithm(CalculateCPStatisticsError self) -> bool"},
	 { (char *)"CalculateCPStatisticsError_swigregister", CalculateCPStatisticsError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalculateCPStatisticsRadial", _wrap_new_CalculateCPStatisticsRadial, METH_VARARGS, (char *)"\n"
		"CalculateCPStatisticsRadial(PanoramaData panorama, int imgNr = -1)\n"
		"new_CalculateCPStatisticsRadial(PanoramaData panorama) -> CalculateCPStatisticsRadial\n"
		""},
	 { (char *)"delete_CalculateCPStatisticsRadial", _wrap_delete_CalculateCPStatisticsRadial, METH_VARARGS, (char *)"delete_CalculateCPStatisticsRadial(CalculateCPStatisticsRadial self)"},
	 { (char *)"CalculateCPStatisticsRadial_calcCtrlPntsRadiStats", _wrap_CalculateCPStatisticsRadial_calcCtrlPntsRadiStats, METH_VARARGS, (char *)"\n"
		"calcCtrlPntsRadiStats(PanoramaData pano, double min, double max, double mean, \n"
		"    double var, double q10, double q90, int imgNr = -1)\n"
		"CalculateCPStatisticsRadial_calcCtrlPntsRadiStats(PanoramaData pano, double min, double max, double mean, \n"
		"    double var, double q10, double q90)\n"
		""},
	 { (char *)"CalculateCPStatisticsRadial_getResultPercentile10", _wrap_CalculateCPStatisticsRadial_getResultPercentile10, METH_VARARGS, (char *)"CalculateCPStatisticsRadial_getResultPercentile10(CalculateCPStatisticsRadial self) -> double"},
	 { (char *)"CalculateCPStatisticsRadial_getResultPercentile90", _wrap_CalculateCPStatisticsRadial_getResultPercentile90, METH_VARARGS, (char *)"CalculateCPStatisticsRadial_getResultPercentile90(CalculateCPStatisticsRadial self) -> double"},
	 { (char *)"CalculateCPStatisticsRadial_runAlgorithm", _wrap_CalculateCPStatisticsRadial_runAlgorithm, METH_VARARGS, (char *)"CalculateCPStatisticsRadial_runAlgorithm(CalculateCPStatisticsRadial self) -> bool"},
	 { (char *)"CalculateCPStatisticsRadial_swigregister", CalculateCPStatisticsRadial_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalculateMeanExposure", _wrap_new_CalculateMeanExposure, METH_VARARGS, (char *)"new_CalculateMeanExposure(PanoramaData panorama) -> CalculateMeanExposure"},
	 { (char *)"delete_CalculateMeanExposure", _wrap_delete_CalculateMeanExposure, METH_VARARGS, (char *)"delete_CalculateMeanExposure(CalculateMeanExposure self)"},
	 { (char *)"CalculateMeanExposure_modifiesPanoramaData", _wrap_CalculateMeanExposure_modifiesPanoramaData, METH_VARARGS, (char *)"CalculateMeanExposure_modifiesPanoramaData(CalculateMeanExposure self) -> bool"},
	 { (char *)"CalculateMeanExposure_runAlgorithm", _wrap_CalculateMeanExposure_runAlgorithm, METH_VARARGS, (char *)"CalculateMeanExposure_runAlgorithm(CalculateMeanExposure self) -> bool"},
	 { (char *)"CalculateMeanExposure_calcMeanExposure", _wrap_CalculateMeanExposure_calcMeanExposure, METH_VARARGS, (char *)"CalculateMeanExposure_calcMeanExposure(PanoramaData pano) -> double"},
	 { (char *)"CalculateMeanExposure_getResultExposure", _wrap_CalculateMeanExposure_getResultExposure, METH_VARARGS, (char *)"CalculateMeanExposure_getResultExposure(CalculateMeanExposure self) -> double"},
	 { (char *)"CalculateMeanExposure_swigregister", CalculateMeanExposure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalculateOptimalROI", _wrap_new_CalculateOptimalROI, METH_VARARGS, (char *)"new_CalculateOptimalROI(PanoramaData panorama) -> CalculateOptimalROI"},
	 { (char *)"delete_CalculateOptimalROI", _wrap_delete_CalculateOptimalROI, METH_VARARGS, (char *)"delete_CalculateOptimalROI(CalculateOptimalROI self)"},
	 { (char *)"CalculateOptimalROI_modifiesPanoramaData", _wrap_CalculateOptimalROI_modifiesPanoramaData, METH_VARARGS, (char *)"CalculateOptimalROI_modifiesPanoramaData(CalculateOptimalROI self) -> bool"},
	 { (char *)"CalculateOptimalROI_runAlgorithm", _wrap_CalculateOptimalROI_runAlgorithm, METH_VARARGS, (char *)"CalculateOptimalROI_runAlgorithm(CalculateOptimalROI self) -> bool"},
	 { (char *)"CalculateOptimalROI_calcOptimalROI", _wrap_CalculateOptimalROI_calcOptimalROI, METH_VARARGS, (char *)"CalculateOptimalROI_calcOptimalROI(CalculateOptimalROI self, PanoramaData panorama) -> bool"},
	 { (char *)"CalculateOptimalROI_getResultOptimalROI", _wrap_CalculateOptimalROI_getResultOptimalROI, METH_VARARGS, (char *)"CalculateOptimalROI_getResultOptimalROI(CalculateOptimalROI self) -> vigra::Rect2D"},
	 { (char *)"CalculateOptimalROI_getResultOptimalSize", _wrap_CalculateOptimalROI_getResultOptimalSize, METH_VARARGS, (char *)"CalculateOptimalROI_getResultOptimalSize(CalculateOptimalROI self) -> Size2D"},
	 { (char *)"CalculateOptimalROI_swigregister", CalculateOptimalROI_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalculateOptimalScale", _wrap_new_CalculateOptimalScale, METH_VARARGS, (char *)"new_CalculateOptimalScale(PanoramaData panorama) -> CalculateOptimalScale"},
	 { (char *)"delete_CalculateOptimalScale", _wrap_delete_CalculateOptimalScale, METH_VARARGS, (char *)"delete_CalculateOptimalScale(CalculateOptimalScale self)"},
	 { (char *)"CalculateOptimalScale_modifiesPanoramaData", _wrap_CalculateOptimalScale_modifiesPanoramaData, METH_VARARGS, (char *)"CalculateOptimalScale_modifiesPanoramaData(CalculateOptimalScale self) -> bool"},
	 { (char *)"CalculateOptimalScale_runAlgorithm", _wrap_CalculateOptimalScale_runAlgorithm, METH_VARARGS, (char *)"CalculateOptimalScale_runAlgorithm(CalculateOptimalScale self) -> bool"},
	 { (char *)"CalculateOptimalScale_calcOptimalScale", _wrap_CalculateOptimalScale_calcOptimalScale, METH_VARARGS, (char *)"CalculateOptimalScale_calcOptimalScale(PanoramaData panorama) -> double"},
	 { (char *)"CalculateOptimalScale_calcOptimalPanoScale", _wrap_CalculateOptimalScale_calcOptimalPanoScale, METH_VARARGS, (char *)"CalculateOptimalScale_calcOptimalPanoScale(SrcPanoImage src, PanoramaOptions dest) -> double"},
	 { (char *)"CalculateOptimalScale_getResultOptimalScale", _wrap_CalculateOptimalScale_getResultOptimalScale, METH_VARARGS, (char *)"CalculateOptimalScale_getResultOptimalScale(CalculateOptimalScale self) -> double"},
	 { (char *)"CalculateOptimalScale_getResultOptimalWidth", _wrap_CalculateOptimalScale_getResultOptimalWidth, METH_VARARGS, (char *)"CalculateOptimalScale_getResultOptimalWidth(CalculateOptimalScale self) -> unsigned int"},
	 { (char *)"CalculateOptimalScale_swigregister", CalculateOptimalScale_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SetWidthOptimal", _wrap_new_SetWidthOptimal, METH_VARARGS, (char *)"new_SetWidthOptimal(PanoramaData panorama) -> SetWidthOptimal"},
	 { (char *)"delete_SetWidthOptimal", _wrap_delete_SetWidthOptimal, METH_VARARGS, (char *)"delete_SetWidthOptimal(SetWidthOptimal self)"},
	 { (char *)"SetWidthOptimal_modifiesPanoramaData", _wrap_SetWidthOptimal_modifiesPanoramaData, METH_VARARGS, (char *)"SetWidthOptimal_modifiesPanoramaData(SetWidthOptimal self) -> bool"},
	 { (char *)"SetWidthOptimal_runAlgorithm", _wrap_SetWidthOptimal_runAlgorithm, METH_VARARGS, (char *)"SetWidthOptimal_runAlgorithm(SetWidthOptimal self) -> bool"},
	 { (char *)"SetWidthOptimal_swigregister", SetWidthOptimal_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalculateImageOverlap", _wrap_new_CalculateImageOverlap, METH_VARARGS, (char *)"new_CalculateImageOverlap(PanoramaData pano) -> CalculateImageOverlap"},
	 { (char *)"delete_CalculateImageOverlap", _wrap_delete_CalculateImageOverlap, METH_VARARGS, (char *)"delete_CalculateImageOverlap(CalculateImageOverlap self)"},
	 { (char *)"CalculateImageOverlap_calculate", _wrap_CalculateImageOverlap_calculate, METH_VARARGS, (char *)"CalculateImageOverlap_calculate(CalculateImageOverlap self, unsigned int steps)"},
	 { (char *)"CalculateImageOverlap_getOverlap", _wrap_CalculateImageOverlap_getOverlap, METH_VARARGS, (char *)"CalculateImageOverlap_getOverlap(CalculateImageOverlap self, unsigned int i, unsigned int j) -> double"},
	 { (char *)"CalculateImageOverlap_limitToImages", _wrap_CalculateImageOverlap_limitToImages, METH_VARARGS, (char *)"CalculateImageOverlap_limitToImages(CalculateImageOverlap self, UIntSet img)"},
	 { (char *)"CalculateImageOverlap_getOverlapForImage", _wrap_CalculateImageOverlap_getOverlapForImage, METH_VARARGS, (char *)"CalculateImageOverlap_getOverlapForImage(CalculateImageOverlap self, unsigned int i) -> UIntSet"},
	 { (char *)"CalculateImageOverlap_swigregister", CalculateImageOverlap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RotatePanorama", _wrap_new_RotatePanorama, METH_VARARGS, (char *)"\n"
		"RotatePanorama(PanoramaData panorama, Matrix3 transformMat)\n"
		"new_RotatePanorama(PanoramaData panorama, double yaw, double pitch, double roll) -> RotatePanorama\n"
		""},
	 { (char *)"delete_RotatePanorama", _wrap_delete_RotatePanorama, METH_VARARGS, (char *)"delete_RotatePanorama(RotatePanorama self)"},
	 { (char *)"RotatePanorama_rotatePano", _wrap_RotatePanorama_rotatePano, METH_VARARGS, (char *)"RotatePanorama_rotatePano(PanoramaData panorama, Matrix3 transformMat)"},
	 { (char *)"RotatePanorama_modifiesPanoramaData", _wrap_RotatePanorama_modifiesPanoramaData, METH_VARARGS, (char *)"RotatePanorama_modifiesPanoramaData(RotatePanorama self) -> bool"},
	 { (char *)"RotatePanorama_runAlgorithm", _wrap_RotatePanorama_runAlgorithm, METH_VARARGS, (char *)"RotatePanorama_runAlgorithm(RotatePanorama self) -> bool"},
	 { (char *)"RotatePanorama_swigregister", RotatePanorama_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StraightenPanorama", _wrap_new_StraightenPanorama, METH_VARARGS, (char *)"new_StraightenPanorama(PanoramaData panorama) -> StraightenPanorama"},
	 { (char *)"delete_StraightenPanorama", _wrap_delete_StraightenPanorama, METH_VARARGS, (char *)"delete_StraightenPanorama(StraightenPanorama self)"},
	 { (char *)"StraightenPanorama_calcStraighteningRotation", _wrap_StraightenPanorama_calcStraighteningRotation, METH_VARARGS, (char *)"StraightenPanorama_calcStraighteningRotation(PanoramaData panorama) -> Matrix3"},
	 { (char *)"StraightenPanorama_runAlgorithm", _wrap_StraightenPanorama_runAlgorithm, METH_VARARGS, (char *)"StraightenPanorama_runAlgorithm(StraightenPanorama self) -> bool"},
	 { (char *)"StraightenPanorama_swigregister", StraightenPanorama_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TranslatePanorama", _wrap_new_TranslatePanorama, METH_VARARGS, (char *)"\n"
		"TranslatePanorama(PanoramaData panorama, double x, double y, double z)\n"
		"new_TranslatePanorama(PanoramaData panorama) -> TranslatePanorama\n"
		""},
	 { (char *)"delete_TranslatePanorama", _wrap_delete_TranslatePanorama, METH_VARARGS, (char *)"delete_TranslatePanorama(TranslatePanorama self)"},
	 { (char *)"TranslatePanorama_translatePano", _wrap_TranslatePanorama_translatePano, METH_VARARGS, (char *)"TranslatePanorama_translatePano(PanoramaData panorama, double x, double y, double z)"},
	 { (char *)"TranslatePanorama_modifiesPanoramaData", _wrap_TranslatePanorama_modifiesPanoramaData, METH_VARARGS, (char *)"TranslatePanorama_modifiesPanoramaData(TranslatePanorama self) -> bool"},
	 { (char *)"TranslatePanorama_runAlgorithm", _wrap_TranslatePanorama_runAlgorithm, METH_VARARGS, (char *)"TranslatePanorama_runAlgorithm(TranslatePanorama self) -> bool"},
	 { (char *)"TranslatePanorama_swigregister", TranslatePanorama_swigregister, METH_VARARGS, NULL},
	 { (char *)"getCPoutsideLimit_pair", _wrap_getCPoutsideLimit_pair, METH_VARARGS, (char *)"\n"
		"getCPoutsideLimit_pair(Panorama pano, double n = 2.0) -> UIntSet\n"
		"getCPoutsideLimit_pair(Panorama pano) -> UIntSet\n"
		""},
	 { (char *)"getCPoutsideLimit", _wrap_getCPoutsideLimit, METH_VARARGS, (char *)"\n"
		"getCPoutsideLimit(Panorama pano, double n = 2.0) -> UIntSet\n"
		"getCPoutsideLimit(Panorama pano) -> UIntSet\n"
		""},
	 { (char *)"getCPinMasks", _wrap_getCPinMasks, METH_VARARGS, (char *)"getCPinMasks(Panorama pano) -> UIntSet"},
	 { (char *)"new_CalculateFOV", _wrap_new_CalculateFOV, METH_VARARGS, (char *)"new_CalculateFOV(PanoramaData panorama) -> CalculateFOV"},
	 { (char *)"delete_CalculateFOV", _wrap_delete_CalculateFOV, METH_VARARGS, (char *)"delete_CalculateFOV(CalculateFOV self)"},
	 { (char *)"CalculateFOV_modifiesPanoramaData", _wrap_CalculateFOV_modifiesPanoramaData, METH_VARARGS, (char *)"CalculateFOV_modifiesPanoramaData(CalculateFOV self) -> bool"},
	 { (char *)"CalculateFOV_runAlgorithm", _wrap_CalculateFOV_runAlgorithm, METH_VARARGS, (char *)"CalculateFOV_runAlgorithm(CalculateFOV self) -> bool"},
	 { (char *)"CalculateFOV_calcFOV", _wrap_CalculateFOV_calcFOV, METH_VARARGS, (char *)"CalculateFOV_calcFOV(PanoramaData panorama) -> FDiff2D"},
	 { (char *)"CalculateFOV_getResultHorizontalFOV", _wrap_CalculateFOV_getResultHorizontalFOV, METH_VARARGS, (char *)"CalculateFOV_getResultHorizontalFOV(CalculateFOV self) -> double"},
	 { (char *)"CalculateFOV_getResultVerticalFOV", _wrap_CalculateFOV_getResultVerticalFOV, METH_VARARGS, (char *)"CalculateFOV_getResultVerticalFOV(CalculateFOV self) -> double"},
	 { (char *)"CalculateFOV_getResultFOV", _wrap_CalculateFOV_getResultFOV, METH_VARARGS, (char *)"CalculateFOV_getResultFOV(CalculateFOV self) -> FDiff2D"},
	 { (char *)"CalculateFOV_swigregister", CalculateFOV_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CenterHorizontally", _wrap_new_CenterHorizontally, METH_VARARGS, (char *)"new_CenterHorizontally(PanoramaData panorama) -> CenterHorizontally"},
	 { (char *)"delete_CenterHorizontally", _wrap_delete_CenterHorizontally, METH_VARARGS, (char *)"delete_CenterHorizontally(CenterHorizontally self)"},
	 { (char *)"CenterHorizontally_modifiesPanoramaData", _wrap_CenterHorizontally_modifiesPanoramaData, METH_VARARGS, (char *)"CenterHorizontally_modifiesPanoramaData(CenterHorizontally self) -> bool"},
	 { (char *)"CenterHorizontally_runAlgorithm", _wrap_CenterHorizontally_runAlgorithm, METH_VARARGS, (char *)"CenterHorizontally_runAlgorithm(CenterHorizontally self) -> bool"},
	 { (char *)"CenterHorizontally_centerHorizontically", _wrap_CenterHorizontally_centerHorizontically, METH_VARARGS, (char *)"CenterHorizontally_centerHorizontically(PanoramaData panorama)"},
	 { (char *)"CenterHorizontally_swigregister", CenterHorizontally_swigregister, METH_VARARGS, NULL},
	 { (char *)"estimateOutputROI", _wrap_estimateOutputROI, METH_VARARGS, (char *)"estimateOutputROI(PanoramaData pano, PanoramaOptions opts, unsigned int i) -> vigra::Rect2D"},
	 { (char *)"new_ComputeImageROI", _wrap_new_ComputeImageROI, METH_VARARGS, (char *)"new_ComputeImageROI(PanoramaData panorama, UIntSet images) -> ComputeImageROI"},
	 { (char *)"delete_ComputeImageROI", _wrap_delete_ComputeImageROI, METH_VARARGS, (char *)"delete_ComputeImageROI(ComputeImageROI self)"},
	 { (char *)"ComputeImageROI_modifiesPanoramaData", _wrap_ComputeImageROI_modifiesPanoramaData, METH_VARARGS, (char *)"ComputeImageROI_modifiesPanoramaData(ComputeImageROI self) -> bool"},
	 { (char *)"ComputeImageROI_runAlgorithm", _wrap_ComputeImageROI_runAlgorithm, METH_VARARGS, (char *)"ComputeImageROI_runAlgorithm(ComputeImageROI self) -> bool"},
	 { (char *)"ComputeImageROI_getROIS", _wrap_ComputeImageROI_getROIS, METH_VARARGS, (char *)"ComputeImageROI_getROIS(ComputeImageROI self) -> std::vector<(vigra::Rect2D,std::allocator<(vigra::Rect2D)>)>"},
	 { (char *)"ComputeImageROI_computeROIS", _wrap_ComputeImageROI_computeROIS, METH_VARARGS, (char *)"ComputeImageROI_computeROIS(PanoramaData panorama, PanoramaOptions opts, UIntSet images) -> std::vector<(vigra::Rect2D,std::allocator<(vigra::Rect2D)>)>"},
	 { (char *)"ComputeImageROI_swigregister", ComputeImageROI_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CalculateFitPanorama", _wrap_new_CalculateFitPanorama, METH_VARARGS, (char *)"new_CalculateFitPanorama(PanoramaData panorama) -> CalculateFitPanorama"},
	 { (char *)"delete_CalculateFitPanorama", _wrap_delete_CalculateFitPanorama, METH_VARARGS, (char *)"delete_CalculateFitPanorama(CalculateFitPanorama self)"},
	 { (char *)"CalculateFitPanorama_modifiesPanoramaData", _wrap_CalculateFitPanorama_modifiesPanoramaData, METH_VARARGS, (char *)"CalculateFitPanorama_modifiesPanoramaData(CalculateFitPanorama self) -> bool"},
	 { (char *)"CalculateFitPanorama_runAlgorithm", _wrap_CalculateFitPanorama_runAlgorithm, METH_VARARGS, (char *)"CalculateFitPanorama_runAlgorithm(CalculateFitPanorama self) -> bool"},
	 { (char *)"CalculateFitPanorama_fitPano", _wrap_CalculateFitPanorama_fitPano, METH_VARARGS, (char *)"CalculateFitPanorama_fitPano(PanoramaData panorama, double HFOV, double height)"},
	 { (char *)"CalculateFitPanorama_getResultHorizontalFOV", _wrap_CalculateFitPanorama_getResultHorizontalFOV, METH_VARARGS, (char *)"CalculateFitPanorama_getResultHorizontalFOV(CalculateFitPanorama self) -> double"},
	 { (char *)"CalculateFitPanorama_getResultHeight", _wrap_CalculateFitPanorama_getResultHeight, METH_VARARGS, (char *)"CalculateFitPanorama_getResultHeight(CalculateFitPanorama self) -> double"},
	 { (char *)"CalculateFitPanorama_swigregister", CalculateFitPanorama_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FitPanorama", _wrap_new_FitPanorama, METH_VARARGS, (char *)"new_FitPanorama(PanoramaData panorama) -> FitPanorama"},
	 { (char *)"delete_FitPanorama", _wrap_delete_FitPanorama, METH_VARARGS, (char *)"delete_FitPanorama(FitPanorama self)"},
	 { (char *)"FitPanorama_modifiesPanoramaData", _wrap_FitPanorama_modifiesPanoramaData, METH_VARARGS, (char *)"FitPanorama_modifiesPanoramaData(FitPanorama self) -> bool"},
	 { (char *)"FitPanorama_runAlgorithm", _wrap_FitPanorama_runAlgorithm, METH_VARARGS, (char *)"FitPanorama_runAlgorithm(FitPanorama self) -> bool"},
	 { (char *)"FitPanorama_swigregister", FitPanorama_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NonaFileOutputStitcher", _wrap_new_NonaFileOutputStitcher, METH_VARARGS, (char *)"\n"
		"new_NonaFileOutputStitcher(PanoramaData panoramaData, AppBase::ProgressDisplay progressDisplay, \n"
		"    PanoramaOptions options, UIntSet usedImages, \n"
		"    String filename) -> NonaFileOutputStitcher\n"
		""},
	 { (char *)"delete_NonaFileOutputStitcher", _wrap_delete_NonaFileOutputStitcher, METH_VARARGS, (char *)"delete_NonaFileOutputStitcher(NonaFileOutputStitcher self)"},
	 { (char *)"NonaFileOutputStitcher_swigregister", NonaFileOutputStitcher_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PhotometricOptimizer", _wrap_new_PhotometricOptimizer, METH_VARARGS, (char *)"\n"
		"new_PhotometricOptimizer(PanoramaData panorama, AppBase::ProgressDisplay progressDisplay, \n"
		"    OptimizeVector vars, PointPairs correspondences) -> PhotometricOptimizer\n"
		""},
	 { (char *)"delete_PhotometricOptimizer", _wrap_delete_PhotometricOptimizer, METH_VARARGS, (char *)"delete_PhotometricOptimizer(PhotometricOptimizer self)"},
	 { (char *)"PhotometricOptimizer_optimizePhotometric", _wrap_PhotometricOptimizer_optimizePhotometric, METH_VARARGS, (char *)"\n"
		"PhotometricOptimizer_optimizePhotometric(PanoramaData pano, OptimizeVector vars, PointPairs correspondences, \n"
		"    AppBase::ProgressReporter progress, \n"
		"    double error)\n"
		""},
	 { (char *)"PhotometricOptimizer_modifiesPanoramaData", _wrap_PhotometricOptimizer_modifiesPanoramaData, METH_VARARGS, (char *)"PhotometricOptimizer_modifiesPanoramaData(PhotometricOptimizer self) -> bool"},
	 { (char *)"PhotometricOptimizer_runAlgorithm", _wrap_PhotometricOptimizer_runAlgorithm, METH_VARARGS, (char *)"PhotometricOptimizer_runAlgorithm(PhotometricOptimizer self) -> bool"},
	 { (char *)"PhotometricOptimizer_getResultError", _wrap_PhotometricOptimizer_getResultError, METH_VARARGS, (char *)"PhotometricOptimizer_getResultError(PhotometricOptimizer self) -> double"},
	 { (char *)"PhotometricOptimizer_swigregister", PhotometricOptimizer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SmartPhotometricOptimizer", _wrap_new_SmartPhotometricOptimizer, METH_VARARGS, (char *)"\n"
		"new_SmartPhotometricOptimizer(PanoramaData panorama, AppBase::ProgressDisplay progressDisplay, \n"
		"    OptimizeVector vars, PointPairs correspondences, \n"
		"    PhotometricOptimizeMode optMode) -> SmartPhotometricOptimizer\n"
		""},
	 { (char *)"delete_SmartPhotometricOptimizer", _wrap_delete_SmartPhotometricOptimizer, METH_VARARGS, (char *)"delete_SmartPhotometricOptimizer(SmartPhotometricOptimizer self)"},
	 { (char *)"SmartPhotometricOptimizer_smartOptimizePhotometric", _wrap_SmartPhotometricOptimizer_smartOptimizePhotometric, METH_VARARGS, (char *)"\n"
		"SmartPhotometricOptimizer_smartOptimizePhotometric(PanoramaData pano, PhotometricOptimizeMode mode, std::vector<(vigra_ext::PointPairRGB,std::allocator<(vigra_ext::PointPairRGB)>)> correspondences, \n"
		"    AppBase::ProgressReporter progress, \n"
		"    double error)\n"
		""},
	 { (char *)"SmartPhotometricOptimizer_runAlgorithm", _wrap_SmartPhotometricOptimizer_runAlgorithm, METH_VARARGS, (char *)"SmartPhotometricOptimizer_runAlgorithm(SmartPhotometricOptimizer self) -> bool"},
	 { (char *)"SmartPhotometricOptimizer_swigregister", SmartPhotometricOptimizer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PTOptimizer", _wrap_new_PTOptimizer, METH_VARARGS, (char *)"new_PTOptimizer(PanoramaData panorama) -> PTOptimizer"},
	 { (char *)"delete_PTOptimizer", _wrap_delete_PTOptimizer, METH_VARARGS, (char *)"delete_PTOptimizer(PTOptimizer self)"},
	 { (char *)"PTOptimizer_modifiesPanoramaData", _wrap_PTOptimizer_modifiesPanoramaData, METH_VARARGS, (char *)"PTOptimizer_modifiesPanoramaData(PTOptimizer self) -> bool"},
	 { (char *)"PTOptimizer_runAlgorithm", _wrap_PTOptimizer_runAlgorithm, METH_VARARGS, (char *)"PTOptimizer_runAlgorithm(PTOptimizer self) -> bool"},
	 { (char *)"PTOptimizer_swigregister", PTOptimizer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AutoOptimise", _wrap_new_AutoOptimise, METH_VARARGS, (char *)"new_AutoOptimise(PanoramaData panorama) -> AutoOptimise"},
	 { (char *)"delete_AutoOptimise", _wrap_delete_AutoOptimise, METH_VARARGS, (char *)"delete_AutoOptimise(AutoOptimise self)"},
	 { (char *)"AutoOptimise_autoOptimise", _wrap_AutoOptimise_autoOptimise, METH_VARARGS, (char *)"AutoOptimise_autoOptimise(PanoramaData pano)"},
	 { (char *)"AutoOptimise_runAlgorithm", _wrap_AutoOptimise_runAlgorithm, METH_VARARGS, (char *)"AutoOptimise_runAlgorithm(AutoOptimise self) -> bool"},
	 { (char *)"AutoOptimise_swigregister", AutoOptimise_swigregister, METH_VARARGS, NULL},
	 { (char *)"SmartOptimizerStub_createOptVars", _wrap_SmartOptimizerStub_createOptVars, METH_VARARGS, (char *)"\n"
		"createOptVars(PanoramaData optPano, int mode, unsigned int anchorImg = 0) -> OptimizeVector\n"
		"SmartOptimizerStub_createOptVars(PanoramaData optPano, int mode) -> OptimizeVector\n"
		""},
	 { (char *)"new_SmartOptimizerStub", _wrap_new_SmartOptimizerStub, METH_VARARGS, (char *)"new_SmartOptimizerStub() -> SmartOptimizerStub"},
	 { (char *)"delete_SmartOptimizerStub", _wrap_delete_SmartOptimizerStub, METH_VARARGS, (char *)"delete_SmartOptimizerStub(SmartOptimizerStub self)"},
	 { (char *)"SmartOptimizerStub_swigregister", SmartOptimizerStub_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SmartOptimise", _wrap_new_SmartOptimise, METH_VARARGS, (char *)"new_SmartOptimise(PanoramaData panorama) -> SmartOptimise"},
	 { (char *)"delete_SmartOptimise", _wrap_delete_SmartOptimise, METH_VARARGS, (char *)"delete_SmartOptimise(SmartOptimise self)"},
	 { (char *)"SmartOptimise_smartOptimize", _wrap_SmartOptimise_smartOptimize, METH_VARARGS, (char *)"SmartOptimise_smartOptimize(PanoramaData pano)"},
	 { (char *)"SmartOptimise_runAlgorithm", _wrap_SmartOptimise_runAlgorithm, METH_VARARGS, (char *)"SmartOptimise_runAlgorithm(SmartOptimise self) -> bool"},
	 { (char *)"SmartOptimise_swigregister", SmartOptimise_swigregister, METH_VARARGS, NULL},
	 { (char *)"getHDRStacks", _wrap_getHDRStacks, METH_VARARGS, (char *)"getHDRStacks(PanoramaData pano, UIntSet allImgs) -> std::vector<(HuginBase::UIntSet,std::allocator<(HuginBase::UIntSet)>)>"},
	 { (char *)"getExposureLayers", _wrap_getExposureLayers, METH_VARARGS, (char *)"getExposureLayers(PanoramaData pano, UIntSet allImgs) -> std::vector<(HuginBase::UIntSet,std::allocator<(HuginBase::UIntSet)>)>"},
	 { (char *)"getImagesinROI", _wrap_getImagesinROI, METH_VARARGS, (char *)"getImagesinROI(PanoramaData pano, UIntSet activeImages) -> UIntSet"},
	 { (char *)"new_PanoramaMakefilelibExport", _wrap_new_PanoramaMakefilelibExport, METH_VARARGS, (char *)"\n"
		"new_PanoramaMakefilelibExport(PanoramaData pano_, UIntSet images_, string ptofile_, \n"
		"    string outputPrefix_, PTPrograms progs_, string includePath_, \n"
		"    std::vector<(std::string,std::allocator<(std::string)>)> outputFiles_, \n"
		"    std::ostream makefile_, \n"
		"    string tmpDir_) -> PanoramaMakefilelibExport\n"
		""},
	 { (char *)"PanoramaMakefilelibExport_createMakefile", _wrap_PanoramaMakefilelibExport_createMakefile, METH_VARARGS, (char *)"\n"
		"PanoramaMakefilelibExport_createMakefile(PanoramaData pano_, UIntSet images_, string ptofile_, \n"
		"    string outputPrefix_, PTPrograms progs_, string includePath_, \n"
		"    std::vector<(std::string,std::allocator<(std::string)>)> outputFiles_, \n"
		"    std::ostream makefile_, \n"
		"    string tmpDir_)\n"
		""},
	 { (char *)"PanoramaMakefilelibExport_modifiesPanoramaData", _wrap_PanoramaMakefilelibExport_modifiesPanoramaData, METH_VARARGS, (char *)"PanoramaMakefilelibExport_modifiesPanoramaData(PanoramaMakefilelibExport self) -> bool"},
	 { (char *)"PanoramaMakefilelibExport_runAlgorithm", _wrap_PanoramaMakefilelibExport_runAlgorithm, METH_VARARGS, (char *)"PanoramaMakefilelibExport_runAlgorithm(PanoramaMakefilelibExport self) -> bool"},
	 { (char *)"delete_PanoramaMakefilelibExport", _wrap_delete_PanoramaMakefilelibExport, METH_VARARGS, (char *)"delete_PanoramaMakefilelibExport(PanoramaMakefilelibExport self)"},
	 { (char *)"PanoramaMakefilelibExport_swigregister", PanoramaMakefilelibExport_swigregister, METH_VARARGS, NULL},
	 { (char *)"printstacks", _wrap_printstacks, METH_VARARGS, (char *)"printstacks(std::vector<(HuginBase::UIntSet,std::allocator<(HuginBase::UIntSet)>)> stackdata)"},
	 { (char *)"delete_PointSampler", _wrap_delete_PointSampler, METH_VARARGS, (char *)"delete_PointSampler(PointSampler self)"},
	 { (char *)"PointSampler_extractPoints", _wrap_PointSampler_extractPoints, METH_VARARGS, (char *)"\n"
		"PointSampler_extractPoints(PanoramaData pano, std::vector<(p.vigra::FRGBImage,std::allocator<(p.vigra::FRGBImage)>)> images, \n"
		"    int nPoints, \n"
		"    bool randomPoints, AppBase::ProgressReporter progress, \n"
		"    std::vector<(vigra_ext::PointPairRGB,std::allocator<(vigra_ext::PointPairRGB)>)> points)\n"
		""},
	 { (char *)"PointSampler_modifiesPanoramaData", _wrap_PointSampler_modifiesPanoramaData, METH_VARARGS, (char *)"PointSampler_modifiesPanoramaData(PointSampler self) -> bool"},
	 { (char *)"PointSampler_runAlgorithm", _wrap_PointSampler_runAlgorithm, METH_VARARGS, (char *)"PointSampler_runAlgorithm(PointSampler self) -> bool"},
	 { (char *)"PointSampler_execute", _wrap_PointSampler_execute, METH_VARARGS, (char *)"PointSampler_execute(PointSampler self) -> PointSampler"},
	 { (char *)"PointSampler_getResultPoints", _wrap_PointSampler_getResultPoints, METH_VARARGS, (char *)"PointSampler_getResultPoints(PointSampler self) -> PointPairs"},
	 { (char *)"PointSampler_swigregister", PointSampler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AllPointSampler", _wrap_new_AllPointSampler, METH_VARARGS, (char *)"\n"
		"new_AllPointSampler(PanoramaData panorama, AppBase::ProgressDisplay progressDisplay, \n"
		"    std::vector<(p.vigra::FRGBImage,std::allocator<(p.vigra::FRGBImage)>)> images, \n"
		"    int nPoints) -> AllPointSampler\n"
		""},
	 { (char *)"delete_AllPointSampler", _wrap_delete_AllPointSampler, METH_VARARGS, (char *)"delete_AllPointSampler(AllPointSampler self)"},
	 { (char *)"AllPointSampler_swigregister", AllPointSampler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RandomPointSampler", _wrap_new_RandomPointSampler, METH_VARARGS, (char *)"\n"
		"new_RandomPointSampler(PanoramaData panorama, AppBase::ProgressDisplay progressDisplay, \n"
		"    std::vector<(p.vigra::FRGBImage,std::allocator<(p.vigra::FRGBImage)>)> images, \n"
		"    int nPoints) -> RandomPointSampler\n"
		""},
	 { (char *)"delete_RandomPointSampler", _wrap_delete_RandomPointSampler, METH_VARARGS, (char *)"delete_RandomPointSampler(RandomPointSampler self)"},
	 { (char *)"RandomPointSampler_swigregister", RandomPointSampler_swigregister, METH_VARARGS, NULL},
	 { (char *)"pano_open", _wrap_pano_open, METH_VARARGS, (char *)"pano_open(char infile) -> Panorama"},
	 { (char *)"pano_close", _wrap_pano_close, METH_VARARGS, (char *)"pano_close(Panorama pano)"},
	 { (char *)"make_std_ifstream", _wrap_make_std_ifstream, METH_VARARGS, (char *)"make_std_ifstream(char charp) -> std::istream"},
	 { (char *)"make_std_ofstream", _wrap_make_std_ofstream, METH_VARARGS, (char *)"make_std_ofstream(char charp) -> std::ostream"},
	 { (char *)"hello_python", _wrap_hello_python, METH_VARARGS, (char *)"hello_python(Panorama pano)"},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_HuginBase__AutoOptimiseTo_p_HuginBase__PTOptimizer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PTOptimizer *)  ((HuginBase::AutoOptimise *) x));
}
static void *_p_HuginBase__SmartOptimiseTo_p_HuginBase__PTOptimizer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PTOptimizer *)  ((HuginBase::SmartOptimise *) x));
}
static void *_p_HuginBase__SmartPhotometricOptimizerTo_p_HuginBase__PhotometricOptimizer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PhotometricOptimizer *)  ((HuginBase::SmartPhotometricOptimizer *) x));
}
static void *_p_HuginBase__CalculateCPStatisticsErrorTo_p_HuginBase__CalculateCPStatistics(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::CalculateCPStatistics *)  ((HuginBase::CalculateCPStatisticsError *) x));
}
static void *_p_HuginBase__CalculateCPStatisticsRadialTo_p_HuginBase__CalculateCPStatistics(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::CalculateCPStatistics *)  ((HuginBase::CalculateCPStatisticsRadial *) x));
}
static void *_p_HuginBase__CalculateOptimalScaleTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::CalculateOptimalScale *) x));
}
static void *_p_HuginBase__CalculateCPStatisticsErrorTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::CalculateCPStatistics *) ((HuginBase::CalculateCPStatisticsError *) x));
}
static void *_p_HuginBase__CenterHorizontallyTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::CenterHorizontally *) x));
}
static void *_p_HuginBase__CalculateMeanExposureTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::CalculateMeanExposure *) x));
}
static void *_p_HuginBase__FileOutputStitcherAlgorithmTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::TimeConsumingPanoramaAlgorithm *)(HuginBase::StitcherAlgorithm *) ((HuginBase::FileOutputStitcherAlgorithm *) x));
}
static void *_p_HuginBase__ImageStitcherAlgorithmTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::TimeConsumingPanoramaAlgorithm *)(HuginBase::StitcherAlgorithm *) ((HuginBase::ImageStitcherAlgorithm *) x));
}
static void *_p_HuginBase__StitcherAlgorithmTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::TimeConsumingPanoramaAlgorithm *) ((HuginBase::StitcherAlgorithm *) x));
}
static void *_p_HuginBase__TimeConsumingPanoramaAlgorithmTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::TimeConsumingPanoramaAlgorithm *) x));
}
static void *_p_HuginBase__StraightenPanoramaTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::RotatePanorama *) ((HuginBase::StraightenPanorama *) x));
}
static void *_p_HuginBase__RotatePanoramaTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::RotatePanorama *) x));
}
static void *_p_HuginBase__TranslatePanoramaTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::TranslatePanorama *) x));
}
static void *_p_HuginBase__CalculateFitPanoramaTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::CalculateFitPanorama *) x));
}
static void *_p_HuginBase__FitPanoramaTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::CalculateFitPanorama *) ((HuginBase::FitPanorama *) x));
}
static void *_p_HuginBase__SetWidthOptimalTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::CalculateOptimalScale *) ((HuginBase::SetWidthOptimal *) x));
}
static void *_p_HuginBase__PointSamplerTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::TimeConsumingPanoramaAlgorithm *) ((HuginBase::PointSampler *) x));
}
static void *_p_HuginBase__AllPointSamplerTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::TimeConsumingPanoramaAlgorithm *)(HuginBase::PointSampler *) ((HuginBase::AllPointSampler *) x));
}
static void *_p_HuginBase__RandomPointSamplerTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::TimeConsumingPanoramaAlgorithm *)(HuginBase::PointSampler *) ((HuginBase::RandomPointSampler *) x));
}
static void *_p_HuginBase__CalculateOptimalROITo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::CalculateOptimalROI *) x));
}
static void *_p_HuginBase__CalculateCPStatisticsTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::CalculateCPStatistics *) x));
}
static void *_p_HuginBase__AssistantMakefilelibExportTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::AssistantMakefilelibExport *) x));
}
static void *_p_HuginBase__PanoramaMakefilelibExportTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::PanoramaMakefilelibExport *) x));
}
static void *_p_HuginBase__PhotometricOptimizerTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::TimeConsumingPanoramaAlgorithm *) ((HuginBase::PhotometricOptimizer *) x));
}
static void *_p_HuginBase__SmartPhotometricOptimizerTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::TimeConsumingPanoramaAlgorithm *)(HuginBase::PhotometricOptimizer *) ((HuginBase::SmartPhotometricOptimizer *) x));
}
static void *_p_HuginBase__PTOptimizerTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::PTOptimizer *) x));
}
static void *_p_HuginBase__NonaFileOutputStitcherTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::TimeConsumingPanoramaAlgorithm *)(HuginBase::StitcherAlgorithm *)(HuginBase::FileOutputStitcherAlgorithm *) ((HuginBase::NonaFileOutputStitcher *) x));
}
static void *_p_HuginBase__CalculateCPStatisticsRadialTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::CalculateCPStatistics *) ((HuginBase::CalculateCPStatisticsRadial *) x));
}
static void *_p_HuginBase__CalculateFOVTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::CalculateFOV *) x));
}
static void *_p_HuginBase__AutoOptimiseTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::PTOptimizer *) ((HuginBase::AutoOptimise *) x));
}
static void *_p_HuginBase__SmartOptimiseTo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *) (HuginBase::PTOptimizer *) ((HuginBase::SmartOptimise *) x));
}
static void *_p_HuginBase__ComputeImageROITo_p_HuginBase__PanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaAlgorithm *)  ((HuginBase::ComputeImageROI *) x));
}
static void *_p_HuginBase__PointSamplerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::TimeConsumingPanoramaAlgorithm *)  ((HuginBase::PointSampler *) x));
}
static void *_p_HuginBase__AllPointSamplerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::TimeConsumingPanoramaAlgorithm *) (HuginBase::PointSampler *) ((HuginBase::AllPointSampler *) x));
}
static void *_p_HuginBase__RandomPointSamplerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::TimeConsumingPanoramaAlgorithm *) (HuginBase::PointSampler *) ((HuginBase::RandomPointSampler *) x));
}
static void *_p_HuginBase__StitcherAlgorithmTo_p_HuginBase__TimeConsumingPanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::TimeConsumingPanoramaAlgorithm *)  ((HuginBase::StitcherAlgorithm *) x));
}
static void *_p_HuginBase__ImageStitcherAlgorithmTo_p_HuginBase__TimeConsumingPanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::TimeConsumingPanoramaAlgorithm *) (HuginBase::StitcherAlgorithm *) ((HuginBase::ImageStitcherAlgorithm *) x));
}
static void *_p_HuginBase__FileOutputStitcherAlgorithmTo_p_HuginBase__TimeConsumingPanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::TimeConsumingPanoramaAlgorithm *) (HuginBase::StitcherAlgorithm *) ((HuginBase::FileOutputStitcherAlgorithm *) x));
}
static void *_p_HuginBase__NonaFileOutputStitcherTo_p_HuginBase__TimeConsumingPanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::TimeConsumingPanoramaAlgorithm *) (HuginBase::StitcherAlgorithm *)(HuginBase::FileOutputStitcherAlgorithm *) ((HuginBase::NonaFileOutputStitcher *) x));
}
static void *_p_HuginBase__PhotometricOptimizerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::TimeConsumingPanoramaAlgorithm *)  ((HuginBase::PhotometricOptimizer *) x));
}
static void *_p_HuginBase__SmartPhotometricOptimizerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::TimeConsumingPanoramaAlgorithm *) (HuginBase::PhotometricOptimizer *) ((HuginBase::SmartPhotometricOptimizer *) x));
}
static void *_p_HuginBase__ImageStitcherAlgorithmTo_p_HuginBase__StitcherAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::StitcherAlgorithm *)  ((HuginBase::ImageStitcherAlgorithm *) x));
}
static void *_p_HuginBase__FileOutputStitcherAlgorithmTo_p_HuginBase__StitcherAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::StitcherAlgorithm *)  ((HuginBase::FileOutputStitcherAlgorithm *) x));
}
static void *_p_HuginBase__NonaFileOutputStitcherTo_p_HuginBase__StitcherAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::StitcherAlgorithm *) (HuginBase::FileOutputStitcherAlgorithm *) ((HuginBase::NonaFileOutputStitcher *) x));
}
static void *_p_HuginBase__NonaFileOutputStitcherTo_p_HuginBase__FileOutputStitcherAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::FileOutputStitcherAlgorithm *)  ((HuginBase::NonaFileOutputStitcher *) x));
}
static void *_p_HuginBase__PanoramaTo_p_HuginBase__PanoramaData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaData *) (HuginBase::ManagedPanoramaData *) ((HuginBase::Panorama *) x));
}
static void *_p_HuginBase__ManagedPanoramaDataTo_p_HuginBase__PanoramaData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaData *)  ((HuginBase::ManagedPanoramaData *) x));
}
static void *_p_HuginBase__PanoramaTo_p_HuginBase__ManagedPanoramaData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::ManagedPanoramaData *)  ((HuginBase::Panorama *) x));
}
static void *_p_HuginBase__PanoramaTo_p_AppBase__DocumentData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AppBase::DocumentData *)  ((HuginBase::Panorama *) x));
}
static void *_p_HuginBase__SrcPanoImageTo_p_HuginBase__BaseSrcPanoImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::BaseSrcPanoImage *)  ((HuginBase::SrcPanoImage *) x));
}
static void *_p_HuginBase__StraightenPanoramaTo_p_HuginBase__RotatePanorama(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::RotatePanorama *)  ((HuginBase::StraightenPanorama *) x));
}
static void *_p_HuginBase__FitPanoramaTo_p_HuginBase__CalculateFitPanorama(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::CalculateFitPanorama *)  ((HuginBase::FitPanorama *) x));
}
static void *_p_HuginBase__SetWidthOptimalTo_p_HuginBase__CalculateOptimalScale(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::CalculateOptimalScale *)  ((HuginBase::SetWidthOptimal *) x));
}
static void *_p_HuginBase__PanoramaMementoTo_p_HuginBase__PanoramaDataMemento(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PanoramaDataMemento *)  ((HuginBase::PanoramaMemento *) x));
}
static void *_p_HuginBase__AllPointSamplerTo_p_HuginBase__PointSampler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PointSampler *)  ((HuginBase::AllPointSampler *) x));
}
static void *_p_HuginBase__RandomPointSamplerTo_p_HuginBase__PointSampler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::PointSampler *)  ((HuginBase::RandomPointSampler *) x));
}
static void *_p_HuginBase__LinkedVariableTo_p_HuginBase__Variable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::Variable *)  ((HuginBase::LinkedVariable *) x));
}
static void *_p_HuginBase__LensVariableTo_p_HuginBase__Variable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::Variable *)  ((HuginBase::LensVariable *) x));
}
static void *_p_HuginBase__SmartOptimiseTo_p_HuginBase__SmartOptimizerStub(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HuginBase::SmartOptimizerStub *)  ((HuginBase::SmartOptimise *) x));
}
static swig_type_info _swigt__p_AlignInfo = {"_p_AlignInfo", "AlignInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AppBase__DocumentData = {"_p_AppBase__DocumentData", "AppBase::DocumentData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AppBase__ProgressDisplay = {"_p_AppBase__ProgressDisplay", "AppBase::ProgressDisplay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AppBase__ProgressReporter = {"_p_AppBase__ProgressReporter", "AppBase::ProgressReporter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DestAlpha = {"_p_DestAlpha", "DestAlpha *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DestImage = {"_p_DestImage", "DestImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__AllPointSampler = {"_p_HuginBase__AllPointSampler", "HuginBase::AllPointSampler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__AssistantMakefilelibExport = {"_p_HuginBase__AssistantMakefilelibExport", "HuginBase::AssistantMakefilelibExport *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__AssistantMakefilelibExport__AssistantPrograms = {"_p_HuginBase__AssistantMakefilelibExport__AssistantPrograms", "HuginBase::AssistantMakefilelibExport::AssistantPrograms *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__AutoOptimise = {"_p_HuginBase__AutoOptimise", "HuginBase::AutoOptimise *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__BaseSrcPanoImage = {"_p_HuginBase__BaseSrcPanoImage", "HuginBase::BaseSrcPanoImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CalculateCPStatistics = {"_p_HuginBase__CalculateCPStatistics", "HuginBase::CalculateCPStatistics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CalculateCPStatisticsError = {"_p_HuginBase__CalculateCPStatisticsError", "HuginBase::CalculateCPStatisticsError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CalculateCPStatisticsRadial = {"_p_HuginBase__CalculateCPStatisticsRadial", "HuginBase::CalculateCPStatisticsRadial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CalculateFOV = {"_p_HuginBase__CalculateFOV", "HuginBase::CalculateFOV *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CalculateFitPanorama = {"_p_HuginBase__CalculateFitPanorama", "HuginBase::CalculateFitPanorama *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CalculateImageOverlap = {"_p_HuginBase__CalculateImageOverlap", "HuginBase::CalculateImageOverlap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CalculateMeanExposure = {"_p_HuginBase__CalculateMeanExposure", "HuginBase::CalculateMeanExposure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CalculateOptimalROI = {"_p_HuginBase__CalculateOptimalROI", "HuginBase::CalculateOptimalROI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CalculateOptimalScale = {"_p_HuginBase__CalculateOptimalScale", "HuginBase::CalculateOptimalScale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__CenterHorizontally = {"_p_HuginBase__CenterHorizontally", "HuginBase::CenterHorizontally *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__ComputeImageROI = {"_p_HuginBase__ComputeImageROI", "HuginBase::ComputeImageROI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__ControlPoint = {"_p_HuginBase__ControlPoint", "ControlPoint *|HuginBase::ControlPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__DestPanoImage = {"_p_HuginBase__DestPanoImage", "HuginBase::DestPanoImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__FileOutputStitcherAlgorithm = {"_p_HuginBase__FileOutputStitcherAlgorithm", "HuginBase::FileOutputStitcherAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__FitPanorama = {"_p_HuginBase__FitPanorama", "HuginBase::FitPanorama *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__ImageStitcherAlgorithm = {"_p_HuginBase__ImageStitcherAlgorithm", "HuginBase::ImageStitcherAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__Lens = {"_p_HuginBase__Lens", "HuginBase::Lens *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__LensVariable = {"_p_HuginBase__LensVariable", "HuginBase::LensVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__LinkedVariable = {"_p_HuginBase__LinkedVariable", "HuginBase::LinkedVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__ManagedPanoramaData = {"_p_HuginBase__ManagedPanoramaData", "HuginBase::ManagedPanoramaData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__MaskPolygon__MaskType = {"_p_HuginBase__MaskPolygon__MaskType", "HuginBase::MaskPolygon::MaskType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__NonaFileOutputStitcher = {"_p_HuginBase__NonaFileOutputStitcher", "HuginBase::NonaFileOutputStitcher *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PTOptimizer = {"_p_HuginBase__PTOptimizer", "HuginBase::PTOptimizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PTools__AlignInfoWrap = {"_p_HuginBase__PTools__AlignInfoWrap", "HuginBase::PTools::AlignInfoWrap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PTools__Transform = {"_p_HuginBase__PTools__Transform", "HuginBase::PTools::Transform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__Panorama = {"_p_HuginBase__Panorama", "HuginBase::Panorama *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PanoramaAlgorithm = {"_p_HuginBase__PanoramaAlgorithm", "HuginBase::PanoramaAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PanoramaData = {"_p_HuginBase__PanoramaData", "HuginBase::PanoramaData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PanoramaDataMemento = {"_p_HuginBase__PanoramaDataMemento", "HuginBase::PanoramaDataMemento *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PanoramaMakefilelibExport = {"_p_HuginBase__PanoramaMakefilelibExport", "HuginBase::PanoramaMakefilelibExport *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PanoramaMakefilelibExport__PTPrograms = {"_p_HuginBase__PanoramaMakefilelibExport__PTPrograms", "HuginBase::PanoramaMakefilelibExport::PTPrograms *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PanoramaMemento = {"_p_HuginBase__PanoramaMemento", "HuginBase::PanoramaMemento *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PanoramaObserver = {"_p_HuginBase__PanoramaObserver", "HuginBase::PanoramaObserver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PanoramaOptions = {"_p_HuginBase__PanoramaOptions", "PanoramaOptions *|HuginBase::PanoramaOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PhotometricOptimizer = {"_p_HuginBase__PhotometricOptimizer", "HuginBase::PhotometricOptimizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__PointSampler = {"_p_HuginBase__PointSampler", "HuginBase::PointSampler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__RandomPointSampler = {"_p_HuginBase__RandomPointSampler", "HuginBase::RandomPointSampler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__RotatePanorama = {"_p_HuginBase__RotatePanorama", "HuginBase::RotatePanorama *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__SetWidthOptimal = {"_p_HuginBase__SetWidthOptimal", "HuginBase::SetWidthOptimal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__SmartOptimise = {"_p_HuginBase__SmartOptimise", "HuginBase::SmartOptimise *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__SmartOptimizerStub = {"_p_HuginBase__SmartOptimizerStub", "HuginBase::SmartOptimizerStub *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__SmartPhotometricOptimizer = {"_p_HuginBase__SmartPhotometricOptimizer", "HuginBase::SmartPhotometricOptimizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__SrcPanoImage = {"_p_HuginBase__SrcPanoImage", "SrcPanoImage *|HuginBase::SrcPanoImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__StitcherAlgorithm = {"_p_HuginBase__StitcherAlgorithm", "HuginBase::StitcherAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__StraightenPanorama = {"_p_HuginBase__StraightenPanorama", "HuginBase::StraightenPanorama *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__TimeConsumingPanoramaAlgorithm = {"_p_HuginBase__TimeConsumingPanoramaAlgorithm", "HuginBase::TimeConsumingPanoramaAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__TranslatePanorama = {"_p_HuginBase__TranslatePanorama", "HuginBase::TranslatePanorama *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HuginBase__Variable = {"_p_HuginBase__Variable", "HuginBase::Variable *|Variable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Image = {"_p_Image", "Image *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImageOptions = {"_p_ImageOptions", "ImageOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LensProjectionFormat = {"_p_LensProjectionFormat", "LensProjectionFormat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskPolygon = {"_p_MaskPolygon", "MaskPolygon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskPolygonVector = {"_p_MaskPolygonVector", "MaskPolygonVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix3 = {"_p_Matrix3", "Matrix3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointPairs = {"_p_PointPairs", "PointPairs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_String = {"_p_String", "String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TrformStr = {"_p_TrformStr", "TrformStr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_aPrefs = {"_p_aPrefs", "aPrefs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hugin_utils__FDiff2D = {"_p_hugin_utils__FDiff2D", "hugin_utils::FDiff2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_optVars = {"_p_optVars", "optVars *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pano_projection_features = {"_p_pano_projection_features", "pano_projection_features *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__string_t = {"_p_std__lessT_std__string_t", "std::less< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_unsigned_int_t = {"_p_std__lessT_unsigned_int_t", "std::less< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t = {"_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t", "LensVarMap *|HuginBase::LensVarMap *|std::map< std::string,HuginBase::LensVariable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::LensVariable > > > *|std::map< std::string,LensVariable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__allocator_type = {"_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__allocator_type", "std::map< std::string,LensVariable >::allocator_type *|std::allocator< std::pair< std::string const,HuginBase::LensVariable > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type = {"_p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type", "std::map< std::string,LensVariable >::mapped_type *|HuginBase::LensVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t = {"_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t", "std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > *|VariableMap *|HuginBase::VariableMap *|std::map< std::string,Variable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__allocator_type = {"_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__allocator_type", "std::map< std::string,Variable >::allocator_type *|std::allocator< std::pair< std::string const,HuginBase::Variable > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type = {"_p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type", "std::map< std::string,Variable >::mapped_type *|HuginBase::Variable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostringstream = {"_p_std__ostringstream", "std::ostringstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_unsigned_int_HuginBase__ControlPoint_t = {"_p_std__pairT_unsigned_int_HuginBase__ControlPoint_t", "std::pair< unsigned int,HuginBase::ControlPoint > *|HuginBase::CPoint *|std::pair< unsigned int,ControlPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t = {"_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t", "std::set< std::string,std::less< std::string >,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t = {"_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t", "std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *|HuginBase::UIntSet *|set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *|set< unsigned int > *|std::set< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t = {"_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t", "std::vector< HuginBase::ControlPoint,std::allocator< HuginBase::ControlPoint > > *|CPVector *|HuginBase::CPVector *|std::vector< ControlPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__allocator_type = {"_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__allocator_type", "std::vector< ControlPoint >::allocator_type *|std::allocator< HuginBase::ControlPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type = {"_p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type", "std::vector< ControlPoint >::value_type *|HuginBase::ControlPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HuginBase__Lens_std__allocatorT_HuginBase__Lens_t_t = {"_p_std__vectorT_HuginBase__Lens_std__allocatorT_HuginBase__Lens_t_t", "std::vector< HuginBase::Lens,std::allocator< HuginBase::Lens > > *|HuginBase::LensVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t = {"_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t", "std::vector< HuginBase::SrcPanoImage,std::allocator< HuginBase::SrcPanoImage > > *|std::vector< SrcPanoImage > *|HuginBase::ImageVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__allocator_type = {"_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__allocator_type", "std::vector< SrcPanoImage >::allocator_type *|std::allocator< HuginBase::SrcPanoImage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type = {"_p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type", "HuginBase::SrcPanoImage *|std::vector< SrcPanoImage >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float,std::allocator< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t = {"_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t", "std::vector< std::map< std::string,Variable > > *|std::vector< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > >,std::allocator< std::map< std::string,Variable,std::less< std::string >,std::allocator< std::pair< std::string const,Variable > > > > > *|std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > >,std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > > *|std::vector< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > *|VariableMapVector *|HuginBase::VariableMapVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t__allocator_type = {"_p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t__allocator_type", "std::vector< std::map< std::string,Variable > >::allocator_type *|std::allocator< std::map< std::string,HuginBase::Variable,std::less< std::string >,std::allocator< std::pair< std::string const,HuginBase::Variable > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t = {"_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t", "std::vector< std::pair< unsigned int,HuginBase::ControlPoint >,std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > > *|std::vector< std::pair< unsigned int,HuginBase::ControlPoint > > *|std::vector< std::pair< unsigned int,ControlPoint > > *|std::vector< std::pair< unsigned int,ControlPoint >,std::allocator< std::pair< unsigned int,ControlPoint > > > *|HuginBase::CPointVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t__allocator_type = {"_p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t__allocator_type", "std::vector< std::pair< unsigned int,ControlPoint > >::allocator_type *|std::allocator< std::pair< unsigned int,HuginBase::ControlPoint > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t = {"_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t", "std::vector< std::set< std::string > > *|std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > >,std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > > *|std::vector< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > *|OptimizeVector *|HuginBase::OptimizeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__allocator_type = {"_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__allocator_type", "std::vector< std::set< std::string > >::allocator_type *|std::allocator< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type = {"_p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type", "std::set< std::string,std::less< std::string >,std::allocator< std::string > > *|std::vector< std::set< std::string > >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t = {"_p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t", "std::vector< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > >,std::allocator< std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > > > *|std::vector< HuginBase::UIntSet,std::allocator< HuginBase::UIntSet > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *|vector< unsigned int,std::allocator< unsigned int > > *|HuginBase::UIntVector *|vector< unsigned int > *|std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type", "vector< unsigned int >::allocator_type *|std::allocator< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t = {"_p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t", "std::vector< vigra::FRGBImage *,std::allocator< vigra::FRGBImage * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vigra__Rect2D_std__allocatorT_vigra__Rect2D_t_t = {"_p_std__vectorT_vigra__Rect2D_std__allocatorT_vigra__Rect2D_t_t", "std::vector< vigra::Rect2D,std::allocator< vigra::Rect2D > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t = {"_p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t", "std::vector< vigra_ext::PointPairRGB,std::allocator< vigra_ext::PointPairRGB > > *|HuginBase::PointSampler::PointPairs *|HuginBase::PhotometricOptimizer::PointPairs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tm = {"_p_tm", "tm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vigra__Diff2D = {"_p_vigra__Diff2D", "vigra::Diff2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vigra__Point2D = {"_p_vigra__Point2D", "vigra::Point2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vigra__Rect2D = {"_p_vigra__Rect2D", "vigra::Rect2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vigra__Size2D = {"_p_vigra__Size2D", "vigra::Size2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vigra_ext__Interpolator = {"_p_vigra_ext__Interpolator", "vigra_ext::Interpolator *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AlignInfo,
  &_swigt__p_AppBase__DocumentData,
  &_swigt__p_AppBase__ProgressDisplay,
  &_swigt__p_AppBase__ProgressReporter,
  &_swigt__p_DestAlpha,
  &_swigt__p_DestImage,
  &_swigt__p_HuginBase__AllPointSampler,
  &_swigt__p_HuginBase__AssistantMakefilelibExport,
  &_swigt__p_HuginBase__AssistantMakefilelibExport__AssistantPrograms,
  &_swigt__p_HuginBase__AutoOptimise,
  &_swigt__p_HuginBase__BaseSrcPanoImage,
  &_swigt__p_HuginBase__CalculateCPStatistics,
  &_swigt__p_HuginBase__CalculateCPStatisticsError,
  &_swigt__p_HuginBase__CalculateCPStatisticsRadial,
  &_swigt__p_HuginBase__CalculateFOV,
  &_swigt__p_HuginBase__CalculateFitPanorama,
  &_swigt__p_HuginBase__CalculateImageOverlap,
  &_swigt__p_HuginBase__CalculateMeanExposure,
  &_swigt__p_HuginBase__CalculateOptimalROI,
  &_swigt__p_HuginBase__CalculateOptimalScale,
  &_swigt__p_HuginBase__CenterHorizontally,
  &_swigt__p_HuginBase__ComputeImageROI,
  &_swigt__p_HuginBase__ControlPoint,
  &_swigt__p_HuginBase__DestPanoImage,
  &_swigt__p_HuginBase__FileOutputStitcherAlgorithm,
  &_swigt__p_HuginBase__FitPanorama,
  &_swigt__p_HuginBase__ImageStitcherAlgorithm,
  &_swigt__p_HuginBase__Lens,
  &_swigt__p_HuginBase__LensVariable,
  &_swigt__p_HuginBase__LinkedVariable,
  &_swigt__p_HuginBase__ManagedPanoramaData,
  &_swigt__p_HuginBase__MaskPolygon__MaskType,
  &_swigt__p_HuginBase__NonaFileOutputStitcher,
  &_swigt__p_HuginBase__PTOptimizer,
  &_swigt__p_HuginBase__PTools__AlignInfoWrap,
  &_swigt__p_HuginBase__PTools__Transform,
  &_swigt__p_HuginBase__Panorama,
  &_swigt__p_HuginBase__PanoramaAlgorithm,
  &_swigt__p_HuginBase__PanoramaData,
  &_swigt__p_HuginBase__PanoramaDataMemento,
  &_swigt__p_HuginBase__PanoramaMakefilelibExport,
  &_swigt__p_HuginBase__PanoramaMakefilelibExport__PTPrograms,
  &_swigt__p_HuginBase__PanoramaMemento,
  &_swigt__p_HuginBase__PanoramaObserver,
  &_swigt__p_HuginBase__PanoramaOptions,
  &_swigt__p_HuginBase__PhotometricOptimizer,
  &_swigt__p_HuginBase__PointSampler,
  &_swigt__p_HuginBase__RandomPointSampler,
  &_swigt__p_HuginBase__RotatePanorama,
  &_swigt__p_HuginBase__SetWidthOptimal,
  &_swigt__p_HuginBase__SmartOptimise,
  &_swigt__p_HuginBase__SmartOptimizerStub,
  &_swigt__p_HuginBase__SmartPhotometricOptimizer,
  &_swigt__p_HuginBase__SrcPanoImage,
  &_swigt__p_HuginBase__StitcherAlgorithm,
  &_swigt__p_HuginBase__StraightenPanorama,
  &_swigt__p_HuginBase__TimeConsumingPanoramaAlgorithm,
  &_swigt__p_HuginBase__TranslatePanorama,
  &_swigt__p_HuginBase__Variable,
  &_swigt__p_Image,
  &_swigt__p_ImageOptions,
  &_swigt__p_LensProjectionFormat,
  &_swigt__p_MaskPolygon,
  &_swigt__p_MaskPolygonVector,
  &_swigt__p_Matrix3,
  &_swigt__p_PointPairs,
  &_swigt__p_String,
  &_swigt__p_TrformStr,
  &_swigt__p_aPrefs,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_first_type,
  &_swigt__p_hugin_utils__FDiff2D,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_optVars,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_char,
  &_swigt__p_pano_projection_features,
  &_swigt__p_second_type,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__istream,
  &_swigt__p_std__lessT_std__string_t,
  &_swigt__p_std__lessT_unsigned_int_t,
  &_swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t,
  &_swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__allocator_type,
  &_swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type,
  &_swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t,
  &_swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__allocator_type,
  &_swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type,
  &_swigt__p_std__ostream,
  &_swigt__p_std__ostringstream,
  &_swigt__p_std__pairT_unsigned_int_HuginBase__ControlPoint_t,
  &_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  &_swigt__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t,
  &_swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__allocator_type,
  &_swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,
  &_swigt__p_std__vectorT_HuginBase__Lens_std__allocatorT_HuginBase__Lens_t_t,
  &_swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t,
  &_swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__allocator_type,
  &_swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t,
  &_swigt__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t,
  &_swigt__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t,
  &_swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,
  &_swigt__p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type,
  &_swigt__p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t,
  &_swigt__p_std__vectorT_vigra__Rect2D_std__allocatorT_vigra__Rect2D_t_t,
  &_swigt__p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_tm,
  &_swigt__p_unsigned_char,
  &_swigt__p_value_type,
  &_swigt__p_vigra__Diff2D,
  &_swigt__p_vigra__Point2D,
  &_swigt__p_vigra__Rect2D,
  &_swigt__p_vigra__Size2D,
  &_swigt__p_vigra_ext__Interpolator,
};

static swig_cast_info _swigc__p_AlignInfo[] = {  {&_swigt__p_AlignInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AppBase__DocumentData[] = {  {&_swigt__p_HuginBase__Panorama, _p_HuginBase__PanoramaTo_p_AppBase__DocumentData, 0, 0},  {&_swigt__p_AppBase__DocumentData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AppBase__ProgressDisplay[] = {  {&_swigt__p_AppBase__ProgressDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AppBase__ProgressReporter[] = {  {&_swigt__p_AppBase__ProgressReporter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DestAlpha[] = {  {&_swigt__p_DestAlpha, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DestImage[] = {  {&_swigt__p_DestImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__AllPointSampler[] = {  {&_swigt__p_HuginBase__AllPointSampler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__AssistantMakefilelibExport[] = {  {&_swigt__p_HuginBase__AssistantMakefilelibExport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__AssistantMakefilelibExport__AssistantPrograms[] = {  {&_swigt__p_HuginBase__AssistantMakefilelibExport__AssistantPrograms, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__AutoOptimise[] = {  {&_swigt__p_HuginBase__AutoOptimise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__BaseSrcPanoImage[] = {  {&_swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, _p_HuginBase__SrcPanoImageTo_p_HuginBase__BaseSrcPanoImage, 0, 0},  {&_swigt__p_HuginBase__BaseSrcPanoImage, 0, 0, 0},  {&_swigt__p_HuginBase__SrcPanoImage, _p_HuginBase__SrcPanoImageTo_p_HuginBase__BaseSrcPanoImage, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CalculateCPStatistics[] = {  {&_swigt__p_HuginBase__CalculateCPStatistics, 0, 0, 0},  {&_swigt__p_HuginBase__CalculateCPStatisticsError, _p_HuginBase__CalculateCPStatisticsErrorTo_p_HuginBase__CalculateCPStatistics, 0, 0},  {&_swigt__p_HuginBase__CalculateCPStatisticsRadial, _p_HuginBase__CalculateCPStatisticsRadialTo_p_HuginBase__CalculateCPStatistics, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CalculateCPStatisticsError[] = {  {&_swigt__p_HuginBase__CalculateCPStatisticsError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CalculateCPStatisticsRadial[] = {  {&_swigt__p_HuginBase__CalculateCPStatisticsRadial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CalculateFOV[] = {  {&_swigt__p_HuginBase__CalculateFOV, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CalculateFitPanorama[] = {  {&_swigt__p_HuginBase__CalculateFitPanorama, 0, 0, 0},  {&_swigt__p_HuginBase__FitPanorama, _p_HuginBase__FitPanoramaTo_p_HuginBase__CalculateFitPanorama, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CalculateImageOverlap[] = {  {&_swigt__p_HuginBase__CalculateImageOverlap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CalculateMeanExposure[] = {  {&_swigt__p_HuginBase__CalculateMeanExposure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CalculateOptimalROI[] = {  {&_swigt__p_HuginBase__CalculateOptimalROI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CalculateOptimalScale[] = {  {&_swigt__p_HuginBase__CalculateOptimalScale, 0, 0, 0},  {&_swigt__p_HuginBase__SetWidthOptimal, _p_HuginBase__SetWidthOptimalTo_p_HuginBase__CalculateOptimalScale, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__CenterHorizontally[] = {  {&_swigt__p_HuginBase__CenterHorizontally, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__ComputeImageROI[] = {  {&_swigt__p_HuginBase__ComputeImageROI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__ControlPoint[] = {  {&_swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0, 0, 0},  {&_swigt__p_HuginBase__ControlPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__DestPanoImage[] = {  {&_swigt__p_HuginBase__DestPanoImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__FileOutputStitcherAlgorithm[] = {  {&_swigt__p_HuginBase__FileOutputStitcherAlgorithm, 0, 0, 0},  {&_swigt__p_HuginBase__NonaFileOutputStitcher, _p_HuginBase__NonaFileOutputStitcherTo_p_HuginBase__FileOutputStitcherAlgorithm, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__FitPanorama[] = {  {&_swigt__p_HuginBase__FitPanorama, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__ImageStitcherAlgorithm[] = {  {&_swigt__p_HuginBase__ImageStitcherAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__Lens[] = {  {&_swigt__p_HuginBase__Lens, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__LensVariable[] = {  {&_swigt__p_HuginBase__LensVariable, 0, 0, 0},  {&_swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__LinkedVariable[] = {  {&_swigt__p_HuginBase__LinkedVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__ManagedPanoramaData[] = {  {&_swigt__p_HuginBase__Panorama, _p_HuginBase__PanoramaTo_p_HuginBase__ManagedPanoramaData, 0, 0},  {&_swigt__p_HuginBase__ManagedPanoramaData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__MaskPolygon__MaskType[] = {  {&_swigt__p_HuginBase__MaskPolygon__MaskType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__NonaFileOutputStitcher[] = {  {&_swigt__p_HuginBase__NonaFileOutputStitcher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PTOptimizer[] = {  {&_swigt__p_HuginBase__AutoOptimise, _p_HuginBase__AutoOptimiseTo_p_HuginBase__PTOptimizer, 0, 0},  {&_swigt__p_HuginBase__SmartOptimise, _p_HuginBase__SmartOptimiseTo_p_HuginBase__PTOptimizer, 0, 0},  {&_swigt__p_HuginBase__PTOptimizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PTools__AlignInfoWrap[] = {  {&_swigt__p_HuginBase__PTools__AlignInfoWrap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PTools__Transform[] = {  {&_swigt__p_HuginBase__PTools__Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__Panorama[] = {  {&_swigt__p_HuginBase__Panorama, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PanoramaAlgorithm[] = {  {&_swigt__p_HuginBase__CalculateOptimalScale, _p_HuginBase__CalculateOptimalScaleTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__CalculateCPStatisticsError, _p_HuginBase__CalculateCPStatisticsErrorTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__CenterHorizontally, _p_HuginBase__CenterHorizontallyTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__CalculateMeanExposure, _p_HuginBase__CalculateMeanExposureTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__FileOutputStitcherAlgorithm, _p_HuginBase__FileOutputStitcherAlgorithmTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__ImageStitcherAlgorithm, _p_HuginBase__ImageStitcherAlgorithmTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__StitcherAlgorithm, _p_HuginBase__StitcherAlgorithmTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__TimeConsumingPanoramaAlgorithm, _p_HuginBase__TimeConsumingPanoramaAlgorithmTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__PanoramaAlgorithm, 0, 0, 0},  {&_swigt__p_HuginBase__FitPanorama, _p_HuginBase__FitPanoramaTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__CalculateFitPanorama, _p_HuginBase__CalculateFitPanoramaTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__TranslatePanorama, _p_HuginBase__TranslatePanoramaTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__RotatePanorama, _p_HuginBase__RotatePanoramaTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__StraightenPanorama, _p_HuginBase__StraightenPanoramaTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__SetWidthOptimal, _p_HuginBase__SetWidthOptimalTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__RandomPointSampler, _p_HuginBase__RandomPointSamplerTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__AllPointSampler, _p_HuginBase__AllPointSamplerTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__PointSampler, _p_HuginBase__PointSamplerTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__CalculateOptimalROI, _p_HuginBase__CalculateOptimalROITo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__CalculateCPStatistics, _p_HuginBase__CalculateCPStatisticsTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__AssistantMakefilelibExport, _p_HuginBase__AssistantMakefilelibExportTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__PanoramaMakefilelibExport, _p_HuginBase__PanoramaMakefilelibExportTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__PhotometricOptimizer, _p_HuginBase__PhotometricOptimizerTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__SmartPhotometricOptimizer, _p_HuginBase__SmartPhotometricOptimizerTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__PTOptimizer, _p_HuginBase__PTOptimizerTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__NonaFileOutputStitcher, _p_HuginBase__NonaFileOutputStitcherTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__CalculateCPStatisticsRadial, _p_HuginBase__CalculateCPStatisticsRadialTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__AutoOptimise, _p_HuginBase__AutoOptimiseTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__SmartOptimise, _p_HuginBase__SmartOptimiseTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__CalculateFOV, _p_HuginBase__CalculateFOVTo_p_HuginBase__PanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__ComputeImageROI, _p_HuginBase__ComputeImageROITo_p_HuginBase__PanoramaAlgorithm, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PanoramaData[] = {  {&_swigt__p_HuginBase__Panorama, _p_HuginBase__PanoramaTo_p_HuginBase__PanoramaData, 0, 0},  {&_swigt__p_HuginBase__PanoramaData, 0, 0, 0},  {&_swigt__p_HuginBase__ManagedPanoramaData, _p_HuginBase__ManagedPanoramaDataTo_p_HuginBase__PanoramaData, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PanoramaDataMemento[] = {  {&_swigt__p_HuginBase__PanoramaDataMemento, 0, 0, 0},  {&_swigt__p_HuginBase__PanoramaMemento, _p_HuginBase__PanoramaMementoTo_p_HuginBase__PanoramaDataMemento, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PanoramaMakefilelibExport[] = {  {&_swigt__p_HuginBase__PanoramaMakefilelibExport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PanoramaMakefilelibExport__PTPrograms[] = {  {&_swigt__p_HuginBase__PanoramaMakefilelibExport__PTPrograms, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PanoramaMemento[] = {  {&_swigt__p_HuginBase__PanoramaMemento, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PanoramaObserver[] = {  {&_swigt__p_HuginBase__PanoramaObserver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PanoramaOptions[] = {  {&_swigt__p_HuginBase__PanoramaOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PhotometricOptimizer[] = {  {&_swigt__p_HuginBase__PhotometricOptimizer, 0, 0, 0},  {&_swigt__p_HuginBase__SmartPhotometricOptimizer, _p_HuginBase__SmartPhotometricOptimizerTo_p_HuginBase__PhotometricOptimizer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__PointSampler[] = {  {&_swigt__p_HuginBase__PointSampler, 0, 0, 0},  {&_swigt__p_HuginBase__AllPointSampler, _p_HuginBase__AllPointSamplerTo_p_HuginBase__PointSampler, 0, 0},  {&_swigt__p_HuginBase__RandomPointSampler, _p_HuginBase__RandomPointSamplerTo_p_HuginBase__PointSampler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__RandomPointSampler[] = {  {&_swigt__p_HuginBase__RandomPointSampler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__RotatePanorama[] = {  {&_swigt__p_HuginBase__RotatePanorama, 0, 0, 0},  {&_swigt__p_HuginBase__StraightenPanorama, _p_HuginBase__StraightenPanoramaTo_p_HuginBase__RotatePanorama, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__SetWidthOptimal[] = {  {&_swigt__p_HuginBase__SetWidthOptimal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__SmartOptimise[] = {  {&_swigt__p_HuginBase__SmartOptimise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__SmartOptimizerStub[] = {  {&_swigt__p_HuginBase__SmartOptimizerStub, 0, 0, 0},  {&_swigt__p_HuginBase__SmartOptimise, _p_HuginBase__SmartOptimiseTo_p_HuginBase__SmartOptimizerStub, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__SmartPhotometricOptimizer[] = {  {&_swigt__p_HuginBase__SmartPhotometricOptimizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__SrcPanoImage[] = {  {&_swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0, 0, 0},  {&_swigt__p_HuginBase__SrcPanoImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__StitcherAlgorithm[] = {  {&_swigt__p_HuginBase__StitcherAlgorithm, 0, 0, 0},  {&_swigt__p_HuginBase__ImageStitcherAlgorithm, _p_HuginBase__ImageStitcherAlgorithmTo_p_HuginBase__StitcherAlgorithm, 0, 0},  {&_swigt__p_HuginBase__FileOutputStitcherAlgorithm, _p_HuginBase__FileOutputStitcherAlgorithmTo_p_HuginBase__StitcherAlgorithm, 0, 0},  {&_swigt__p_HuginBase__NonaFileOutputStitcher, _p_HuginBase__NonaFileOutputStitcherTo_p_HuginBase__StitcherAlgorithm, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__StraightenPanorama[] = {  {&_swigt__p_HuginBase__StraightenPanorama, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__TimeConsumingPanoramaAlgorithm[] = {  {&_swigt__p_HuginBase__PointSampler, _p_HuginBase__PointSamplerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__AllPointSampler, _p_HuginBase__AllPointSamplerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__RandomPointSampler, _p_HuginBase__RandomPointSamplerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0, 0},  {&_swigt__p_HuginBase__StitcherAlgorithm, _p_HuginBase__StitcherAlgorithmTo_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__ImageStitcherAlgorithm, _p_HuginBase__ImageStitcherAlgorithmTo_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__FileOutputStitcherAlgorithm, _p_HuginBase__FileOutputStitcherAlgorithmTo_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__NonaFileOutputStitcher, _p_HuginBase__NonaFileOutputStitcherTo_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__PhotometricOptimizer, _p_HuginBase__PhotometricOptimizerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0},  {&_swigt__p_HuginBase__SmartPhotometricOptimizer, _p_HuginBase__SmartPhotometricOptimizerTo_p_HuginBase__TimeConsumingPanoramaAlgorithm, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__TranslatePanorama[] = {  {&_swigt__p_HuginBase__TranslatePanorama, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HuginBase__Variable[] = {  {&_swigt__p_HuginBase__Variable, 0, 0, 0},  {&_swigt__p_HuginBase__LinkedVariable, _p_HuginBase__LinkedVariableTo_p_HuginBase__Variable, 0, 0},  {&_swigt__p_HuginBase__LensVariable, _p_HuginBase__LensVariableTo_p_HuginBase__Variable, 0, 0},  {&_swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type, _p_HuginBase__LensVariableTo_p_HuginBase__Variable, 0, 0},  {&_swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Image[] = {  {&_swigt__p_Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImageOptions[] = {  {&_swigt__p_ImageOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LensProjectionFormat[] = {  {&_swigt__p_LensProjectionFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskPolygon[] = {  {&_swigt__p_MaskPolygon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskPolygonVector[] = {  {&_swigt__p_MaskPolygonVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix3[] = {  {&_swigt__p_Matrix3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointPairs[] = {  {&_swigt__p_PointPairs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_String[] = {  {&_swigt__p_String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TrformStr[] = {  {&_swigt__p_TrformStr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_aPrefs[] = {  {&_swigt__p_aPrefs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hugin_utils__FDiff2D[] = {  {&_swigt__p_hugin_utils__FDiff2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_optVars[] = {  {&_swigt__p_optVars, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pano_projection_features[] = {  {&_swigt__p_pano_projection_features, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__string_t[] = {  {&_swigt__p_std__lessT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_unsigned_int_t[] = {  {&_swigt__p_std__lessT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type[] = {  {&_swigt__p_HuginBase__LensVariable, 0, 0, 0},  {&_swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type[] = {  {&_swigt__p_HuginBase__Variable, 0, 0, 0},  {&_swigt__p_HuginBase__LinkedVariable, _p_HuginBase__LinkedVariableTo_p_HuginBase__Variable, 0, 0},  {&_swigt__p_HuginBase__LensVariable, _p_HuginBase__LensVariableTo_p_HuginBase__Variable, 0, 0},  {&_swigt__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type, _p_HuginBase__LensVariableTo_p_HuginBase__Variable, 0, 0},  {&_swigt__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostringstream[] = {  {&_swigt__p_std__ostringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_unsigned_int_HuginBase__ControlPoint_t[] = {  {&_swigt__p_std__pairT_unsigned_int_HuginBase__ControlPoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0, 0, 0},  {&_swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t[] = {  {&_swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type[] = {  {&_swigt__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type, 0, 0, 0},  {&_swigt__p_HuginBase__ControlPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HuginBase__Lens_std__allocatorT_HuginBase__Lens_t_t[] = {  {&_swigt__p_std__vectorT_HuginBase__Lens_std__allocatorT_HuginBase__Lens_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t[] = {  {&_swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type[] = {  {&_swigt__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type, 0, 0, 0},  {&_swigt__p_HuginBase__SrcPanoImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type[] = {  {&_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0, 0, 0},  {&_swigt__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t[] = {  {&_swigt__p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vigra__Rect2D_std__allocatorT_vigra__Rect2D_t_t[] = {  {&_swigt__p_std__vectorT_vigra__Rect2D_std__allocatorT_vigra__Rect2D_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t[] = {  {&_swigt__p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tm[] = {  {&_swigt__p_tm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vigra__Diff2D[] = {  {&_swigt__p_vigra__Diff2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vigra__Point2D[] = {  {&_swigt__p_vigra__Point2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vigra__Rect2D[] = {  {&_swigt__p_vigra__Rect2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vigra__Size2D[] = {  {&_swigt__p_vigra__Size2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vigra_ext__Interpolator[] = {  {&_swigt__p_vigra_ext__Interpolator, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AlignInfo,
  _swigc__p_AppBase__DocumentData,
  _swigc__p_AppBase__ProgressDisplay,
  _swigc__p_AppBase__ProgressReporter,
  _swigc__p_DestAlpha,
  _swigc__p_DestImage,
  _swigc__p_HuginBase__AllPointSampler,
  _swigc__p_HuginBase__AssistantMakefilelibExport,
  _swigc__p_HuginBase__AssistantMakefilelibExport__AssistantPrograms,
  _swigc__p_HuginBase__AutoOptimise,
  _swigc__p_HuginBase__BaseSrcPanoImage,
  _swigc__p_HuginBase__CalculateCPStatistics,
  _swigc__p_HuginBase__CalculateCPStatisticsError,
  _swigc__p_HuginBase__CalculateCPStatisticsRadial,
  _swigc__p_HuginBase__CalculateFOV,
  _swigc__p_HuginBase__CalculateFitPanorama,
  _swigc__p_HuginBase__CalculateImageOverlap,
  _swigc__p_HuginBase__CalculateMeanExposure,
  _swigc__p_HuginBase__CalculateOptimalROI,
  _swigc__p_HuginBase__CalculateOptimalScale,
  _swigc__p_HuginBase__CenterHorizontally,
  _swigc__p_HuginBase__ComputeImageROI,
  _swigc__p_HuginBase__ControlPoint,
  _swigc__p_HuginBase__DestPanoImage,
  _swigc__p_HuginBase__FileOutputStitcherAlgorithm,
  _swigc__p_HuginBase__FitPanorama,
  _swigc__p_HuginBase__ImageStitcherAlgorithm,
  _swigc__p_HuginBase__Lens,
  _swigc__p_HuginBase__LensVariable,
  _swigc__p_HuginBase__LinkedVariable,
  _swigc__p_HuginBase__ManagedPanoramaData,
  _swigc__p_HuginBase__MaskPolygon__MaskType,
  _swigc__p_HuginBase__NonaFileOutputStitcher,
  _swigc__p_HuginBase__PTOptimizer,
  _swigc__p_HuginBase__PTools__AlignInfoWrap,
  _swigc__p_HuginBase__PTools__Transform,
  _swigc__p_HuginBase__Panorama,
  _swigc__p_HuginBase__PanoramaAlgorithm,
  _swigc__p_HuginBase__PanoramaData,
  _swigc__p_HuginBase__PanoramaDataMemento,
  _swigc__p_HuginBase__PanoramaMakefilelibExport,
  _swigc__p_HuginBase__PanoramaMakefilelibExport__PTPrograms,
  _swigc__p_HuginBase__PanoramaMemento,
  _swigc__p_HuginBase__PanoramaObserver,
  _swigc__p_HuginBase__PanoramaOptions,
  _swigc__p_HuginBase__PhotometricOptimizer,
  _swigc__p_HuginBase__PointSampler,
  _swigc__p_HuginBase__RandomPointSampler,
  _swigc__p_HuginBase__RotatePanorama,
  _swigc__p_HuginBase__SetWidthOptimal,
  _swigc__p_HuginBase__SmartOptimise,
  _swigc__p_HuginBase__SmartOptimizerStub,
  _swigc__p_HuginBase__SmartPhotometricOptimizer,
  _swigc__p_HuginBase__SrcPanoImage,
  _swigc__p_HuginBase__StitcherAlgorithm,
  _swigc__p_HuginBase__StraightenPanorama,
  _swigc__p_HuginBase__TimeConsumingPanoramaAlgorithm,
  _swigc__p_HuginBase__TranslatePanorama,
  _swigc__p_HuginBase__Variable,
  _swigc__p_Image,
  _swigc__p_ImageOptions,
  _swigc__p_LensProjectionFormat,
  _swigc__p_MaskPolygon,
  _swigc__p_MaskPolygonVector,
  _swigc__p_Matrix3,
  _swigc__p_PointPairs,
  _swigc__p_String,
  _swigc__p_TrformStr,
  _swigc__p_aPrefs,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_first_type,
  _swigc__p_hugin_utils__FDiff2D,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_optVars,
  _swigc__p_p_PyObject,
  _swigc__p_p_char,
  _swigc__p_pano_projection_features,
  _swigc__p_second_type,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__istream,
  _swigc__p_std__lessT_std__string_t,
  _swigc__p_std__lessT_unsigned_int_t,
  _swigc__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t,
  _swigc__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__allocator_type,
  _swigc__p_std__mapT_std__string_HuginBase__LensVariable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__LensVariable_t_t_t__mapped_type,
  _swigc__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t,
  _swigc__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__allocator_type,
  _swigc__p_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t__mapped_type,
  _swigc__p_std__ostream,
  _swigc__p_std__ostringstream,
  _swigc__p_std__pairT_unsigned_int_HuginBase__ControlPoint_t,
  _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  _swigc__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t,
  _swigc__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__allocator_type,
  _swigc__p_std__vectorT_HuginBase__ControlPoint_std__allocatorT_HuginBase__ControlPoint_t_t__value_type,
  _swigc__p_std__vectorT_HuginBase__Lens_std__allocatorT_HuginBase__Lens_t_t,
  _swigc__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t,
  _swigc__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__allocator_type,
  _swigc__p_std__vectorT_HuginBase__SrcPanoImage_std__allocatorT_HuginBase__SrcPanoImage_t_t__value_type,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t,
  _swigc__p_std__vectorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_std__allocatorT_std__mapT_std__string_HuginBase__Variable_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_HuginBase__Variable_t_t_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t,
  _swigc__p_std__vectorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_std__allocatorT_std__pairT_unsigned_int_HuginBase__ControlPoint_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t,
  _swigc__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_std__allocatorT_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t_t_t__value_type,
  _swigc__p_std__vectorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type,
  _swigc__p_std__vectorT_vigra__FRGBImage_p_std__allocatorT_vigra__FRGBImage_p_t_t,
  _swigc__p_std__vectorT_vigra__Rect2D_std__allocatorT_vigra__Rect2D_t_t,
  _swigc__p_std__vectorT_vigra_ext__PointPairRGB_std__allocatorT_vigra_ext__PointPairRGB_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_tm,
  _swigc__p_unsigned_char,
  _swigc__p_value_type,
  _swigc__p_vigra__Diff2D,
  _swigc__p_vigra__Point2D,
  _swigc__p_vigra__Rect2D,
  _swigc__p_vigra__Size2D,
  _swigc__p_vigra_ext__Interpolator,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  SWIG_Python_SetConstant(d, "DocumentData_SUCCESSFUL",SWIG_From_int(static_cast< int >(AppBase::DocumentData::SUCCESSFUL)));
  SWIG_Python_SetConstant(d, "DocumentData_UNKNOWN_ERROR",SWIG_From_int(static_cast< int >(AppBase::DocumentData::UNKNOWN_ERROR)));
  SWIG_Python_SetConstant(d, "DocumentData_INCOMPATIBLE_TYPE",SWIG_From_int(static_cast< int >(AppBase::DocumentData::INCOMPATIBLE_TYPE)));
  SWIG_Python_SetConstant(d, "DocumentData_INVALID_DATA",SWIG_From_int(static_cast< int >(AppBase::DocumentData::INVALID_DATA)));
  SWIG_Python_SetConstant(d, "DocumentData_PARCER_ERROR",SWIG_From_int(static_cast< int >(AppBase::DocumentData::PARCER_ERROR)));
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"Lens_variableNames",Swig_var_Lens_variableNames_get, Swig_var_Lens_variableNames_set);
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_RECTILINEAR",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::RECTILINEAR)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_PANORAMIC",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::PANORAMIC)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_CIRCULAR_FISHEYE",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::CIRCULAR_FISHEYE)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_FULL_FRAME_FISHEYE",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::FULL_FRAME_FISHEYE)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_EQUIRECTANGULAR",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::EQUIRECTANGULAR)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_FISHEYE_ORTHOGRAPHIC",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::FISHEYE_ORTHOGRAPHIC)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_FISHEYE_STEREOGRAPHIC",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::FISHEYE_STEREOGRAPHIC)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_FISHEYE_EQUISOLID",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::FISHEYE_EQUISOLID)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_FISHEYE_THOBY",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::FISHEYE_THOBY)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_NO_CROP",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::NO_CROP)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_CROP_RECTANGLE",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::CROP_RECTANGLE)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_CROP_CIRCLE",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::CROP_CIRCLE)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_VIGCORR_NONE",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::VIGCORR_NONE)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_VIGCORR_RADIAL",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::VIGCORR_RADIAL)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_VIGCORR_FLATFIELD",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::VIGCORR_FLATFIELD)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_VIGCORR_DIV",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::VIGCORR_DIV)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_RESPONSE_EMOR",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::RESPONSE_EMOR)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_RESPONSE_LINEAR",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::RESPONSE_LINEAR)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_RESPONSE_GAMMA",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::RESPONSE_GAMMA)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_RESPONSE_FILE",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::RESPONSE_FILE)));
  SWIG_Python_SetConstant(d, "BaseSrcPanoImage_RESPONSE_ICC",SWIG_From_int(static_cast< int >(HuginBase::BaseSrcPanoImage::RESPONSE_ICC)));
  SWIG_Python_SetConstant(d, "ControlPoint_X_Y",SWIG_From_int(static_cast< int >(HuginBase::ControlPoint::X_Y)));
  SWIG_Python_SetConstant(d, "ControlPoint_X",SWIG_From_int(static_cast< int >(HuginBase::ControlPoint::X)));
  SWIG_Python_SetConstant(d, "ControlPoint_Y",SWIG_From_int(static_cast< int >(HuginBase::ControlPoint::Y)));
  SWIG_addvarlink(SWIG_globals(),(char*)"ControlPoint_modeNames",Swig_var_ControlPoint_modeNames_get, Swig_var_ControlPoint_modeNames_set);
  SWIG_Python_SetConstant(d, "DestPanoImage_RECTILINEAR",SWIG_From_int(static_cast< int >(HuginBase::DestPanoImage::RECTILINEAR)));
  SWIG_Python_SetConstant(d, "DestPanoImage_CYLINDRICAL",SWIG_From_int(static_cast< int >(HuginBase::DestPanoImage::CYLINDRICAL)));
  SWIG_Python_SetConstant(d, "DestPanoImage_EQUIRECTANGULAR",SWIG_From_int(static_cast< int >(HuginBase::DestPanoImage::EQUIRECTANGULAR)));
  SWIG_Python_SetConstant(d, "DestPanoImage_FULL_FRAME_FISHEYE",SWIG_From_int(static_cast< int >(HuginBase::DestPanoImage::FULL_FRAME_FISHEYE)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_RECTILINEAR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::RECTILINEAR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_CYLINDRICAL",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::CYLINDRICAL)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_EQUIRECTANGULAR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::EQUIRECTANGULAR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_FULL_FRAME_FISHEYE",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::FULL_FRAME_FISHEYE)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_STEREOGRAPHIC",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::STEREOGRAPHIC)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_MERCATOR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::MERCATOR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_TRANSVERSE_MERCATOR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::TRANSVERSE_MERCATOR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_SINUSOIDAL",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::SINUSOIDAL)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_LAMBERT",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::LAMBERT)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_LAMBERT_AZIMUTHAL",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::LAMBERT_AZIMUTHAL)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_ALBERS_EQUAL_AREA_CONIC",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::ALBERS_EQUAL_AREA_CONIC)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_MILLER_CYLINDRICAL",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::MILLER_CYLINDRICAL)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PANINI",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PANINI)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_ARCHITECTURAL",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::ARCHITECTURAL)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_ORTHOGRAPHIC",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::ORTHOGRAPHIC)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_EQUISOLID",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::EQUISOLID)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_EQUI_PANINI",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::EQUI_PANINI)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_BIPLANE",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::BIPLANE)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_TRIPLANE",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::TRIPLANE)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_GENERAL_PANINI",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::GENERAL_PANINI)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_THOBY_PROJECTION",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::THOBY_PROJECTION)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_NO_SPEEDUP",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::NO_SPEEDUP)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_MAX_SPEEDUP",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::MAX_SPEEDUP)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_MEDIUM_SPEEDUP",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::MEDIUM_SPEEDUP)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_JPEG",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::JPEG)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PNG",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PNG)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_TIFF",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::TIFF)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_TIFF_m",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::TIFF_m)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_TIFF_mask",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::TIFF_mask)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_TIFF_multilayer",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::TIFF_multilayer)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_TIFF_multilayer_mask",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::TIFF_multilayer_mask)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PICT",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PICT)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PSD",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PSD)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PSD_m",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PSD_m)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PSD_mask",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PSD_mask)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PAN",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PAN)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_IVR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::IVR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_IVR_java",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::IVR_java)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_VRML",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::VRML)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_QTVR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::QTVR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_HDR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::HDR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_HDR_m",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::HDR_m)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_EXR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::EXR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_EXR_m",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::EXR_m)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_FILEFORMAT_NULL",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::FILEFORMAT_NULL)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_OUTPUT_LDR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::OUTPUT_LDR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_OUTPUT_HDR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::OUTPUT_HDR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_HDRMERGE_AVERAGE",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::HDRMERGE_AVERAGE)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_HDRMERGE_DEGHOST",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::HDRMERGE_DEGHOST)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_NO_BLEND",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::NO_BLEND)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PTBLENDER_BLEND",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PTBLENDER_BLEND)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_ENBLEND_BLEND",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::ENBLEND_BLEND)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_SMARTBLEND_BLEND",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::SMARTBLEND_BLEND)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PTMASKER_BLEND",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PTMASKER_BLEND)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_NONA",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::NONA)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_PTMENDER",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::PTMENDER)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_NONE",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::NONE)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_BRIGHTNESS_COLOR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::BRIGHTNESS_COLOR)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_BRIGHTNESS",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::BRIGHTNESS)));
  SWIG_Python_SetConstant(d, "PanoramaOptions_COLOR",SWIG_From_int(static_cast< int >(HuginBase::PanoramaOptions::COLOR)));
  SWIG_Python_SetConstant(d, "SmartPhotometricOptimizer_OPT_PHOTOMETRIC_LDR",SWIG_From_int(static_cast< int >(HuginBase::SmartPhotometricOptimizer::OPT_PHOTOMETRIC_LDR)));
  SWIG_Python_SetConstant(d, "SmartPhotometricOptimizer_OPT_PHOTOMETRIC_LDR_WB",SWIG_From_int(static_cast< int >(HuginBase::SmartPhotometricOptimizer::OPT_PHOTOMETRIC_LDR_WB)));
  SWIG_Python_SetConstant(d, "SmartPhotometricOptimizer_OPT_PHOTOMETRIC_HDR",SWIG_From_int(static_cast< int >(HuginBase::SmartPhotometricOptimizer::OPT_PHOTOMETRIC_HDR)));
  SWIG_Python_SetConstant(d, "SmartPhotometricOptimizer_OPT_PHOTOMETRIC_HDR_WB",SWIG_From_int(static_cast< int >(HuginBase::SmartPhotometricOptimizer::OPT_PHOTOMETRIC_HDR_WB)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_POS",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_POS)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_B",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_B)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_AC",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_AC)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_DE",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_DE)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_HFOV",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_HFOV)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_GT",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_GT)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_VIG",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_VIG)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_VIGCENTRE",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_VIGCENTRE)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_EXP",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_EXP)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_WB",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_WB)));
  SWIG_Python_SetConstant(d, "SmartOptimizerStub_OPT_RESP",SWIG_From_int(static_cast< int >(HuginBase::SmartOptimizerStub::OPT_RESP)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

