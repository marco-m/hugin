README for the Hugin Scripting interface alpha

This README gives an introduction to the alpha release of the Hugin Scripting Interface, hsi in short, and it's counterpart, the hugin plugin interface, hpi. The current status of this project is experimental, the intended audience is developers.

1. What is it?

Hugin provides a GUI and a set of command line tools, but currently there is no scripting/plugin interface. Scripting hugin/panotools currently means to exchanges data by passing command line arguments and files. To change this and to make hugin's capabilities available for script writing, I have written interface code in SWIG, the 'Simplified Wrapper and Interface Generator'. With this code, SWIG can generate an interface for scripting languages in general; out of the available choices I have picked Python as the target language and generated a Python module which makes a large part of hugin's capabilities available to Python. Once the hugin data were accessible to Python, I was able to embed Python in hugin (and other software that uses libhuginbase.so) and use the data compatibility to provide a plugin interface which allows execution of arbitrary Python code with extensive hugin type and method compatibility.

2. What is needed to get it up and running?

Currently the only mode of distribution is source code.

There are two levels of source you can start from. If you want to go all the way from my interface definition file, you'll need SWIG - I used SWIG 2.0.1 which I built from source; hugin's code is quite complex C++ with lots of templates and STL use, so older versions of SWIG may not be able to generate the interface. SWIG will generate the source for the wrapper and a Python file to access it. You can just take the wrapper (it's C++ code), compile and link it and omit the SWIG step. If you want to do this you'll have to edit the cmake code accordingly by throwing out the references to hsi.i and using hsiPYTHON_wrap.cxx as source for _hsi.so; you'll also have to use the prefabricated version of hsi.py. The remainder of this text assumes you have it all and you're going all the way.

Before I continue, let me point out the minor changes I have made in the existing body of code to integrate my work.
The first thing I did was add a new folder to contain the body of code for hsi/hpi. It's here: hugin.hg/src/hsi
The second thing I obviously had to do was to change the CMakeLists.txt in hugin.hg/src to look for Python and include my new hsi directory. These are addiditions, not modifications, but once hsi becomes integrated with the main branch, there ought to be a conditional behaviour here that allows building hugin without the scripting extensions if Python is missing.
The next modification is to one Hugin header file which I wanted to have wrapped, but couldn't get to yield unmodified. This is probably a temporary measure. The file in question is hugin_base/panodata/PanoramaVariable.h and the changes can be switched on by defining _HUGIN_SCRIPTING_INTERFACE.
Finally, there are some experimental additions to hugin that Pablo d'Angelo has kindly provided in the python_scripting branch of hugin he provided for testing purposes and as a starting point. These are additions as well and I won't enlarge upon them here. But I had to call the hpi code from the starting point Pablo d'Angelo provided, so there is a modification in hugin_hsi.hg/src/hugin1/hugin/wxPanoCommand.cpp as well.
If you pick my source distribution, you'll have to get the python_scripting branch from the official site and manually apply the modifications I've mentioned, the modified files are in a folder 'collateral' in the hsi tar file, which has to be unpacked to hugin.hg/src/hsi.

3. Okay, from now on I'll assume you have the following:

- Linux system  (I use Ubuntu: http://www.ubuntu.com/)
- CMake         (http://www.cmake.org/)
- SWIG 2.0.1    (http://www.swig.org/)
- Python 2.6    (http://www.python.org/)
- modified Hugin sources (source setup as described in
                 http://wiki.panotools.org/Hugin_Compiling_Ubuntu)
- hsi sources installed

I got my initial branch code like this (courtesy Pablo d'Angelo):
hg clone http://hugin.hg.sourceforge.net:8000/hgroot/hugin/hugin
hugin.hg
cd hugin.hg
# switch to your branch
# ATTENTION: This will remove any local changes, should there be any.
hg update -C python_scripting 

Then I put in my modifications and additions.

Currently there is no official channel to get these additions ecxept from patching the python_scripting branch with data I provide in my bazaar repo, but I hope to be able to offer access to a mercurial repo if I can put one online somewhere.

I recommend you do the following:

Once you have the patched version, there will be some differences to the original. The patch works on a branch called python_scripting and introduces some minor changes to the make infrastructure, one slight modification of a hugin header file, and a new directory hsi in hugin.hg/src which contains all the new sources.
Now you're ready to go. Proceed with a normal hugin build cycle, and if all goes well, you should find the hsi Python module in .../hugin.hg-build/src/hsi together with the wrapper code. The two files that constitute the hsi module are hsi.py and _hsi.so They are both generated by SWIG from the interface definition in hsi.i and the hugin header files. The first one is pure Python. It loads and uses the compiled code in _hsi.so.
There is another Python module you need, and that's hsi.py - it's in the new hsi directory. this one isn't generated, it's handwritten.
These three files (hsi.py, hpi.py and _hsi.so) need to be in your Python module path, so it's probably best if you move hpi.py to where the other two files are and set PYTHONPATH to that directory - alternatively you can link them to the appropriate location in your Python distribution.
Your new build of libhuginbase.so has been modified to provide access to the Python interface, so all programs that link to libhuginbase.so will have this capability. In order to make use of the capability, you need to include the header 'hpi.h' into your file and use the function callhpi() it declares. This allows to call arbitrary Python code and exchange data with it; a demo plugin is also in the hsi directory.

4. Play with it

You may have noticed that the wrapper part of the module, where the hardcore stuff happens, _hsi.so, is quite large. this is because the wrap is generated from (mostly) unmodifies hugin headers and I made an attempt to offer proxies for every data type and access to all methods and functions in Python, maintaining the same object-oriented interface to the data that is available in hugin. This fattens the interface; ultimately one might conceive of a slimmer interface definition, also because it maybe isn't really necessary to interface to every bit of hugin code declared in the headers that went into the interface. But for now, it's the maximum of what I could wrap without interfering with the hugin headers too much (some wouldn't easily yield to my wrapping efforts), and this also makes it quite comfortable to use.
On the other hand, the interface won't stop you from shooting yourself in the foot - you're probably quite safe loading a pto file and looking at it's data, but once you start changing things you may run into trouble. Let me give you an tiny idea of what you can do from Python:

from hsi import *         # load the module
p=pano_open('xx.pto')     # open a pto file with a helper function
img0=p.getImage(0)        # access the first image
print img0.getWidth()     # print the image's width
cpv=p.getCtrlPoints()     # get the control points in the panorama
for cp in cpv[:30:2] :    # print some data from some of the CPs
  print cp.x1
cpv=cpv[30:50]            # throw away most of the CPs
p.setCtrlPoints(cpv)      # pass that subset back to the panorama
ofs=make_std_ofstream('yy.pto') # make an ofstream with a helper function
p.writeData(ofs)          # write the modified panorama to that stream

But this is only the hsi side of things - calling hugin functionality from Python scripts. I have also created code to go the other way: use Python functionality from C++ code. I call this side hpi, 'hugin plugin interface'. In Python terminology, hsi is an extension (of Python), while hpi is embedding Python into another application. As mentioned before, hpi allows you to call arbitrary Python code from all programs that link to it; the patched version of hugin does that and offers an entry point for Python experiments via Edit->Run Python Script. There's a sample Python plugin in the hsi directory to give you an idea; you'll only see it's output if you launch hugin from the command line. hpi uses hsi, so it can deal with all data types wrapped with hsi and call all their methods. So now there's full integration: you can call Python and just carry on in Python with the same objects, then return to C++. As a user, you are enabled to write Python plugins with access to the hugin dataverse. The plugin interface provided by hugin now is merely experimental, though, because there hasn't been any discussion yet how to provide the new features to users and what to do with them.
 
5. Technicalities

If you're familiar with hugin's sources, you may be curious what headers have been wrapped and what classes are accessible. Here's an overview:

Headers which were wrapped:

<algorithm/ControlPointCreatorAlgorithm.h>
<algorithm/PanoramaAlgorithm.h>
<algorithms/assistant_makefile/AssistantMakefilelibExport.h>
<algorithms/basic/CalculateCPStatistics.h>
<algorithms/basic/CalculateMeanExposure.h>
<algorithms/basic/CalculateOptimalROI.h>
<algorithms/basic/CalculateOptimalScale.h>
<algorithms/basic/CalculateOverlap.h>
<algorithms/basic/RotatePanorama.h>
<algorithms/basic/StraightenPanorama.h>
<algorithms/basic/TranslatePanorama.h>
<algorithms/control_points/CleanCP.h>
<algorithms/nona/CalculateFOV.h>
<algorithms/nona/CenterHorizontally.h>
<algorithms/nona/ComputeImageROI.h>
<algorithms/nona/FitPanorama.h>
<algorithms/nona/NonaFileStitcher.h>
<algorithms/nona/NonaImageStitcher.h>
<algorithms/optimizer/ImageGraph.h>
<algorithms/optimizer/PhotometricOptimizer.h>
<algorithms/optimizer/PTOptimizer.h>
<algorithms/panorama_makefile/PanoramaMakefilelibExport.h>
<algorithms/point_sampler/PointSampler.h>
<algorithm/StitcherAlgorithm.h>
<panodata/ControlPoint.h>
<panodata/DestPanoImage.h>
<panodata/ImageVariable.h>
<panodata/Lens.h>
<panodata/PanoramaData.h>
<panodata/Panorama.h>
<panodata/PanoramaOptions.h>
<panodata/PanoramaVariable.h>
<panodata/SrcPanoImage.h>
<panotools/PanoToolsInterface.h>

Classes which are available:

        AlignInfoWrap
        BaseSrcPanoImage
            SrcPanoImage
        CPVector
        CPoint
        CPointVector
        CalculateImageOverlap
        ControlPoint
        DestPanoImage
        DocumentData
        FDiff2D      (dummy)
        ImageVector
        Lens
        LensVarMap
        OptimizeVector
        PanoramaAlgorithm
            AssistantMakefilelibExport
            CalculateCPStatistics
                CalculateCPStatisticsError
                CalculateCPStatisticsRadial
            CalculateFOV
            CalculateFitPanorama
                FitPanorama
            CalculateMeanExposure
            CalculateOptimalROI
            CalculateOptimalScale
                SetWidthOptimal
            CenterHorizontally
            ComputeImageROI
            PTOptimizer
                AutoOptimise
                SmartOptimise
            PanoramaMakefilelibExport
            RotatePanorama
                StraightenPanorama
            TimeConsumingPanoramaAlgorithm
                PhotometricOptimizer
                    SmartPhotometricOptimizer
                PointSampler
                    AllPointSampler
                    RandomPointSampler
                StitcherAlgorithm
                    FileOutputStitcherAlgorithm
                        NonaFileOutputStitcher
                    ImageStitcherAlgorithm
            TranslatePanorama
        PanoramaData
            ManagedPanoramaData
                Panorama(ManagedPanoramaData, DocumentData)
        PanoramaDataMemento
            PanoramaMemento
        PanoramaObserver
        PanoramaOptions
        Point2D      (dummy)
        Size2D      (dummy)
        SmartOptimizerStub
        SwigPyIterator
        Transform
        UIntSet
        UIntVector
        Variable
            LensVariable
            LinkedVariable
        VariableMap
        VariableMapVector
        tm      (dummy)

This is the status quo, I've put in quite a bit of new stuff recently, but it'll probably stay like this for a while until there is some more feedback. Since this is an experimental alpha release, please don't expect everything to run totally smoothly - the scope of this interface is quite large, and it hasn't seen much testing. The automatic nature of most of the main process - the creation of the hsi module with SWIG - helps in avoiding errors, though - SWIG is a mature technology.

If you have any comments or suggestions, I'd be happy to hear from you on the hugin mailing list:

http://groups.google.com/group/hugin-ptx

