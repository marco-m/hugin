README for the Hugin Scripting interface alpha

This README gives an introduction to the alpha release of the Hugin Scripting Interface, hsi in short. The current status of this project is experimental, the intended audience is developers.

1. What is it?

Hugin is a panorama and image compsiting suite. It provides a GUI and a set of command line tools, but currently there is no scripting/plugin interface. To change this and to make hugin's capabilities available for script writing, I have written some interface code in SWIG, the 'Simplified Wrapper and Interface Generator'. With this code, SWIG can generate an interface for scripting languages in general; out of the available choices I have picked Python as the target language and generated a Python module which makes a large part of hugin's capabilities available to Python. So currently the scripting language can use hugin code, but hugin can't yet use the scripting language. This is planned for the future.

2. What is needed to get it up and running?

If you want to go all the way from source on a Linux system, you may want to skip to section 3. Otherwise it all depends on what system you're on. I am using Kubuntu 10.10 32bit on an intel machine, Python is 2.6. If your system is compatible, you can pick a readily-compiled Python module from here:
http://bazaar.launchpad.net/%7Ekfj/%2Bjunk/script/annotate/head%3A/main/hsi.binary.tgz
If you unpack the contents of this file to your working directory or your python module path, you should be able to get going straight away: just fire up your Python interpreter and enter 'import hsi' - if that succeeds, you can start exploring by using help(hsi) and take it from there.

If you're on an incompatible machine, you'll have to build the modules yourself. If it's a Linux or UNIX system, this shouldn't be too hard, and a description of what to do follows. If you're on a different OS, you're on your own, but SWIG, Python and CMake which is used for building are very well established cross-platform tools. You will also need a recent source version of hugin, since the module needs to link in hugin object code. Again, if you're on Linux, my description applies, otherwise your mileage may vary.

There are two levels of source you can start from. If you want to go all the way from my interface definition file, you'll need SWIG - I used SWIG 2.0.1 which I built from source; hugin's code is quite complex C++ with lots of templates and STL use, so older versions of SWIG may not be able to generate the interface. SWIG will generate the source for the wrapper and a Python file to access it. Theoretically you could just take the wrapper (it's C++ code), compile and link it and omit the SWIG step. If you want to do this, again, you're on your own. So the remainder of this text assumes you have it all and you're going all the way, but the source packet hsi.source.tgz will have the wrapper C++ code as well, just in case ;-)

3. Okay, from now on I'll assume you have the following:

- Linux system  (I use Ubuntu: http://www.ubuntu.com/)
- CMake         (http://www.cmake.org/)
- SWIG 2.0.1    (http://www.swig.org/)
- Python 2.6    (http://www.python.org/)
- Hugin sources (source setup as described in
                 http://wiki.panotools.org/Hugin_Compiling_Ubuntu)
- hsi sources
                (http://bazaar.launchpad.net/%7Ekfj/%2Bjunk/script/annotate/head%3A/main/hsi.source.tgz)

I recommend you do the following:

First make sure you have hugin build capability by going through a build cycle as described in the panotools wiki. I've done it on Kubuntu, I'm not entirely certain if it's precisely the same on other Linux platforms.

Assuming your hugin source tree is in ~/src/hugin, create a directory in the hugin source tree for the hsi sources: ~/src/hugin/hugin.hg/src/hsi

Unpack the contents of hsi.source.tgz to that directory
now you need to make two changes to the hugin source tree:

- you have to add one line to the CMakeLists.txt in the directory ~/src/hugin/hugin.hg/src, at the end of the file is fine:

add_subdirectory(hsi)

- next (I'm sorry, but I found no way to avoid this) you have to replace one hugin header file with a slightly modified but compatible version. This file is PanoramaVariable.h; the modified version is in your hsi directory. The original file is in ~/src/hugin/hugin.hg/src/hugin_base/panodata
You should rename this file, then put the new version there and time stamp the new version to some earlier time so you don't get everything recompiled that includes PanoramaVariable.h (you'd be surprised:-)

Now you're ready to go. Proceed with a normal hugin build cycle, and if all goes well, you should find the Python module in
~/src/hugin/hugin.hg-build/src/hsi
together with the wrapper code. The two files that constitute the module are hsi.py and _hsi.so. The first one is pure Python. It loads and uses the compiled code in _hsi.so.

4. Play with it

You may have noticed that the wrapper part of the module, where the hardcore stuff happens, _hsi.so, is quite large. this is because the wrap is generated from (mostly) unmodifies hugin headers and I made an attempt to offer proxies for every data type and access to all methods and functions in Python, maintaining the same object-oriented interface to the data that is available in hugin. This fattens the interface; ultimately one might conceive of a slimmer interface definition, also because it maybe isn't really necessary to interface to every bit of hugin code declared in the headers that went into the interface. But for now, it's the maximum of what could be wrapped, and this also makes it quite comfortable to use.
On the other hand, the interface won't stop you from shooting yourself in the foot - you're probably quite safe loading a pto file and looking at it's data, but once you start changing things you may run into trouble. Let me give you an tiny idea of what you can do:

from hsi import *         # load the module
p=pano_open('xx.pto')     # open a pto file with a helper function
img0=p.getImage(0)        # access the first image
print img0.getWidth()     # print the image's width
cpv=p.getCtrlPoints()     # get the control points in the panorama
for cp in cpv[:30:2] :    # print some data from some of the CPs
  print cp.x1
cpv=cpv[30:50]            # throw away most of the CPs
p.setCtrlPoints(cpv)      # pass that subset back to the panorama
ofs=make_std_ofstream('yy.pto') # make an ofstream with a helper function
p.writeData(ofs)          # write the modified panorama to that stream

5. Prospects

Where to go from here? Obviously this is only a beginning, but it bears promise. I could name a few goals, some nearer, some further:

- extend the interface to cover even more of hugin's functionality
- document a hugin API to help both hugin development and hsi
- specify the interface more explicitly to make it slimmer
- generate interfaces to other scripting languages SWIG can handle
- embed a Python interpreter in hugin to interface with Python code
- create a Python main program to run the hugin code

6. Technicalities

If you're familiar with hugin's sources, you may be curious what headers have been wrapped and what classes are accessible. Here's an overview:

Headers which were wrapped:

<algorithm/ControlPointCreatorAlgorithm.h>
<algorithm/PanoramaAlgorithm.h>
<algorithms/assistant_makefile/AssistantMakefilelibExport.h>
<algorithms/basic/CalculateCPStatistics.h>
<algorithms/basic/CalculateMeanExposure.h>
<algorithms/basic/CalculateOptimalROI.h>
<algorithms/basic/CalculateOptimalScale.h>
<algorithms/basic/CalculateOverlap.h>
<algorithms/basic/RotatePanorama.h>
<algorithms/basic/StraightenPanorama.h>
<algorithms/basic/TranslatePanorama.h>
<algorithms/control_points/CleanCP.h>
<algorithms/nona/CalculateFOV.h>
<algorithms/nona/CenterHorizontally.h>
<algorithms/nona/ComputeImageROI.h>
<algorithms/nona/FitPanorama.h>
<algorithms/nona/NonaFileStitcher.h>
<algorithms/nona/NonaImageStitcher.h>
<algorithms/optimizer/ImageGraph.h>
<algorithms/optimizer/PhotometricOptimizer.h>
<algorithms/optimizer/PTOptimizer.h>
<algorithms/panorama_makefile/PanoramaMakefilelibExport.h>
<algorithms/point_sampler/PointSampler.h>
<algorithm/StitcherAlgorithm.h>
<panodata/ControlPoint.h>
<panodata/DestPanoImage.h>
<panodata/ImageVariable.h>
<panodata/Lens.h>
<panodata/PanoramaData.h>
<panodata/Panorama.h>
<panodata/PanoramaOptions.h>
<panodata/PanoramaVariable.h>
<panodata/SrcPanoImage.h>
<panotools/PanoToolsInterface.h>

Classes which are available:

        AlignInfoWrap
        BaseSrcPanoImage
            SrcPanoImage
        CPVector
        CPoint
        CPointVector
        CalculateImageOverlap
        ControlPoint
        DestPanoImage
        DocumentData
        FDiff2D      (dummy)
        ImageVector
        Lens
        LensVarMap
        OptimizeVector
        PanoramaAlgorithm
            AssistantMakefilelibExport
            CalculateCPStatistics
                CalculateCPStatisticsError
                CalculateCPStatisticsRadial
            CalculateFOV
            CalculateFitPanorama
                FitPanorama
            CalculateMeanExposure
            CalculateOptimalROI
            CalculateOptimalScale
                SetWidthOptimal
            CenterHorizontally
            ComputeImageROI
            PTOptimizer
                AutoOptimise
                SmartOptimise
            PanoramaMakefilelibExport
            RotatePanorama
                StraightenPanorama
            TimeConsumingPanoramaAlgorithm
                PhotometricOptimizer
                    SmartPhotometricOptimizer
                PointSampler
                    AllPointSampler
                    RandomPointSampler
                StitcherAlgorithm
                    FileOutputStitcherAlgorithm
                        NonaFileOutputStitcher
                    ImageStitcherAlgorithm
            TranslatePanorama
        PanoramaData
            ManagedPanoramaData
                Panorama(ManagedPanoramaData, DocumentData)
        PanoramaDataMemento
            PanoramaMemento
        PanoramaObserver
        PanoramaOptions
        Point2D      (dummy)
        Size2D      (dummy)
        SmartOptimizerStub
        SwigPyIterator
        Transform
        UIntSet
        UIntVector
        Variable
            LensVariable
            LinkedVariable
        VariableMap
        VariableMapVector
        tm      (dummy)

This is the status quo, I've put in quite a bit of new stuff recently, but it'll probably stay like this for a while until there is some feedback on what is needed.

If you have any comments or suggestions, I'd be happy to hear from you on the hugin mailing list:

http://groups.google.com/group/hugin-ptx

